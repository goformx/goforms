version: '3'
output: 'prefixed'

# Add interval at root level for watch mode
interval: 500ms

dotenv: ['.env']

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}
  DB_USER: '{{.DB_USER}}'
  DB_PASSWORD: '{{.DB_PASSWORD}}'
  DB_NAME: '{{.DB_NAME}}'
  DB_HOST: '{{.DB_HOST}}'
  DB_PORT: '{{.DB_PORT}}'
  DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD}}'
  TEST_DB_USER: '{{.TEST_DB_USER}}'
  TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
  TEST_DB_NAME: '{{.TEST_DB_NAME}}'
  TEST_DB_HOST: '{{.TEST_DB_HOST}}'
  TEST_DB_PORT: '{{.TEST_DB_PORT}}'
  PROD_USER: '{{.PROD_USER}}'
  PROD_SERVER: '{{.PROD_SERVER}}'
  PROD_LOG_PATH: '{{.PROD_LOG_PATH}}'

tasks:
  default:
    cmds:
      - task: install
      - task: generate
      - task: build
      - task: migrate:up
      - task: run

  install:
    desc: Install project dependencies
    cmds:
      - go mod tidy
      - go install github.com/a-h/templ/cmd/templ@latest
      - go install github.com/air-verse/air@latest
      - export PATH=$PATH:$(go env GOPATH)/bin
      - npm install

  generate:
    desc: Generate code from templates and frontend assets
    cmds:
      - $(go env GOPATH)/bin/templ generate ./internal/...

  run:
    desc: Run the application
    cmds:
      - ./bin/server

  dev:backend:
    desc: Run the backend with hot reloading
    deps: [generate]
    cmds:
      - air

  dev:frontend:
    desc: Run Vite development server
    deps: [build:frontend]
    cmds:
      - echo "Starting Vite development server..."
      - echo "Vite will be available at http://localhost:3000"
      - echo "HMR is enabled with WebSocket connection"
      - npx vite --host 0.0.0.0 --port 3000 --logLevel info

  dev:
    desc: Run both backend and frontend in development mode
    deps: [dev:backend, dev:frontend]

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f coverage.out
      - rm -f coverage.html
      - rm -rf dist/
      - rm -rf node_modules/
      - find internal/ -name '*_templ.go' -delete

  lint:
    desc: Run linters
    cmds:
      - golangci-lint fmt ./...
      - go vet ./...
      - golangci-lint run

  test:
    desc: Run all tests with new Go 1.24 features
    deps: [generate]
    cmds:
      - go test -v -test.timeout=5m ./internal/...

  test:cover:
    desc: Run tests with coverage using Go 1.24 features
    deps: [generate]
    cmds:
      - mkdir -p coverage
      - go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic -json -test.timeout=5m ./internal/...
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html
      - go tool cover -func=coverage/coverage.out
    generates:
      - coverage/coverage.out
      - coverage/coverage.html

  test:unit:
    desc: Run unit tests with Go 1.24 features
    cmds:
      - go test -v -json -test.timeout=5m ./internal/domain/...

  test:integration:
    desc: Run integration tests with Go 1.24 features
    deps: [generate]
    cmds:
      - go test -v -json -test.timeout=5m ./internal/infrastructure/...

  build:
    desc: Build the application
    deps: [generate]
    cmds:
      - task: build:frontend
      - go build -ldflags "{{.LDFLAGS}}" -o bin/server ./cmd/goforms

  build:frontend:
    desc: Build frontend assets
    cmds:
      - echo "Building frontend assets..."
      - npm run build
      - echo "Frontend build complete"

  build:linux:
    desc: Build for Linux
    deps: [generate, build:frontend]
    cmds:
      - GOOS=linux GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-linux-amd64 ./cmd/goforms

  build:darwin:
    desc: Build for macOS
    deps: [generate, build:frontend]
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-darwin-amd64 ./cmd/goforms

  build:windows:
    desc: Build for Windows
    deps: [generate, build:frontend]
    cmds:
      - GOOS=windows GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-windows-amd64.exe ./cmd/goforms

  migrate:up:
    desc: Run database migrations up
    cmds:
      - go run cmd/migrate/main.go up

  migrate:down:
    desc: Run database migrations down
    cmds:
      - go run cmd/migrate/main.go down

  migrate:create:
    desc: Create a new migration
    cmds:
      - migrate create -ext sql -dir migrations -seq {{.CLI_ARGS}}

  logs:
    desc: Tail production logs
    cmds:
      - ssh {{.PROD_USER}}@{{.PROD_SERVER}} "tail -f -n 100 {{.PROD_LOG_PATH}}/goforms.out.log"

  logs:err:
    desc: Tail production error logs
    cmds:
      - ssh {{.PROD_USER}}@{{.PROD_SERVER}} "tail -f -n 100 {{.PROD_LOG_PATH}}/goforms.err.log"

  logs:all:
    desc: Tail both production logs simultaneously (requires tmux)
    cmds:
      - tmux new-session -d 'task logs' \; split-window -h 'task logs:err' \; attach \;

  logs:cors:
    desc: Monitor CORS-related logs
    cmds:
      - ssh {{.PROD_USER}}@{{.PROD_SERVER}} "tail -f -n 100 {{.PROD_LOG_PATH}}/goforms.{out,err}.log | grep -i 'origin\|cors'"
