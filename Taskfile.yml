# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'
output: 'prefixed'

includes:
  migrate:
    taskfile: Taskfile.migrate.yml
    namespace: migrate
  user:
    taskfile: Taskfile.user.yml
    namespace: user
  act:
    taskfile: Taskfile.act.yml
    namespace: act

dotenv: [ '.env' ]

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  LDFLAGS: -s -w -X github.com/goformx/goforms/internal/infrastructure/version.Version={{.VERSION}} -X github.com/goformx/goforms/internal/infrastructure/version.BuildTime={{.BUILD_TIME}} -X github.com/goformx/goforms/internal/infrastructure/version.GitCommit={{.GIT_COMMIT}} -X github.com/goformx/goforms/internal/infrastructure/version.GoVersion={{.GO_VERSION}}

  DB_USER: '{{.DB_USER}}'
  DB_PASSWORD: '{{.DB_PASSWORD}}'
  DB_NAME: '{{.DB_NAME}}'
  DB_HOST: '{{.DB_HOST}}'
  DB_PORT: '{{.DB_PORT}}'
  DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD}}'

  TEST_DB_USER: '{{.TEST_DB_USER}}'
  TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
  TEST_DB_NAME: '{{.TEST_DB_NAME}}'
  TEST_DB_HOST: '{{.TEST_DB_HOST}}'
  TEST_DB_PORT: '{{.TEST_DB_PORT}}'

tasks:
  default:
    desc: Run full dev setup pipeline
    cmds:
    - task: install
    - task: generate
    - task: build
    - task: migrate:pg:up
    - task: run

  ci:
    desc: Run local GitHub Actions CI using act
    cmds:
    - task: act

  verify:
    desc: Verify frontend code quality and types
    deps: [ lint:frontend ]
    cmds:
    - npm run typecheck
    - npm run format:check

  format:
    desc: Format frontend code
    cmds:
    - npm run format

  install:
    desc: Install all project dependencies
    deps: [ install:go-tools, install:frontend ]

  install:go-tools:
    desc: Install Go development tools
    cmds:
    - go install go.uber.org/mock/mockgen@latest
    - go install github.com/a-h/templ/cmd/templ@latest
    - go install github.com/air-verse/air@latest
    - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    - go install -tags 'mysql,postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
    - export PATH=$PATH:$(go env GOPATH)/bin

  install:frontend:
    desc: Install frontend dependencies
    cmds:
    - npm install
    - npm run postinstall

  generate:
    desc: Generate all code artifacts
    deps: [ generate:templ, generate:mocks ]

  generate:templ:
    desc: Generate templ files
    cmds:
    - templ generate ./internal/...

  generate:mocks:
    desc: Generate all mock implementations
    cmds:
    - mockgen -typed -source=internal/infrastructure/logging/types.go -destination=test/mocks/logging/mock_logger.go -package=logging
    - mockgen -typed -source=internal/domain/form/service.go -destination=test/mocks/form/mock_service.go -package=form -mock_names=Service=MockService
    - mockgen -typed -source=internal/domain/form/repository.go -destination=test/mocks/form/mock_repository.go -package=form
    - mockgen -typed -source=internal/domain/form/event/event.go -destination=test/mocks/form/mock_publisher.go -package=form
    - mockgen -typed -source=internal/domain/common/events/event.go -destination=test/mocks/events/mock_eventbus.go -package=events
    - mockgen -typed -source=internal/domain/user/service.go -destination=test/mocks/user/mock_service.go -package=user
    - mockgen -typed -source=internal/infrastructure/sanitization/interface.go -destination=test/mocks/sanitization/mock_service.go -package=sanitization -mock_names=ServiceInterface=MockService
    - mockgen -typed -source=internal/infrastructure/web/types.go -destination=test/mocks/web/mock_web.go -package=web

  build:
    desc: Build the entire application
    cmds:
    - task: generate
    - task: build:frontend
    - task: build:backend

  build:frontend:
    desc: Build the frontend application
    cmds:
    - npm run build

  build:backend:
    desc: Build the backend application
    cmds:
    - go build -ldflags "{{.LDFLAGS}}" -o bin/goforms main.go

  run:
    desc: Run the compiled application
    cmds:
    - ./bin/goforms

  dev:
    desc: Run development environment (frontend + backend)
    deps: [ dev:backend, dev:frontend ]

  dev:backend:
    desc: Run backend with hot reload
    deps: [ generate ]
    cmds:
    - air -c .air.toml

  dev:frontend:
    desc: Run frontend dev server
    cmds:
    - npx vite --host 0.0.0.0 --port 3000

  clean:
    desc: Remove generated artifacts and dependencies
    cmds:
    - rm -rf bin/ dist/ node_modules/ coverage/
    - find internal/ -name '*_templ.go' -delete
    - find test/mocks -name 'mock_*.go' -delete

  lint:
    desc: Run all linters
    deps: [ lint:backend, lint:frontend ]

  lint:backend:
    desc: Run all backend linters
    cmds:
    - go fmt ./...
    - go vet ./...
    - golangci-lint run ./...

  lint:frontend:
    desc: Run frontend linters
    cmds:
    - npm run lint

  test:
    desc: Run all tests (frontend + backend)
    deps: [ test:frontend, test:backend ]

  test:frontend:
    desc: Run frontend tests
    cmds:
    - npm run test
    - npm run test:coverage

  test:backend:
    desc: Run backend unit tests
    deps: [ generate ]
    cmds:
    - go test -v ./internal/...

  test:cover:
    desc: Run tests and generate coverage report
    deps: [ test:frontend:cover, test:backend:cover ]

  test:frontend:cover:
    desc: Run frontend tests with coverage
    cmds:
    - npm run test:coverage

  test:backend:cover:
    desc: Run backend tests and generate coverage report
    deps: [ generate ]
    cmds:
    - go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/...
    - go tool cover -html=coverage.out -o coverage.html

  test:integration:
    desc: Run integration tests
    cmds:
    - go test -v -tags=integration ./test/integration/...

  security:go:
    desc: Run Go security checks
    cmds:
    - go list -json -deps ./... | nancy sleuth
    - staticcheck ./...

  pre-commit:
    desc: Pre-commit quality checks
    cmds:
    - task: format
    - task: lint
    - task: test
