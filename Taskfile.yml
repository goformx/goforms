version: '3'

dotenv: ['.env']

vars:
  DB_USER: '{{.DB_USER | default "goforms_test"}}'
  DB_PASSWORD: '{{.DB_PASSWORD | default "goforms_test"}}'
  DB_NAME: '{{.DB_NAME | default "goforms_test"}}'
  DB_HOST: '{{.DB_HOST | default "localhost"}}'
  DB_PORT: '{{.DB_PORT | default "3306"}}'
  DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD | default "rootpassword"}}'
  TEST_DB_USER: '{{.TEST_DB_USER | default "goforms_test"}}'
  TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD | default "goforms_test"}}'
  TEST_DB_NAME: '{{.TEST_DB_NAME | default "goforms_test"}}'
  TEST_DB_HOST: '{{.TEST_DB_HOST | default "localhost"}}'
  TEST_DB_PORT: '{{.TEST_DB_PORT | default "3306"}}'

tasks:
  default:
    cmds:
      - task: test

  install:
    desc: Install project dependencies
    cmds:
      - go mod download
      - go mod tidy

  build:
    desc: Build the application
    cmds:
      - go build -o bin/server ./cmd/server

  run:
    desc: Run the application
    cmds:
      - go run ./cmd/server

  test:setup-db:
    desc: Create and setup test database
    cmds:
      - |
        mysql -h {{.TEST_DB_HOST}} \
              -P {{.TEST_DB_PORT}} \
              -u root \
              -p{{.DB_ROOT_PASSWORD}} \
              -e "CREATE DATABASE IF NOT EXISTS {{.TEST_DB_NAME}};"
      - |
        mysql -h {{.TEST_DB_HOST}} \
              -P {{.TEST_DB_PORT}} \
              -u root \
              -p{{.DB_ROOT_PASSWORD}} \
              -e "CREATE USER IF NOT EXISTS '{{.TEST_DB_USER}}'@'%' IDENTIFIED BY '{{.TEST_DB_PASSWORD}}';"
      - |
        mysql -h {{.TEST_DB_HOST}} \
              -P {{.TEST_DB_PORT}} \
              -u root \
              -p{{.DB_ROOT_PASSWORD}} \
              -e "GRANT ALL PRIVILEGES ON {{.TEST_DB_NAME}}.* TO '{{.TEST_DB_USER}}'@'%';"
      - |
        mysql -h {{.TEST_DB_HOST}} \
              -P {{.TEST_DB_PORT}} \
              -u root \
              -p{{.DB_ROOT_PASSWORD}} \
              -e "FLUSH PRIVILEGES;"
    env:
      TEST_DB_USER: '{{.TEST_DB_USER}}'
      TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
      TEST_DB_NAME: '{{.TEST_DB_NAME}}'
      TEST_DB_HOST: '{{.TEST_DB_HOST}}'
      TEST_DB_PORT: '{{.TEST_DB_PORT}}'

  test:
    desc: Run all tests
    deps: [test:setup-db]
    cmds:
      - go test ./internal/... -coverprofile=coverage.out
    env:
      DB_USER: '{{.TEST_DB_USER}}'
      DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
      DB_NAME: '{{.TEST_DB_NAME}}'
      DB_HOST: '{{.TEST_DB_HOST}}'
      DB_PORT: '{{.TEST_DB_PORT}}'

  test:integration:
    desc: Run integration tests with Docker
    cmds:
      # Clean up first
      - docker compose -f docker/test/docker-compose.yml down -v
      # Start services in detached mode
      - docker compose -f docker/test/docker-compose.yml up -d
      # Show database logs
      - sleep 5 # Give the container a moment to start and log any errors
      - docker compose -f docker/test/docker-compose.yml logs test-db
      # If successful, run the tests
      - docker compose -f docker/test/docker-compose.yml exec -T test-app go test ./...
    env:
      DB_USER: '{{.DB_USER}}'
      DB_PASSWORD: '{{.DB_PASSWORD}}'
      DB_NAME: '{{.DB_NAME}}'
      DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD}}'

  test:unit:
    desc: Run unit tests
    cmds:
      - go test -v ./... -tags=unit

  test:coverage:
    desc: Run tests with coverage and generate report
    cmds:
      - |
        go test ./internal/... \
          -coverprofile=coverage.out \
          -covermode=atomic \
          -race
      - go tool cover -func=coverage.out
    env:
      DB_USER: '{{.DB_USER | default "goforms_test"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "goforms_test"}}'
      DB_NAME: '{{.DB_NAME | default "goforms_test"}}'
      DB_HOST: '{{.DB_HOST | default "localhost"}}'
      DB_PORT: '{{.DB_PORT | default "3306"}}'

  migrate:up:
    desc: Run database migrations
    cmds:
      - |
        migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" \
          -path migrations up
    env:
      DB_USER: '{{.DB_USER | default "goforms"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "goforms"}}'
      DB_NAME: '{{.DB_NAME | default "goforms"}}'
      DB_HOST: '{{.DB_HOST | default "localhost"}}'
      DB_PORT: '{{.DB_PORT | default "3306"}}'

  migrate:down:
    desc: Rollback database migrations
    cmds:
      - |
        migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" \
          -path migrations down
    env:
      DB_USER: '{{.DB_USER | default "goforms"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "goforms"}}'
      DB_NAME: '{{.DB_NAME | default "goforms"}}'
      DB_HOST: '{{.DB_HOST | default "localhost"}}'
      DB_PORT: '{{.DB_PORT | default "3306"}}'

  migrate:create:
    desc: Create a new migration
    cmds:
      - migrate create -ext sql -dir migrations -seq {{.CLI_ARGS}}

  lint:
    desc: Run linters
    cmds:
      - go vet ./...
      - golangci-lint run

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f coverage.out
      - rm -f coverage.html

  ci:test:
    desc: Run tests in CI environment
    cmds:
      - task: test:coverage
    env:
      CGO_ENABLED: 1
      DB_USER: goforms
      DB_PASSWORD: goforms
      DB_NAME: goforms_test
      DB_HOST: localhost
      DB_PORT: 3306

  ci:build:
    desc: Build in CI environment
    cmds:
      - task: build
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64

  dev:up:
    desc: Start development environment
    cmds:
      - docker-compose -f docker/dev/docker-compose.yml up -d
      - task: migrate:up

  dev:down:
    desc: Stop development environment
    cmds:
      - docker-compose -f docker/dev/docker-compose.yml down

  dev:logs:
    desc: View development logs
    cmds:
      - docker-compose -f docker/dev/docker-compose.yml logs -f

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t goforms:latest -f docker/Dockerfile .

  docker:run:
    desc: Run Docker container
    cmds:
      - docker run -p 8090:8090 --env-file .env goforms:latest

  prod:up:
    desc: Start production environment
    cmds:
      - docker-compose -f docker/prod/docker-compose.yml up -d
      - task: migrate:up

  prod:down:
    desc: Stop production environment
    cmds:
      - docker-compose -f docker/prod/docker-compose.yml down

  prod:logs:
    desc: View production logs
    cmds:
      - docker-compose -f docker/prod/docker-compose.yml logs -f

  prod:build:
    desc: Build production image
    cmds:
      - task: docker:build
      - docker-compose -f docker/prod/docker-compose.yml build

  logs:
    desc: Tail production logs
    cmds:
      - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.out.log"
    # Filter examples:
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.out.log | grep 'error'"
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.out.log | grep -i 'cors'"
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.out.log | jq 'select(.level==\"error\")'"

  logs:err:
    desc: Tail production error logs
    cmds:
      - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.err.log"
    # Filter examples:
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.err.log | grep 'panic'"
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.err.log | grep -v 'invalid origin'"
    # - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.err.log | jq 'select(.status>=500)'"

  logs:all:
    desc: Tail both production logs simultaneously (requires tmux)
    cmds:
      - |
        tmux new-session -d 'task logs' \; \
        split-window -h 'task logs:err' \; \
        attach \;
    # Note: Use tmux commands while viewing:
    # - Ctrl+b then arrow keys to switch panes
    # - Ctrl+b then d to detach
    # - Ctrl+b then z to zoom/unzoom current pane
    # - tmux attach to reconnect to existing session
