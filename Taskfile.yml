version: '3'

vars:
  # Version and Build Info
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}

  # Application DB
  DB_USER: '{{.DB_USER}}'
  DB_PASSWORD: '{{.DB_PASSWORD}}'
  DB_NAME: '{{.DB_NAME}}'
  DB_HOST: '{{.DB_HOST}}'
  DB_PORT: '{{.DB_PORT}}'
  DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD}}'
  
  # Test DB
  TEST_DB_USER: '{{.TEST_DB_USER}}'
  TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
  TEST_DB_NAME: '{{.TEST_DB_NAME}}'
  TEST_DB_HOST: '{{.TEST_DB_HOST}}'
  TEST_DB_PORT: '{{.TEST_DB_PORT}}'

tasks:
  default:
    cmds:
      - task: install
      - task: generate
      - task: run

  install:
    desc: Install project dependencies
    cmds:
      - go mod download
      - go mod tidy
      - go install github.com/a-h/templ/cmd/templ@latest

  generate:
    desc: Generate code from templates
    cmds:
      - templ generate ./internal/...

  run:
    desc: Run the application
    deps: [install, generate]
    cmds:
      - go run ./cmd/server

  test:setup-db:
    desc: Create and setup test database
    cmds:
      - echo "Database setup should be handled by migrations"
    env:
      TEST_DB_USER: '{{.TEST_DB_USER}}'
      TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
      TEST_DB_NAME: '{{.TEST_DB_NAME}}'
      TEST_DB_HOST: '{{.TEST_DB_HOST}}'
      TEST_DB_PORT: '{{.TEST_DB_PORT}}'

  test:
    desc: Run tests
    deps: [generate]
    cmds:
      - go test -v ./internal/...

  test:cover:
    desc: Run tests with coverage
    deps: [generate]
    cmds:
      - mkdir -p coverage
      - go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./internal/...
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html
      - go tool cover -func=coverage/coverage.out
    generates:
      - coverage/coverage.out
      - coverage/coverage.html

  test:unit:
    desc: Run unit tests
    cmds:
      - golangci-lint run

  build:
    desc: Build the application
    deps: [generate]
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" -o bin/server ./cmd/server

  build:linux:
    desc: Build for Linux
    deps: [generate]
    cmds:
      - GOOS=linux GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-linux-amd64 ./cmd/server

  build:darwin:
    desc: Build for macOS
    deps: [generate]
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-darwin-amd64 ./cmd/server

  build:windows:
    desc: Build for Windows
    deps: [generate]
    cmds:
      - GOOS=windows GOARCH=amd64 go build -ldflags "{{.LDFLAGS}}" -o bin/server-windows-amd64.exe ./cmd/server

  migrate:up:
    desc: Run database migrations up
    cmds:
      - |
        migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" \
          -path migrations up

  migrate:down:
    desc: Run database migrations down
    cmds:
      - |
        migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" \
          -path migrations down

  migrate:new:
    desc: Create a new migration
    cmds:
      - migrate create -ext sql -dir migrations -seq {{.CLI_ARGS}}

  migrate:force:
    desc: Force set migration version
    cmds:
      - migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" -path migrations force {{.CLI_ARGS}}

  migrate:version:
    desc: Show current migration version
    cmds:
      - migrate -database "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}" -path migrations version

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -rf coverage/
      - go clean -cache -testcache

  logs:
    desc: Tail production logs
    cmds:
      - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.out.log"

  logs:err:
    desc: Tail production error logs
    cmds:
      - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.err.log"

  logs:all:
    desc: Tail both production logs simultaneously (requires tmux)
    cmds:
      - |
        tmux new-session -d 'task logs' \; \
        split-window -h 'task logs:err' \; \
        attach \;

  logs:cors:
    desc: Monitor CORS-related logs
    cmds:
      - ssh russell@goforms.streetcode.net "tail -f -n 100 /opt/goforms/logs/goforms.{out,err}.log | grep -i 'origin\|cors'"
