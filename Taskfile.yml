version: '3'

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  DB_USER:
    sh: echo "${DB_USER:-goforms}"
  DB_PASSWORD:
    sh: echo "${DB_PASSWORD:-goforms}"
  DB_HOSTNAME:
    sh: echo "${DB_HOSTNAME:-localhost}"
  DB_PORT:
    sh: echo "${DB_PORT:-3306}"
  DB_NAME:
    sh: echo "${DB_NAME:-goforms}"
  DB_URL:
    sh: echo "mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOSTNAME}}:{{.DB_PORT}})/{{.DB_NAME}}"
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}

tasks:
  default:
    cmds:
      - task: install
      - task: generate
      - task: run

  install:
    desc: Install project dependencies
    cmds:
      - go mod download
      - go mod tidy
      - go install github.com/a-h/templ/cmd/templ@latest

  generate:
    desc: Generate code from templates
    cmds:
      - templ generate ./internal/...

  run:
    desc: Run the application
    deps: [install, generate]
    cmds:
      - go run ./cmd/goforms

  test:
    desc: Run tests
    deps: [generate]
    cmds:
      - go test -v ./...

  test:cover:
    desc: Run tests with coverage
    deps: [generate]
    cmds:
      - mkdir -p coverage
      - go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html
      - go tool cover -func=coverage/coverage.out
    generates:
      - coverage/coverage.out
      - coverage/coverage.html

  lint:
    desc: Run linters
    cmds:
      - golangci-lint run

  build:
    desc: Build the application
    deps: [generate]
    cmds:
      - >
        go build -ldflags "
        -X main.version={{.VERSION}}
        -X main.buildTime={{.BUILD_TIME}}
        -X main.gitCommit={{.GIT_COMMIT}}
        -X main.goVersion={{.GO_VERSION}}
        " -o bin/goforms cmd/goforms/main.go

  build:linux:
    desc: Build for Linux
    deps: [generate]
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o bin/goforms-linux-amd64 ./cmd/goforms

  build:darwin:
    desc: Build for macOS
    deps: [generate]
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -o bin/goforms-darwin-amd64 ./cmd/goforms

  build:windows:
    desc: Build for Windows
    deps: [generate]
    cmds:
      - GOOS=windows GOARCH=amd64 go build -o bin/goforms-windows-amd64.exe ./cmd/goforms

  act:
    desc: Run GitHub Actions locally
    cmds:
      - act -P ubuntu-latest=catthehacker/ubuntu:act-latest

  migrate:up:
    desc: Run database migrations up
    cmds:
      - migrate -database "{{.DB_URL}}" -path migrations up

  migrate:down:
    desc: Run database migrations down
    cmds:
      - migrate -database "{{.DB_URL}}" -path migrations down

  migrate:create:
    desc: Create a new migration
    cmds:
      - migrate create -ext sql -dir migrations -seq {{.CLI_ARGS}}

  migrate:force:
    desc: Force set migration version
    cmds:
      - migrate -database "{{.DB_URL}}" -path migrations force {{.CLI_ARGS}}

  migrate:version:
    desc: Show current migration version
    cmds:
      - migrate -database "{{.DB_URL}}" -path migrations version

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -rf coverage/
      - go clean -cache -testcache
