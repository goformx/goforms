# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'
output: 'prefixed'

includes:
  migrate:
    taskfile: Taskfile.migrate.yml
    namespace: migrate
  user:
    taskfile: Taskfile.user.yml
    namespace: user
  act:
    taskfile: Taskfile.act.yml
    namespace: act

dotenv: [ '.env' ]

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  LDFLAGS: -s -w -X github.com/goformx/goforms/internal/infrastructure/version.Version={{.VERSION}} -X github.com/goformx/goforms/internal/infrastructure/version.BuildTime={{.BUILD_TIME}} -X github.com/goformx/goforms/internal/infrastructure/version.GitCommit={{.GIT_COMMIT}} -X github.com/goformx/goforms/internal/infrastructure/version.GoVersion={{.GO_VERSION}}

  DB_USER: '{{.DB_USER}}'
  DB_PASSWORD: '{{.DB_PASSWORD}}'
  DB_NAME: '{{.DB_NAME}}'
  DB_HOST: '{{.DB_HOST}}'
  DB_PORT: '{{.DB_PORT}}'
  DB_ROOT_PASSWORD: '{{.DB_ROOT_PASSWORD}}'

  TEST_DB_USER: '{{.TEST_DB_USER}}'
  TEST_DB_PASSWORD: '{{.TEST_DB_PASSWORD}}'
  TEST_DB_NAME: '{{.TEST_DB_NAME}}'
  TEST_DB_HOST: '{{.TEST_DB_HOST}}'
  TEST_DB_PORT: '{{.TEST_DB_PORT}}'

tasks:
  default:
    desc: Run full dev setup pipeline
    cmds:
    - task: install
    - task: generate
    - task: build
    - task: migrate:up
    - task: run

  ci:
    desc: Run local GitHub Actions CI using act
    cmds:
    - task: act

  verify:
    desc: Verify frontend code quality and types
    deps: [ lint:frontend ]
    cmds:
    - npm run typecheck
    - npm run format:check

  format:
    desc: Format frontend code
    cmds:
    - npm run format

  install:
    desc: Install all project dependencies
    deps: [ install:go-tools, install:frontend ]

  install:go-tools:
    desc: Install Go development tools
    cmds:
    - go install go.uber.org/mock/mockgen@latest
    - go install github.com/a-h/templ/cmd/templ@latest
    - go install github.com/air-verse/air@latest
    - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    - go install -tags 'mysql,postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
    - export PATH=$PATH:$(go env GOPATH)/bin

  install:frontend:
    desc: Install frontend dependencies
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/.package-lock.json
    cmds:
    - npm install
    - npm run postinstall

  generate:
    desc: Generate all code artifacts
    deps: [ generate:templ, generate:mocks ]

  generate:templ:
    desc: Generate templ files
    sources:
      - "internal/**/*.templ"
    generates:
      - "internal/**/*_templ.go"
    cmds:
    - templ generate ./internal/...

  generate:mocks:
    desc: Generate all mock implementations
    sources:
      - "internal/**/*.go"
      - "!internal/**/*_test.go"
      - "!internal/**/*_templ.go"
      - "!test/mocks/**/*.go"
    generates:
      - "test/mocks/**/*.go"
    cmds:
    - go generate ./...

  build:
    desc: Build the entire application
    deps: [ generate ]
    cmds:
    - task: build:frontend
    - task: build:backend

  build:frontend:
    desc: Build the frontend application
    sources:
      - "src/**/*"
      - package.json
      - vite.config.js
      - tsconfig.json
    generates:
      - "dist/**/*"
    cmds:
    - npm run build

  build:backend:
    desc: Build the backend application
    sources:
      - "**/*.go"
      - "!**/*_test.go"
      - go.mod
      - go.sum
    generates:
      - bin/goforms
    cmds:
    - go build -ldflags "{{.LDFLAGS}}" -o bin/goforms main.go

  run:
    desc: Run the compiled application
    deps: [ build:backend ]
    cmds:
    - ./bin/goforms

  dev:
    desc: Run development environment (frontend + backend)
    deps: [ dev:backend, dev:frontend ]

  dev:backend:
    desc: Run backend with hot reload
    deps: [ generate ]
    cmds:
    - air -c .air.toml

  dev:frontend:
    desc: Run frontend dev server with environment-based configuration
    cmds:
    - npx vite

  clean:
    desc: Remove generated artifacts and dependencies
    cmds:
    - for: ['bin/', 'dist/', 'node_modules/', 'coverage/', '.task/']
      cmd: rm -rf {{.ITEM}}
      ignore_error: true
    - find internal/ -name '*_templ.go' -delete
    - find test/mocks -name 'mock_*.go' -delete

  lint:
    desc: Run all linters
    deps: [ lint:backend, lint:frontend ]

  lint:backend:
    desc: Run all backend linters
    sources:
      - "**/*.go"
      - .golangci.yml
    cmds:
    - go fmt ./...
    - go vet ./...
    - golangci-lint run ./...

  lint:frontend:
    desc: Run frontend linters
    sources:
      - "src/**/*"
      - .eslintrc.js
      - .prettierrc
    cmds:
    - npm run lint

  test:
    desc: Run all tests (frontend + backend)
    cmds:
      - task: test:frontend
      - task: test:backend

  test:frontend:
    desc: Run frontend tests
    sources:
      - "src/**/*"
      - "**/*.test.*"
      - "**/*.spec.*"
    cmds:
    - npm run test

  test:frontend:cover:
    desc: Run frontend tests with coverage
    sources:
      - "src/**/*"
      - "**/*.test.*"
      - "**/*.spec.*"
    generates:
      - coverage/frontend/
    cmds:
    - npm run test:coverage

  test:backend:
    desc: Run backend unit tests
    deps: [ generate ]
    sources:
      - "internal/**/*.go"
      - "**/*_test.go"
    cmds:
    - go test -v ./internal/...

  test:cover:
    desc: Run tests and generate coverage report
    deps: [ test:frontend:cover, test:backend:cover ]

  test:backend:cover:
    desc: Run backend tests and generate coverage report
    deps: [ generate ]
    sources:
      - "internal/**/*.go"
      - "**/*_test.go"
    generates:
      - coverage.out
      - coverage.html
    cmds:
    - go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/...
    - go tool cover -html=coverage.out -o coverage.html

  test:integration:
    desc: Run integration tests
    sources:
      - "test/integration/**/*.go"
      - "internal/**/*.go"
    cmds:
    - go test -v -tags=integration ./test/integration/...

  security:
    desc: Run all security checks
    deps: [ security:go, security:frontend ]

  security:go:
    desc: Run Go security checks
    sources:
      - go.mod
      - go.sum
      - "**/*.go"
    cmds:
    - go list -json -deps ./... | nancy sleuth
    - staticcheck ./...

  security:frontend:
    desc: Run frontend security audit
    sources:
      - package.json
      - package-lock.json
    cmds:
    - npm audit --audit-level=moderate
      ignore_error: true

  pre-commit:
    desc: Pre-commit quality checks
    cmds:
    - task: format
    - task: lint
    - task: test

  docker:build:
    desc: Build Docker image
    sources:
      - Dockerfile
      - "**/*.go"
      - go.mod
      - go.sum
    cmds:
    - docker build -t goforms:{{.VERSION}} .

  docker:run:
    desc: Run application in Docker container
    deps: [ docker:build ]
    cmds:
    - docker run -p 8080:8080 goforms:{{.VERSION}}

  deps:update:
    desc: Update all dependencies
    cmds:
    - go get -u ./...
    - go mod tidy
    - npm update
    status:
    - test -f go.mod
    - test -f package.json

  docs:serve:
    desc: Serve documentation locally
    cmds:
    - |
      if command -v hugo >/dev/null 2>&1; then
        hugo server --buildDrafts
      else
        echo "Hugo not installed. Install with: go install github.com/gohugoio/hugo@latest"
        exit 1
      fi
    preconditions:
    - sh: test -f config.yaml || test -f config.toml || test -f config.json
      msg: "No Hugo config file found. Are you in a Hugo project directory?"

  benchmark:
    desc: Run Go benchmarks
    sources:
      - "**/*_test.go"
      - "internal/**/*.go"
    cmds:
    - go test -bench=. -benchmem ./internal/...

  tools:install:
    desc: Install additional development tools
    cmds:
    - go install github.com/swaggo/swag/cmd/swag@latest
    - go install github.com/cosmtrek/air@latest
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    platforms: [linux, darwin]

  health:
    desc: Check application health and dependencies
    cmds:
    - task: health:go
    - task: health:node
    - task: health:database

  health:go:
    desc: Check Go environment
    cmds:
    - go version
    - go env GOPATH
    - go env GOROOT

  health:node:
    desc: Check Node.js environment
    cmds:
    - node --version
    - npm --version

  health:database:
    desc: Check database connectivity
    cmds:
    - |
      if [ -n "$DB_HOST" ]; then
        echo "Testing database connection to $DB_HOST:$DB_PORT"
        # Add your database connection test here
      else
        echo "Database configuration not found"
      fi
