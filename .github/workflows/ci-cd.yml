# ci-cd.yml - Single consolidated workflow
name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  RUNNING_IN_ACT: ${{ github.actor == 'nektos/act' }}
  GO_VERSION_FILE: 'go.mod'
  NODE_VERSION: '20.19.2'
  TASK_VERSION: '3.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Cancel running workflows when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  security-events: write
  attestations: write
  id-token: write

jobs:
  # Test and lint code
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should-build: ${{ steps.changes.outputs.code == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check for code changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - '**.go'
              - '**.js'
              - '**.ts'
              - '**.tsx'
              - 'go.mod'
              - 'go.sum'
              - 'package*.json'
              - 'Dockerfile'
              - 'docker/**'

      - name: Set up Go
        if: steps.changes.outputs.code == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}
          cache: true
          cache-dependency-path: go.sum

      - name: Set up Node.js
        if: steps.changes.outputs.code == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Task
        if: steps.changes.outputs.code == 'true'
        uses: arduino/setup-task@v2
        with:
          version: ${{ env.TASK_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependencies
        if: steps.changes.outputs.code == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/go.mod', '**/go.sum', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        if: steps.changes.outputs.code == 'true'
        run: |
          task install
          task install:frontend

      - name: Generate code & build frontend
        if: steps.changes.outputs.code == 'true'
        run: |
          task build:frontend
          task generate:mocks
          task generate

      - name: Lint
        if: steps.changes.outputs.code == 'true'
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          github-token: ${{ secrets.GITHUB_TOKEN }}
          only-new-issues: ${{ github.event_name == 'pull_request' }}

      - name: Run tests
        if: steps.changes.outputs.code == 'true'
        run: task test

  # Build application (only on main branch or tags)
  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      needs.test.outputs.should-build == 'true' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    outputs:
      binary-artifact: goformx-binary
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.GO_VERSION_FILE }}
          cache: true
          cache-dependency-path: go.sum

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: ${{ env.TASK_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/go.mod', '**/go.sum', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=main-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build application
        run: |
          task install
          task install:frontend
          task build:frontend
          task generate:templ
          mkdir -p bin
          task build:backend

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: goformx-binary
          path: |
            bin/
            dist/
            migrations/
          retention-days: 7

  # Build and push Docker image
  docker:
    name: Build Docker Image
    needs: [test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      needs.test.outputs.should-build == 'true' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/production/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Create GitHub release (only for tags)
  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: goformx-binary
          path: release/

      - name: Create release archive
        run: |
          cd release
          tar -czf ../goformx-${{ needs.build.outputs.version }}.tar.gz .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: goformx-${{ needs.build.outputs.version }}.tar.gz
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          generate_release_notes: true
          make_latest: ${{ !contains(needs.build.outputs.version, '-') }}
          