---
description: 
globs: 
alwaysApply: true
---
# Security Guidelines

## Overview
Security is a critical aspect of GoFormX. This document outlines the security measures and best practices implemented throughout the application.

## Authentication

### User Authentication
- Use secure password hashing
- Implement proper session management
- Use secure cookie settings
- Implement rate limiting for login attempts
- Use HTTPS for all requests
- Implement proper logout mechanism

### Session Validation
- Validate session tokens
- Check session expiration
- Implement session renewal
- Clear session data on logout

## Authorization

### Role-Based Access Control
- User roles defined
- Role-based middleware
- Permission checking
- Access control lists
- Role hierarchy

### Resource Ownership
- Form ownership verification
- Submission access control
- User data isolation
- Resource boundaries
- Access validation

## Security Headers

### Content Security Policy
```go
const (
    CSPDirectives = "default-src 'self'; " +
        "script-src 'self' 'nonce-%s'; " +
        "style-src 'self' 'unsafe-inline'; " +
        "img-src 'self' data:; " +
        "font-src 'self'; " +
        "connect-src 'self'; " +
        "frame-ancestors 'none'; " +
        "base-uri 'self'; " +
        "form-action 'self'"
)
```

### Other Headers
- X-Frame-Options
- X-Content-Type-Options
- X-XSS-Protection
- Referrer-Policy
- Strict-Transport-Security

## CSRF Protection

### Implementation
- Use CSRF tokens in forms
- Validate CSRF tokens on POST/PUT/DELETE requests
- Use SameSite cookie attribute
- Implement proper token rotation

### Configuration
```go
const (
    // SessionDuration is the duration for which a session remains valid
    SessionDuration = 24 * time.Hour
)
```

## Rate Limiting

### Implementation
- Implement rate limiting for:
  - Login attempts
  - Form submissions
  - API requests
- Use proper rate limit windows
- Implement proper rate limit storage

### Configuration
```go
const (
    RateLimitBurst = 5
    DefaultRateLimit = 20
)
```

## Input Validation

### Form Validation
- Required fields
- Type checking
- Length limits
- Format validation
- Custom rules

### API Validation
- Request validation
- Parameter checking
- Type safety
- Schema validation
- Error handling

## Error Handling

### Security Considerations
- Don't expose internal errors to users
- Log security-related errors
- Use proper error messages
- Implement proper error recovery

### Error Responses
- Generic messages
- Proper status codes
- No stack traces
- Consistent format
- Secure headers

## File Handling

### Upload Security
- File type validation
- Size limits
- Content checking
- Secure storage
- Access control

### Static Files
- MIME type detection
- Path validation
- Access control
- Cache headers
- Security headers

## Database Security

### Query Safety
- Parameterized queries
- Input sanitization
- Type safety
- Error handling
- Access control

### Data Protection
- Encryption at rest
- Secure connections
- Access control
- Audit logging
- Backup security

## Logging and Monitoring

### Security Logging
- Authentication events
- Authorization failures
- Rate limit events
- Security violations
- Access attempts

### Monitoring
- Error rates
- Access patterns
- Resource usage
- Security metrics
- Performance data

## Best Practices

1. **Session Management**
   ```go
   // Set secure session cookie
   func setSessionCookie(c echo.Context, userID uint) {
       cookie := new(http.Cookie)
       cookie.Name = "session"
       cookie.Value = strconv.FormatUint(uint64(userID), 10)
       cookie.Expires = time.Now().Add(SessionDuration)
       cookie.HttpOnly = true
       cookie.Secure = true
       cookie.SameSite = http.SameSiteStrictMode
       c.SetCookie(cookie)
   }
   ```

2. **Logout**
   ```go
   // Clear session cookie
   func clearSessionCookie(c echo.Context) {
       cookie := new(http.Cookie)
       cookie.Name = "session"
       cookie.Value = ""
       cookie.Expires = time.Now().Add(-1 * time.Hour)
       cookie.Path = "/"
       cookie.HttpOnly = true
       cookie.Secure = true
       cookie.SameSite = http.SameSiteStrictMode
       c.SetCookie(cookie)
   }
   ```

3. **Type Assertion**
   ```go
   // Safe type assertion
   userIDRaw, ok := c.Get("user_id").(uint)
   if !ok {
       return c.Redirect(http.StatusSeeOther, "/login")
   }
   userID := userIDRaw
   ```

4. **Error Handling**
   ```go
   // Secure error handling
   if err != nil {
       logger.Error("failed to process request", 
           logging.ErrorField("error", err))
       return response.ErrorResponse(c, http.StatusInternalServerError, "Failed to process request")
   }
   ```

5. **Input Validation**
   - Validate all user input
   - Use proper type assertions
   - Implement proper error handling
   - Use domain models for validation

6. **Headers**
   - Set secure headers:
     - X-Frame-Options
     - X-Content-Type-Options
     - X-XSS-Protection
     - Content-Security-Policy
     - Strict-Transport-Security

7. **Password Security**
   - Use secure password hashing
   - Implement password complexity requirements
   - Use proper salt generation
   - Implement password reset mechanism

8. **Monitoring**
   - Log security events
   - Monitor access
   - Track violations
   - Alert on issues
   - Review logs

# Security Practices

## Authentication
- Use secure session management
- Implement proper login/logout flows
- Validate credentials securely
- Use appropriate password hashing
- Implement rate limiting for auth endpoints

## Session Management
- Use secure session cookies
- Set appropriate cookie attributes:
  - HttpOnly: true
  - Secure: true
  - SameSite: Strict
- Implement session expiration
- Clear session data on logout
- Use secure session storage

## CSRF Protection
- Include CSRF tokens in all forms
- Validate CSRF tokens on POST requests
- Use appropriate CSRF middleware
- Generate unique tokens per session

## Input Validation
- Validate all user input
- Use appropriate validation rules
- Sanitize input data
- Implement field-specific validation
- Return clear validation errors

## Cookie Security
- Use secure cookie settings
- Set appropriate expiration times
- Use HttpOnly flag
- Implement SameSite policy
- Use secure flag in production

## Password Security
- Enforce strong password requirements
- Implement password confirmation
- Use secure password hashing
- Never store plain text passwords
- Implement password reset flows

## API Security
- Use appropriate HTTP methods
- Implement rate limiting
- Validate request headers
- Use secure communication (HTTPS)
- Implement proper CORS policies

## Testing

1. **Security Testing**
   - Test session management
   - Test authentication
   - Test CSRF protection
   - Test input validation
   - Test error handling
   - Test rate limiting

2. **Test Cases**
   ```go
   func TestSecurity(t *testing.T) {
       tests := []struct {
           name     string
           setup    func()
           wantErr  bool
           wantCode int
       }{
           {
               name: "valid session",
               setup: func() {
                   // Setup valid session
               },
               wantErr:  false,
               wantCode: http.StatusOK,
           },
           {
               name: "invalid session",
               setup: func() {
                   // Setup invalid session
               },
               wantErr:  true,
               wantCode: http.StatusUnauthorized,
           },
       }
   }
   ```
