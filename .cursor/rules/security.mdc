---
description: 
globs: 
alwaysApply: true
---
# Security Guidelines

## Overview
Security is a critical aspect of GoFormX. This document outlines the security measures and best practices implemented throughout the application.

## Authentication

### Session Authentication
- Used for all authenticated access
- Secure cookie settings
- HTTP-only flag enabled
- SameSite strict mode
- CSRF protection
- Session timeout handling
- Secure session storage

## Authorization

### Role-Based Access Control
- User roles defined
- Role-based middleware
- Permission checking
- Access control lists
- Role hierarchy

### Resource Ownership
- Form ownership verification
- Submission access control
- User data isolation
- Resource boundaries
- Access validation

## Security Headers

### Content Security Policy
```go
const (
    CSPDirectives = "default-src 'self'; " +
        "script-src 'self' 'nonce-%s'; " +
        "style-src 'self' 'unsafe-inline'; " +
        "img-src 'self' data:; " +
        "font-src 'self'; " +
        "connect-src 'self'; " +
        "frame-ancestors 'none'; " +
        "base-uri 'self'; " +
        "form-action 'self'"
)
```

### Other Headers
- X-Frame-Options
- X-Content-Type-Options
- X-XSS-Protection
- Referrer-Policy
- Strict-Transport-Security

## CSRF Protection

### Implementation
- Token generation
- Token validation
- Cookie settings
- Form integration
- API protection

### Configuration
```go
const (
    DefaultTokenLength = 32
    CookieMaxAge = 86400
)
```

## Rate Limiting

### Implementation
- Request counting
- Burst handling
- IP-based limiting
- Configurable thresholds
- Proper logging

### Configuration
```go
const (
    RateLimitBurst = 5
    DefaultRateLimit = 20
)
```

## Input Validation

### Form Validation
- Required fields
- Type checking
- Length limits
- Format validation
- Custom rules

### API Validation
- Request validation
- Parameter checking
- Type safety
- Schema validation
- Error handling

## Error Handling

### Security Considerations
- Don't expose internals
- Use domain errors
- Log appropriately
- Handle all cases
- Follow guidelines

### Error Responses
- Generic messages
- Proper status codes
- No stack traces
- Consistent format
- Secure headers

## File Handling

### Upload Security
- File type validation
- Size limits
- Content checking
- Secure storage
- Access control

### Static Files
- MIME type detection
- Path validation
- Access control
- Cache headers
- Security headers

## Database Security

### Query Safety
- Parameterized queries
- Input sanitization
- Type safety
- Error handling
- Access control

### Data Protection
- Encryption at rest
- Secure connections
- Access control
- Audit logging
- Backup security

## Logging and Monitoring

### Security Logging
- Authentication events
- Authorization failures
- Rate limit events
- Security violations
- Access attempts

### Monitoring
- Error rates
- Access patterns
- Resource usage
- Security metrics
- Performance data

## Best Practices

1. Authentication
   - Use secure methods
   - Implement proper validation
   - Handle sessions securely
   - Protect credentials
   - Monitor access

2. Authorization
   - Implement RBAC
   - Check permissions
   - Validate access
   - Handle unauthorized
   - Log violations

3. Data Protection
   - Encrypt sensitive data
   - Secure storage
   - Access control
   - Data isolation
   - Backup security

4. Input Handling
   - Validate all input
   - Sanitize data
   - Use proper types
   - Handle errors
   - Log violations

5. Error Handling
   - Don't expose internals
   - Use domain errors
   - Log appropriately
   - Handle all cases
   - Follow guidelines

6. File Security
   - Validate uploads
   - Check file types
   - Limit sizes
   - Secure storage
   - Control access

7. API Security
   - Use HTTPS
   - Validate requests
   - Rate limit
   - Monitor usage
   - Handle errors

8. Monitoring
   - Log security events
   - Monitor access
   - Track violations
   - Alert on issues
   - Review logs

# Security Practices

## Authentication
- Use secure session management
- Implement proper login/logout flows
- Validate credentials securely
- Use appropriate password hashing
- Implement rate limiting for auth endpoints

## Session Management
- Use secure session cookies
- Set appropriate cookie attributes:
  - HttpOnly: true
  - Secure: true
  - SameSite: Strict
- Implement session expiration
- Clear session data on logout
- Use secure session storage

## CSRF Protection
- Include CSRF tokens in all forms
- Validate CSRF tokens on POST requests
- Use appropriate CSRF middleware
- Generate unique tokens per session

## Input Validation
- Validate all user input
- Use appropriate validation rules
- Sanitize input data
- Implement field-specific validation
- Return clear validation errors

## Cookie Security
- Use secure cookie settings
- Set appropriate expiration times
- Use HttpOnly flag
- Implement SameSite policy
- Use secure flag in production

## Password Security
- Enforce strong password requirements
- Implement password confirmation
- Use secure password hashing
- Never store plain text passwords
- Implement password reset flows

## API Security
- Use appropriate HTTP methods
- Implement rate limiting
- Validate request headers
- Use secure communication (HTTPS)
- Implement proper CORS policies
