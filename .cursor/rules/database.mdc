---
description: 
globs: internal/infrastructure/persistence/**/*.go
alwaysApply: false
---
# Database Guidelines

This project uses PostgreSQL as the primary database with GORM for database operations.

## Key Components
1. **Database Connection** [internal/infrastructure/database/database.go](mdc:goforms/internal/infrastructure/database/database.go)
   - Uses GORM for enhanced database operations
   - Implements proper connection pooling
   - Handles context propagation
   - Configures GORM logger

2. **Store Implementation** [internal/infrastructure/persistence/store/user/store.go](mdc:goforms/internal/infrastructure/persistence/store/user/store.go)
   - Implements repository pattern
   - Uses GORM's query builder
   - Handles transactions properly
   - Includes proper error handling

## Best Practices
1. **Context Usage**
   - Always use context-aware methods:
   ```go
   db.WithContext(ctx).First(&user)
   db.WithContext(ctx).Create(&user)
   db.WithContext(ctx).Updates(&user)
   ```

2. **Transaction Handling**
   ```go
   err := db.Transaction(func(tx *gorm.DB) error {
       if err := tx.Create(&user).Error; err != nil {
           return err
       }
       if err := tx.Create(&form).Error; err != nil {
           return err
       }
       return nil
   })
   ```

3. **Error Handling**
   - Use domain-specific errors
   - Wrap database errors with context
   - Handle not found case explicitly
   ```go
   if errors.Is(err, gorm.ErrRecordNotFound) {
       return nil, domain.ErrNotFound
   }
   ```

4. **Model Organization**
   - Use GORM tags for field mapping
   - Implement hooks for lifecycle events
   - Use validation tags
   ```go
   type User struct {
       gorm.Model
       Email    string `gorm:"uniqueIndex;not null" validate:"required,email"`
       Password string `gorm:"not null" validate:"required"`
   }
   ```

## Migration Management
- Use GORM's auto-migration feature
- Keep manual migrations for complex changes
- Store migrations in [migrations](mdc:goforms/migrations) directory
- Version migrations sequentially
- Include both up and down migrations
- Example migration naming:
  ```
  000001_create_users_table.up.sql
  000001_create_users_table.down.sql
  ```

## GORM Features
1. **Hooks**
   - BeforeCreate
   - AfterCreate
   - BeforeUpdate
   - AfterUpdate
   - BeforeDelete
   - AfterDelete

2. **Validation**
   - Use struct tags
   - Custom validators
   - Pre-save hooks

3. **Relationships**
   - HasOne
   - HasMany
   - BelongsTo
   - ManyToMany

4. **Query Builder**
   - Where conditions
   - Joins
   - Preloading
   - Scopes
