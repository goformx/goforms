---
description: 
globs: 
alwaysApply: true
---
# Asset Serving Guide

## Overview
GoForms implements a flexible asset serving system that supports both development (Vite dev server) and production (embedded filesystem) modes. The system uses an `AssetResolver` interface to separate resolution logic from management.

## Architecture

### AssetResolver Interface
The asset serving system is defined by the `AssetResolver` interface in [internal/infrastructure/web/types.go](mdc:internal/infrastructure/web/types.go):

```go
type AssetResolver interface {
    ResolveAssetPath(ctx context.Context, path string) (string, error)
}
```

### Implementation Types
1. **DevelopmentAssetResolver**: Resolves paths to Vite dev server (development)
2. **ProductionAssetResolver**: Resolves paths using Vite manifest (production)
3. **AssetManager**: Coordinates asset resolution and provides context support

## Dependency Injection

### Provider Configuration
Asset resolver selection is handled in [internal/infrastructure/module.go](mdc:internal/infrastructure/module.go):

```go
func ProvideAssetResolver(p AssetResolverParams) (web.AssetResolver, error) {
    if p.Config.App.IsDevelopment() {
        return web.NewDevelopmentAssetResolver(p.Config, p.Logger), nil
    }
    
    if p.Manifest == nil {
        return nil, errors.New("manifest is required for production asset resolver")
    }
    
    return web.NewProductionAssetResolver(p.Manifest, p.Logger), nil
}
```

### Asset Manager Setup
The asset manager is provided with context support:

```go
func ProvideAssetManager(resolver web.AssetResolver, logger logging.Logger) *web.AssetManager {
    return web.NewAssetManager(resolver, logger)
}
```

## Development Mode (DevelopmentAssetResolver)

### Features
- Resolves paths to Vite dev server at `localhost:3000`
- Supports hot module replacement
- Handles source maps and development assets
- Routes: `/src/*`, `/@vite/*`, `/@fs/*`, `/@id/*`

### Configuration
- **Host**: `GOFORMS_VITE_DEV_HOST` (default: localhost)
- **Port**: `GOFORMS_VITE_DEV_PORT` (default: 3000)
- **Scheme**: `GOFORMS_APP_SCHEME` (default: http)

### Example Usage
```go
// In templates
<script type="module" src={ data.AssetPath("src/js/main.ts") }></script>
<link rel="stylesheet" href={ data.AssetPath("src/css/main.css") } type="text/css" />

// Resolves to:
// http://localhost:3000/src/js/main.ts
// http://localhost:3000/src/css/main.css
```

## Production Mode (ProductionAssetResolver)

### Features
- Resolves paths using Vite manifest
- Supports asset hashing for cache busting
- Handles CSS dependencies
- Provides fallback for missing assets

### Manifest Structure
The Vite manifest (`dist/.vite/manifest.json`) contains:
```json
{
  "src/js/main.ts": {
    "file": "assets/main-abc123.js",
    "src": "src/js/main.ts",
    "isEntry": true,
    "css": ["assets/main-xyz789.css"]
  }
}
```

### Example Usage
```go
// In templates
<script type="module" src={ data.AssetPath("src/js/main.ts") }></script>
<link rel="stylesheet" href={ data.AssetPath("src/css/main.css") } type="text/css" />

// Resolves to:
// /assets/main-abc123.js
// /assets/main-xyz789.css
```

## Asset Manager

### Context Support
The asset manager provides context-aware asset resolution:

```go
type AssetManager struct {
    resolver web.AssetResolver
    logger   logging.Logger
}

func (am *AssetManager) ResolveAssetPath(ctx context.Context, path string) (string, error) {
    // Add context logging
    am.logger.Debug("resolving asset path", "path", path)
    
    resolved, err := am.resolver.ResolveAssetPath(ctx, path)
    if err != nil {
        am.logger.Error("failed to resolve asset path", "path", path, "error", err)
        return "", err
    }
    
    am.logger.Debug("asset path resolved", "original", path, "resolved", resolved)
    return resolved, nil
}
```

### Error Handling
- Graceful fallback for missing assets
- Context-aware error logging
- Development vs production error handling
- Asset path validation

## Asset Server Implementation

### Asset Server Interface
```go
type AssetServer interface {
    RegisterRoutes(e *echo.Echo) error
}
```

### Implementation Types
1. **ViteAssetServer**: Proxies requests to Vite dev server (development)
2. **EmbeddedAssetServer**: Serves files from embedded filesystem (production)

## Security Headers

### Static File Headers
All asset servers apply security headers:
- `X-Content-Type-Options: nosniff`
- `Cache-Control: public, max-age=31536000`

### Content Type Detection
The asset server automatically detects and sets proper MIME types:
- `.js` → `application/javascript`
- `.css` → `text/css`
- `.woff2` → `font/woff2`
- `.woff` → `font/woff`
- `.ico` → `image/x-icon`

## Template Integration

### Page Data Integration
Asset paths are resolved through the page data:

```go
type PageData struct {
    // ... other fields
    AssetPath func(string) string
}

func (pd *PageData) AssetPath(path string) string {
    resolved, err := pd.AssetManager.ResolveAssetPath(context.Background(), path)
    if err != nil {
        // Fallback to original path
        return path
    }
    return resolved
}
```

### Template Usage
```html
<!-- In templ templates -->
<script type="module" src={ data.AssetPath("src/js/form-builder.ts") }></script>
<link rel="stylesheet" href={ data.AssetPath("src/css/main.css") } type="text/css" />
```

## Troubleshooting

### Common Issues

#### 404 Errors for Assets
1. **Check file existence**: Verify files exist in `src/` directory
2. **Check manifest**: Verify manifest contains expected entries
3. **Check environment**: Verify `GOFORMS_APP_ENV` is set correctly

#### Wrong Content Types
1. **Check MIME type detection**: Verify file extensions are handled
2. **Check browser console**: Look for MIME type warnings
3. **Test with curl**: Check response headers

#### Asset Resolution Issues
1. **Check resolver type**: Verify correct resolver for environment
2. **Check manifest**: Ensure manifest is properly loaded
3. **Check logging**: Review asset resolution logs

### Debugging Commands

#### Test Asset Resolution
```bash
# Test JavaScript file
curl -I http://localhost:8090/assets/js/main.js

# Test CSS file
curl -I http://localhost:8090/assets/css/main.css

# Test font file
curl -I http://localhost:8090/assets/fonts/bootstrap-icons.woff2
```

#### Check Embedded Filesystem
```bash
# List embedded files
go run -c 'package main; import "embed"; //go:embed dist; var fs embed.FS; func main() { entries, _ := fs.ReadDir("dist"); for _, e := range entries { println(e.Name()) } }'
```

### Environment Testing

#### Development Mode
```bash
export GOFORMS_APP_ENV=development
./bin/goforms
# Assets resolved to Vite dev server
```

#### Production Mode
```bash
export GOFORMS_APP_ENV=production
./bin/goforms
# Assets resolved using manifest
```

## Best Practices

1. **Always rebuild after frontend changes**: Embedded assets require full rebuild
2. **Test both environments**: Verify assets work in development and production
3. **Use proper file paths**: Ensure CSS/JS references match source paths
4. **Check content types**: Verify assets are served with correct MIME types
5. **Monitor server logs**: Check for asset resolution errors and debug information
6. **Use context**: Pass context through asset resolution for better logging
7. **Handle errors gracefully**: Provide fallbacks for missing assets

## Configuration

### Environment Variables
- `GOFORMS_APP_ENV`: Controls asset resolver selection
- `GOFORMS_VITE_DEV_HOST`: Vite dev server host
- `GOFORMS_VITE_DEV_PORT`: Vite dev server port
- `GOFORMS_APP_SCHEME`: Protocol scheme (http/https)

### Build Configuration
- Frontend assets must be built to `dist/` directory
- Vite manifest should be generated for asset versioning
- Font files should be placed in `dist/fonts/` directory
