---
description: HTTP response handling and error response patterns
globs: 
alwaysApply: false
---
# Response Handling Patterns

## Overview
The application uses a simple response package (`internal/application/response`) for consistent HTTP responses. It provides standardized patterns for both API and web responses.

## Core Components

1. API Responses
   - Standardized JSON structure
   - Success/error handling
   - Example:
   ```go
   type APIResponse struct {
       Success bool   `json:"success"`
       Message string `json:"message,omitempty"`
       Data    any    `json:"data,omitempty"`
   }
   ```

2. Web Responses
   - HTML template rendering
   - Error page handling
   - Example:
   ```go
   func WebErrorResponse(c echo.Context, renderer view.Renderer, statusCode int, message string) error {
       data := shared.BuildPageData(nil, c, "Error")
       data.Message = &shared.Message{
           Type: "error",
           Text: message,
       }
       return renderer.Render(c, pages.Error(data))
   }
   ```

## Common Patterns

1. API Success Response
   ```go
   func Success(c echo.Context, data any) error {
       return c.JSON(http.StatusOK, APIResponse{
           Success: true,
           Data:    data,
       })
   }
   ```

2. API Error Response
   ```go
   func ErrorResponse(c echo.Context, statusCode int, message string) error {
       return c.JSON(statusCode, APIResponse{
           Success: false,
           Message: message,
       })
   }
   ```

3. Web Error Response
   ```go
   func Error(c echo.Context, message string) error {
       data := shared.BuildPageData(nil, c, "Error")
       data.Message = &shared.Message{
           Type: "error",
           Text: message,
       }
       return pages.Error(data).Render(c.Request().Context(), c.Response().Writer)
   }
   ```

## Best Practices

1. Error Handling
   - Use appropriate status codes
   - Provide clear error messages
   - Log errors with context
   - Example:
   ```go
   if err != nil {
       h.Logger.Error("failed to get form", "error", err)
       return response.WebErrorResponse(c, h.Renderer, http.StatusNotFound, "Form not found")
   }
   ```

2. Response Types
   - Use `Success` for API success responses
   - Use `ErrorResponse` for API error responses
   - Use `WebErrorResponse` for web error pages
   - Use `NotFound` for 404 errors
   - Use `ServerError` for 500 errors

3. Logging
   - Log errors with context
   - Include relevant fields
   - Use appropriate log levels
   - Example:
   ```go
   h.Logger.Error("failed to get form",
       "form_id", formID,
       "error", err,
   )
   ```

## Handler Examples

1. API Handler
   ```go
   func (h *Handler) GetForm(c echo.Context) error {
       form, err := h.formService.GetForm(c.Param("id"))
       if err != nil {
           return response.ErrorResponse(c, http.StatusNotFound, "Form not found")
       }
       return response.Success(c, form)
   }
   ```

2. Web Handler
   ```go
   func (h *Handler) EditForm(c echo.Context) error {
       form, err := h.formService.GetForm(c.Param("id"))
       if err != nil {
           return response.WebErrorResponse(c, h.Renderer, http.StatusNotFound, "Form not found")
       }
       return h.Renderer.Render(c, pages.EditForm(data, form))
   }
   ```
