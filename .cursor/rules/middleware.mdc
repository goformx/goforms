---
description: 
globs: internal/application/middleware/**/*.go
alwaysApply: false
---
# Middleware Guidelines

## Overview
The middleware implementation follows a clean architecture pattern with clear separation of concerns in the `internal/application/middleware` directory.

## Core Components

### Context Management (`internal/application/middleware/context`)
- Type-safe context access
- User data helpers
- Request tracking

### Access Control (`internal/application/middleware/access`)
- Public, Authenticated, Admin levels
- Route-based rules
- Role-based access

### Session Management (`internal/application/middleware/session`)
- Secure session handling
- Cookie management
- Session validation

## Constants and Configuration

### Centralized Constants
All middleware constants are centralized in `internal/application/constants/constants.go`:

```go
// Middleware Constants
const (
    NonceSize = 32
    HSTSOneYear = 31536000
    DefaultTokenLength = 32
    CookieMaxAge = 86400
    FieldPairSize = 2
    DefaultUnknown = "unknown"
)

// Path Constants
const (
    PathLogin = "/login"
    PathSignup = "/signup"
    PathResetPassword = "/reset-password"
)

// Static File Extensions
var StaticFileExtensions = []string{
    ".css", ".js", ".jpg", ".jpeg", ".png", ".gif", ".ico",
    ".svg", ".woff", ".woff2", ".ttf", ".eot",
}

// IsStaticFile checks if the given path is a static file
func IsStaticFile(path string) bool
```

### Path Management
Use the centralized `PathManager` for path-related logic:

```go
// Get path manager from DI
pathManager := constants.NewPathManager()

// Check path types
if pathManager.IsPublicPath(path) { ... }
if pathManager.IsStaticPath(path) { ... }
if pathManager.IsAdminPath(path) { ... }
```

## Setup Order

1. Basic Middleware
   ```go
   e.Use(middleware.Recover())
   e.Use(middleware.RequestID())
   e.Use(context.Middleware())
   e.Use(middleware.Secure())
   ```

2. Security Middleware
   ```go
   e.Use(csrf.Middleware())
   e.Use(ratelimit.Middleware())
   e.Use(cors.Middleware())
   ```

3. Auth Middleware
   ```go
   e.Use(session.Middleware())
   e.Use(access.Middleware())
   ```

## Common Patterns

### Context Usage
```go
// Get user data
userID, ok := context.GetUserID(c)
if !ok {
    return c.Redirect(http.StatusSeeOther, constants.PathLogin)
}
```

### Session Management
```go
// Create session
session, err := sessionManager.CreateSession(userID, email, role)
if err != nil {
    return err
}
sessionManager.SetSessionCookie(c, session.ID)
```

### Static File Detection
```go
// Use centralized static file detection
if constants.IsStaticFile(path) {
    return true
}
```

### Path Checking
```go
// Use constants for path comparisons
if path == constants.PathLogin || path == constants.PathSignup {
    // Handle auth paths
}
```

## Best Practices

1. **Constants Usage**
   - Always use `constants.*` for fixed values
   - Use `constants.IsStaticFile()` for static file detection
   - Use `constants.Path*` for path comparisons
   - Use `constants.DefaultUnknown` for unknown identifiers

2. **Configuration**
   - Use infrastructure config only for environment-configurable values
   - Keep constants in the constants package
   - Use PathManager for complex path logic

3. **Security**
   - Enable CSRF protection
   - Use secure cookies
   - Set security headers
   - Implement rate limiting

4. **Performance**
   - Skip middleware for static files using `constants.IsStaticFile()`
   - Cache session data
   - Use efficient route matching

5. **Error Handling**
   - Log errors with context
   - Return user-friendly messages
