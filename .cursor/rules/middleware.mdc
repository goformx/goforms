---
description: Editing middleware, http, echo, gin, api
globs: 
alwaysApply: false
---
# Middleware Architecture

## Overview
The middleware implementation follows a clean architecture pattern with clear separation of concerns. The main middleware components are located in [internal/application/middleware/middleware.go](mdc:goforms/internal/application/middleware/middleware.go).

## Core Components

### Manager
The `Manager` struct in [internal/application/middleware/middleware.go](mdc:goforms/internal/application/middleware/middleware.go) handles middleware configuration and setup. It uses dependency injection for logging and configuration.

### CSRF Protection
CSRF middleware is implemented in [internal/application/middleware/csrf.go](mdc:goforms/internal/application/middleware/csrf.go) with the following features:
- Configurable cookie settings
- Secure token generation
- Template integration
- SameSite strict mode
- HTTP-only cookies

### Configuration
Middleware configuration is managed through [internal/application/middleware/config.go](mdc:goforms/internal/application/middleware/config.go) which provides:
- Centralized configuration
- Feature toggles (e.g., CSRF, JWT)
- Logging integration
- Service dependencies

## Best Practices
1. Use the `Manager` for middleware setup
2. Configure security headers appropriately
3. Enable CSRF protection for forms
4. Use proper error handling for type assertions
5. Follow the constant naming conventions
6. Use structured logging with proper context
7. Implement rate limiting where appropriate

## Security Guidelines
1. Always enable CSRF protection for forms
2. Use secure cookie settings
3. Implement proper Content Security Policy
4. Set appropriate security headers
5. Use SameSite strict mode for cookies
6. Enable HTTP-only flag for sensitive cookies
7. Implement proper token validation

# Middleware Patterns

## Authentication Middleware
The application uses two types of authentication middleware:

### Cookie Authentication
Implemented in [cookie_auth.go](mdc:goforms/goforms/internal/application/middleware/cookie_auth.go):
- Centralized token validation
- Secure cookie attributes (HttpOnly, Secure, SameSite)
- Optimized route matching
- Granular error logging
- Token blacklist checking

### JWT Authentication
Implemented in [auth.go](mdc:goforms/goforms/internal/application/middleware/auth.go):
- HMAC token validation
- Secure header extraction
- Proper status codes (401/403)
- Exempt route handling
- Static file protection

## Common Patterns
1. **Route Protection**
   - Public route maps for exact matches
   - Prefix lists for common patterns
   - O(1) lookup optimization
   - Static file handling

2. **Error Handling**
   - Structured logging with context
   - Proper HTTP status codes
   - Clear error messages
   - Different log levels

3. **Security**
   - Secure cookie settings
   - Token validation
   - CSRF protection
   - Rate limiting

4. **Performance**
   - Optimized route matching
   - Efficient token validation
   - Context-aware operations
   - Proper error handling

## Best Practices
1. Always use request context
2. Implement proper security attributes
3. Use structured logging
4. Optimize route matching
5. Handle errors appropriately
6. Protect sensitive routes
7. Implement rate limiting
8. Use secure defaults
