---
description: 
globs: internal/application/middleware/**/*.go
alwaysApply: false
---
# Middleware Guidelines

## Core Components

1. **Context Management** (`internal/application/middleware/context`)
   - Type-safe context access
   - User data helpers
   - Request tracking

2. **Access Control** (`internal/application/middleware/access`)
   - Public, Authenticated, Admin levels
   - Route-based rules
   - Role-based access

3. **Session Management** (`internal/application/middleware/session`)
   - Secure session handling
   - Cookie management
   - Session validation

## Setup Order

1. Basic Middleware
   ```go
   e.Use(middleware.Recover())
   e.Use(middleware.RequestID())
   e.Use(context.Middleware())
   e.Use(middleware.Secure())
   ```

2. Security Middleware
   ```go
   e.Use(csrf.Middleware())
   e.Use(ratelimit.Middleware())
   e.Use(cors.Middleware())
   ```

3. Auth Middleware
   ```go
   e.Use(session.Middleware())
   e.Use(access.Middleware())
   ```

## Common Patterns

1. **Context Usage**
   ```go
   // Get user data
   userID, ok := context.GetUserID(c)
   if !ok {
       return c.Redirect(http.StatusSeeOther, "/login")
   }
   ```

2. **Session Management**
   ```go
   // Create session
   session, err := sessionManager.CreateSession(userID, email, role)
   if err != nil {
       return err
   }
   sessionManager.SetSessionCookie(c, session.ID)
   ```

## Best Practices

1. Security
   - Enable CSRF protection
   - Use secure cookies
   - Set security headers
   - Implement rate limiting

2. Performance
   - Skip middleware for static files
   - Cache session data
   - Use efficient route matching

3. Error Handling
   - Log errors with context
   - Return user-friendly messages
# Middleware Architecture

## Overview
The middleware implementation follows a clean architecture pattern with clear separation of concerns. The main middleware components are located in the `internal/application/middleware` directory.

## Core Components

### Context Management
The context package (`internal/application/middleware/context`) provides:
- Type-safe access to context values
- Centralized context handling
- Consistent error handling
- User data access helpers
- Request context management

### Access Control
The access package (`internal/application/middleware/access`) provides:
- Granular access control levels (Public, Authenticated, Admin)
- Centralized access rule configuration
- Consistent access checking
- Role-based access control
- Access denial logging

### Session Management
The session package (`internal/application/middleware/session`) provides:
- Secure session handling
- Session validation
- Session state management
- Context integration
- Cookie management

### Error Logger
The error logger middleware provides:
- Domain error mapping to HTTP status codes
- Structured error logging
- Consistent error responses
- Error context preservation

### Request Logger
The request logger middleware provides:
- Request/response logging
- Performance metrics
- Static file request filtering
- Structured logging with context

### Security Middleware
Security middleware components include:
- CSRF protection with secure defaults
- Rate limiting with configurable thresholds
- Security headers with proper CSP
- CORS configuration with proper origins
- Static file handling with proper MIME types

## Constants and Configuration

```go
const (
    NonceSize = 32
    HSTSOneYear = 31536000
    DefaultTokenLength = 32
    RateLimitBurst = 5
    DefaultRateLimit = 20
    CookieMaxAge = 86400
)
```

## Best Practices
1. Use the `Manager` for middleware setup
2. Configure security headers appropriately
3. Enable CSRF protection for forms
4. Use context helpers for type-safe access
5. Follow the constant naming conventions
6. Use structured logging with proper context
7. Implement rate limiting where appropriate
8. Handle static files efficiently
9. Use proper MIME type detection
10. Implement proper error mapping

## Security Guidelines
1. Always enable CSRF protection for forms
2. Use secure cookie settings
3. Implement proper Content Security Policy
4. Set appropriate security headers
5. Use SameSite strict mode for cookies
6. Enable HTTP-only flag for sensitive cookies
7. Implement proper token validation
8. Use rate limiting for sensitive endpoints
9. Configure CORS properly
10. Handle static files securely

## Middleware Setup

The middleware setup follows a specific order:

1. Basic Middleware
   - Recovery
   - Request ID
   - Context middleware
   - Secure headers
   - Body limit
   - MIME type
   - Static file handling

2. Security Middleware
   - Security headers
   - CORS
   - CSRF
   - Rate limiting

3. Authentication Middleware
   - Session validation
   - Access control
   - Role-based access

## Context Management

The context package provides consistent context handling:

1. User Context
   - Type-safe user ID access
   - Email and role management
   - Authentication state
   - Session integration

2. Request Context
   - Request ID tracking
   - Correlation ID management
   - Logger context
   - Performance tracking

3. Error Context
   - Error state preservation
   - Stack trace management
   - Error categorization
   - Context propagation

## Access Control

The access package provides:

1. Access Levels
   - Public access
   - Authenticated access
   - Admin access
   - Custom access levels

2. Access Rules
   - Route-based rules
   - Role-based rules
   - Pattern matching
   - Rule inheritance

3. Access Checking
   - Consistent validation
   - Error handling
   - Logging
   - Response generation

## Performance Considerations

1. Route Matching
   - Optimize route matching
   - Use efficient data structures
   - Cache static file checks
   - Minimize middleware overhead

2. Static File Handling
   - Skip unnecessary middleware
   - Use proper MIME types
   - Cache static file checks
   - Optimize file serving

3. Rate Limiting
   - Use efficient storage
   - Configure appropriate limits
   - Handle bursts properly
   - Log rate limit events

## Common Patterns

1. **Context Usage**
   ```go
   // Get user data
   userID, ok := context.GetUserID(c)
   if !ok {
       return c.Redirect(http.StatusSeeOther, "/login")
   }

   // Check authentication
   if !context.IsAuthenticated(c) {
       return c.Redirect(http.StatusSeeOther, "/login")
   }

   // Get role
   role, ok := context.GetRole(c)
   if !ok {
       return c.Redirect(http.StatusSeeOther, "/login")
   }
   ```

2. **Access Control**
   ```go
   // Define access rules
   rules := map[string]access.AccessLevel{
       "/api/v1/admin/*": access.Admin,
       "/api/v1/*":       access.Authenticated,
       "/public/*":       access.Public,
   }

   // Apply access control
   e.Use(access.Middleware(accessManager, logger))
   ```

3. **Session Management**
   ```go
   // Create session
   session, err := sessionManager.CreateSession(userID, email, userAgent)
   if err != nil {
       return err
   }

   // Set session cookie
   sessionManager.SetSessionCookie(c, session.ID)
   ```

## Best Practices
1. Always use context helpers for user data
2. Implement proper security attributes
3. Use structured logging
4. Optimize route matching
5. Handle errors appropriately
6. Protect sensitive routes
7. Implement rate limiting
8. Use secure defaults
