---
description: 
globs: 
alwaysApply: false
---
# Domain Events Guidelines

This project uses a robust domain events system for handling cross-cutting concerns and maintaining loose coupling.

## Core Event System
The base event system is defined in [internal/domain/common/events/events.go](mdc:internal/domain/common/events/events.go):

### Key Components
1. **Event Interface**
   - EventID() string
   - EventType() string
   - Timestamp() time.Time
   - Data() any

2. **EventHandler Interface**
   - Handle(ctx context.Context, event Event) error

3. **EventDispatcher**
   - Thread-safe event dispatching
   - Multiple handlers per event
   - Error aggregation

## Form Events
Form-specific events are defined in [internal/domain/form/events/form_events.go](mdc:internal/domain/form/events/form_events.go):

### Event Types
1. **FormSubmittedEvent**
   - Emitted when form is submitted
   - Contains form data and metadata

2. **FormValidatedEvent**
   - Emitted after validation
   - Contains validation results

3. **FormProcessedEvent**
   - Emitted after processing
   - Contains processing results

4. **FormErrorEvent**
   - Emitted on errors
   - Contains error details

## Event Handling Best Practices

1. **Event Creation**
   - Use proper event types
   - Include relevant data
   - Set correct timestamps

2. **Event Handling**
   - Handle events asynchronously
   - Use proper error handling
   - Maintain idempotency

3. **Event Storage**
   - Store events for audit
   - Enable event replay
   - Maintain event order

4. **Event Dispatch**
   - Use proper context
   - Handle errors appropriately
   - Maintain transaction boundaries

## Example Usage

### Dispatching Events
```go
event := NewFormSubmittedEvent(formID, submission)
err := dispatcher.Dispatch(ctx, event)
```

### Handling Events
```go
type FormEventHandler struct {
    // dependencies
}

func (h *FormEventHandler) Handle(ctx context.Context, event Event) error {
    // handle event
    return nil
}
```
