---
description: Guidelines for implementing domain events and event handling patterns
globs: 
alwaysApply: false
---
# Domain Events Guidelines

This project uses a robust domain events system for handling cross-cutting concerns and maintaining loose coupling.

## Core Event System
The base event system is defined in [internal/domain/common/events/events.go](mdc:goforms/internal/domain/common/events/events.go):

### Key Components
1. **Event Interface**
   - EventID() string
   - EventType() string
   - Timestamp() time.Time
   - Data() any

2. **EventHandler Interface**
   - Handle(ctx context.Context, event Event) error

3. **EventDispatcher**
   - Thread-safe event dispatching
   - Multiple handlers per event
   - Error aggregation

4. **EventStore**
   - Save(ctx context.Context, event Event) error
   - Load(ctx context.Context, aggregateID string) ([]Event, error)

## Form Events
Form-specific events are defined in [internal/domain/form/events/form_events.go](mdc:goforms/internal/domain/form/events/form_events.go):

### Event Types
1. **FormSubmittedEvent**
   - Emitted when form is submitted
   - Contains form data and metadata
   - EventType: "form.submitted"

2. **FormValidatedEvent**
   - Emitted after validation
   - Contains validation results
   - EventType: "form.validated"

3. **FormProcessedEvent**
   - Emitted after processing
   - Contains processing results
   - EventType: "form.processed"

4. **FormErrorEvent**
   - Emitted on errors
   - Contains error details
   - EventType: "form.error"

## Event Handling Best Practices

1. **Event Creation**
   - Use proper event types
   - Include relevant data
   - Set correct timestamps
   - Generate unique event IDs
   - Include context information

2. **Event Handling**
   - Handle events asynchronously
   - Use proper error handling
   - Maintain idempotency
   - Handle context cancellation
   - Log event processing

3. **Event Storage**
   - Store events for audit
   - Enable event replay
   - Maintain event order
   - Use proper indexing
   - Handle storage errors

4. **Event Dispatch**
   - Use proper context
   - Handle errors appropriately
   - Maintain transaction boundaries
   - Aggregate handler errors
   - Log dispatch results

## Example Usage

### Dispatching Events
```go
event := NewFormSubmittedEvent(formID, submission)
err := dispatcher.Dispatch(ctx, event)
if err != nil {
    // Handle dispatch error
}
```

### Handling Events
```go
type FormEventHandler struct {
    logger logging.Logger
    store  Repository
}

func (h *FormEventHandler) Handle(ctx context.Context, event Event) error {
    h.logger.Debug("handling form event",
        logging.StringField("event_type", event.EventType()),
        logging.StringField("event_id", event.EventID()),
    )
    
    // Handle event
    return nil
}
```

### Event Storage
```go
type EventStore struct {
    db *sql.DB
}

func (s *EventStore) Save(ctx context.Context, event Event) error {
    // Store event in database
    return nil
}

func (s *EventStore) Load(ctx context.Context, aggregateID string) ([]Event, error) {
    // Load events from database
    return nil, nil
}
```
