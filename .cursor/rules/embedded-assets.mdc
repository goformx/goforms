---
description: 
globs: 
alwaysApply: false
---
# Embedded Assets Guide

## Overview
GoForms uses Go's `embed` feature to embed the `dist/` directory containing built frontend assets directly into the binary. This allows the application to serve static assets without requiring external files in production.

## Key Files

### Main Entry Point
- [main.go](mdc:main.go): Contains the embed directive and provides the embedded filesystem to dependency injection

### Asset Server Implementation
- [internal/infrastructure/web/assets.go](mdc:internal/infrastructure/web/assets.go): Contains the `EmbeddedAssetServer` that serves files from the embedded filesystem

## Embed Directive

The embed directive is defined in [main.go](mdc:main.go):
```go
//go:embed dist
var distFS embed.FS
```

This embeds the entire `dist/` directory into the binary.

## Asset Server Architecture

### Development vs Production
- **Development**: Uses `ViteAssetServer` to proxy requests to Vite dev server
- **Production**: Uses `EmbeddedAssetServer` to serve files from embedded filesystem

### EmbeddedAssetServer Features
- Serves JavaScript files from `dist/assets/js/`
- Serves CSS files from `dist/assets/css/`
- Serves font files from `dist/fonts/`
- Serves individual files like `robots.txt` and `favicon.ico`
- Uses proper MIME types for all file types
- Implements security headers for static files

## File Structure

The embedded filesystem mirrors the `dist/` directory structure:
```
dist/
├── assets/
│   ├── js/          # JavaScript files
│   └── css/         # CSS files
├── fonts/           # Font files
├── robots.txt       # Robots file
└── favicon.ico      # Favicon
```

## URL Mapping

- `/assets/js/*` → `dist/assets/js/*`
- `/assets/css/*` → `dist/assets/css/*`
- `/assets/fonts/*` → `dist/fonts/*`
- `/robots.txt` → `dist/robots.txt`
- `/favicon.ico` → `dist/favicon.ico`

## Dependency Injection

The embedded filesystem is provided to the DI container in [main.go](mdc:main.go):
```go
fx.Provide(func() embed.FS {
    return distFS
}),
```

And consumed by the asset server in [internal/infrastructure/module.go](mdc:internal/infrastructure/module.go).

## Best Practices

1. **Always rebuild after frontend changes**: The embedded assets are compiled into the binary
2. **Use proper content types**: The asset server automatically sets correct MIME types
3. **Test both environments**: Verify assets work in both development and production modes
4. **Check file paths**: Ensure the embedded filesystem structure matches the expected URLs

## Troubleshooting

### Common Issues
- **404 errors**: Check if files exist in the `dist/` directory
- **Wrong content types**: Verify the `getContentType` function handles your file type
- **Missing fonts**: Ensure font files are in `dist/fonts/` directory

### Debugging
- Check server logs for asset serving information
- Use `curl` to test individual asset endpoints
- Verify the embedded filesystem contains expected files

## Environment Configuration

To test embedded assets:
```bash
# Set environment to production
export GOFORMS_APP_ENV=production

# Run the application
./bin/goforms
```

The application will automatically use embedded assets when `GOFORMS_APP_ENV=production`.
