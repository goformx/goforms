---
description: 
globs: internal/**/handlers/**/*.go
alwaysApply: false
---
# Handler Patterns

## Structure
- Handlers should be organized in the `internal/application/handlers/web` package
- Each handler should be a struct that embeds or uses `BaseHandler`
- Handlers should receive dependencies through constructor injection
- Dependencies should include:
  - BaseHandler
  - Domain services (UserService, FormService)
  - Session management
  - View renderer
  - Config
  - Middleware manager
  - Logger

## Handler Types

### 1. Base Handler
```go
type BaseHandler struct {
    formService form.Service
    logger      logging.Logger
}
```

### 2. Feature Handlers
```go
type WebHandler struct {
    baseHandler       *BaseHandler
    userService       domain.UserService
    sessionManager    *middleware.SessionManager
    renderer          *view.Renderer
    middlewareManager *middleware.Manager
    config            *config.Config
    logger            logging.Logger
}
```

## Registration
- Handlers should implement a `Register` method that takes an `*echo.Echo` parameter
- Routes should be registered in the `Register` method
- Group related routes together (e.g., auth routes, validation routes)
- Use consistent route patterns:
  - GET for viewing pages
  - POST for form submissions
  - PUT for updates
  - DELETE for deletions

## Response Patterns
- Use appropriate HTTP status codes:
  - 200 OK for successful operations
  - 400 Bad Request for validation errors
  - 401 Unauthorized for authentication failures
  - 500 Internal Server Error for unexpected errors
- For HTML responses, use the renderer with appropriate templates
- For API responses, use JSON with consistent structure
- Include CSRF tokens in forms and validate them

## Error Handling
- Handle domain-specific errors using type assertions
- Log unexpected errors using the handler's logger
- Return user-friendly error messages
- Maintain consistent error response structure
- Use proper error wrapping and context

## Session Management
- Use the SessionManager for session operations
- Set secure cookie attributes:
  - HttpOnly: true
  - Secure: true
  - SameSite: Strict
- Set appropriate cookie expiration times
- Clear session data on logout
- Use constants for session configuration

## Validation
- Implement separate validation endpoints for forms
- Return validation schemas as JSON
- Include field-specific validation rules
- Provide clear error messages for each validation rule
- Use domain models for request validation

## Security Considerations
- Always validate user input
- Use CSRF protection
- Implement proper session management
- Follow secure cookie practices
- Use appropriate HTTP methods for operations
- Implement rate limiting
- Use secure headers

## Best Practices

1. **Dependency Management**
   ```go
   func NewHandler(
       baseHandler *BaseHandler,
       userService domain.UserService,
       sessionManager *middleware.SessionManager,
       renderer *view.Renderer,
       middlewareManager *middleware.Manager,
       cfg *config.Config,
       logger logging.Logger,
   ) *Handler {
       return &Handler{
           baseHandler:       baseHandler,
           userService:       userService,
           sessionManager:    sessionManager,
           renderer:          renderer,
           middlewareManager: middlewareManager,
           config:            cfg,
           logger:            logger,
       }
   }
   ```

2. **Route Registration**
   ```go
   func (h *Handler) Register(e *echo.Echo) {
       e.GET("/path", h.handleGet)
       e.POST("/path", h.handlePost)
   }
   ```

3. **Request Handling**
   ```go
   func (h *Handler) handleRequest(c echo.Context) error {
       // Get authenticated user
       userIDRaw, ok := c.Get("user_id").(uint)
       if !ok {
           return c.Redirect(http.StatusSeeOther, "/login")
       }
       userID := userIDRaw

       // Process request
       result, err := h.service.Process(userID)
       if err != nil {
           h.logger.Error("failed to process request", 
               logging.ErrorField("error", err))
           return c.JSON(http.StatusInternalServerError, map[string]string{
               "error": "Failed to process request",
           })
       }

       // Return response
       return c.JSON(http.StatusOK, result)
   }
   ```

4. **Page Data Construction**
   ```go
   func (h *Handler) buildPageData(title string) shared.PageData {
       return shared.PageData{
           Title:         title,
           IsDevelopment: true, // TODO: Get from config
           AssetPath:     func(path string) string { return path },
       }
   }
   ```

## Testing Guidelines

1. **Unit Testing**
   - Test handlers in isolation
   - Mock dependencies
   - Test error cases
   - Test edge cases

2. **Integration Testing**
   - Test handler integration with services
   - Test middleware behavior
   - Test route registration
   - Test error handling

3. **Test Structure**
   ```go
   func TestHandler_HandleRequest(t *testing.T) {
       // Setup
       handler := NewHandler(mockDeps)

       // Test cases
       tests := []struct {
           name    string
           setup   func()
           wantErr bool
       }{
           // Test cases
       }

       // Run tests
       for _, tt := range tests {
           t.Run(tt.name, func(t *testing.T) {
               // Run test
           })
       }
   }
   ```
