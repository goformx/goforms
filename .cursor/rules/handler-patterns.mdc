---
description: 
globs: internal/**/handlers/**/*.go
alwaysApply: false
---
# Handler Patterns

## Overview
Handlers in GoFormX follow a consistent pattern using the `Handler` interface and `HandlerDeps` struct for dependency management. Each handler is responsible for a specific domain area and follows standardized patterns for route registration and request handling.

## Core Components

1. Handler Interface
   ```go
   type Handler interface {
       Register(e *echo.Echo)
       Start(ctx context.Context) error
       Stop(ctx context.Context) error
   }
   ```

2. Handler Dependencies
   ```go
   type HandlerDeps struct {
       Logger            logging.Logger
       Config            *config.Config
       SessionManager    *session.Manager
       MiddlewareManager *middleware.Manager
       Renderer          view.Renderer
       UserService       user.Service
       FormService       form.Service
   }
   ```

## Implementation Patterns

1. Handler Structure
   ```go
   type WebHandler struct {
       HandlerDeps
   }

   func NewWebHandler(deps HandlerDeps) (*WebHandler, error) {
       if err := deps.Validate(); err != nil {
           return nil, err
       }
       return &WebHandler{HandlerDeps: deps}, nil
   }
   ```

2. Route Registration
   ```go
   func (h *WebHandler) Register(e *echo.Echo) {
       e.GET("/", h.handleHome)
       e.GET("/demo", h.handleDemo)
   }
   ```

3. Request Handling
   ```go
   func (h *WebHandler) handleHome(c echo.Context) error {
       data := shared.BuildPageData(h.Config, c, "Home")
       if h.isAuthenticated(c) {
           return c.Redirect(StatusFound, "/dashboard")
       }
       return h.Renderer.Render(c, pages.Home(data))
   }
   ```

## Best Practices

1. Dependency Management
   - Use `HandlerDeps` for common dependencies
   - Validate dependencies in constructor
   - Use dependency injection
   - Example:
   ```go
   func NewHandler(deps HandlerDeps) (*Handler, error) {
       if err := deps.Validate(); err != nil {
           return nil, err
       }
       return &Handler{HandlerDeps: deps}, nil
   }
   ```

2. Error Handling
   - Use domain errors
   - Log errors with context
   - Return appropriate responses
   - Example:
   ```go
   if err != nil {
       h.Logger.Error("failed to get form", "error", err)
       return response.WebErrorResponse(c, h.Renderer, http.StatusNotFound, "Form not found")
   }
   ```

3. Authentication
   - Check authentication status
   - Redirect to login when needed
   - Use session management
   - Example:
   ```go
   if !h.isAuthenticated(c) {
       return c.Redirect(StatusFound, "/login")
   }
   ```

4. Response Handling
   - Use appropriate status codes
   - Return consistent responses
   - Handle errors properly
   - Example:
   ```go
   return h.Renderer.Render(c, pages.Home(data))
   ```

## Common Patterns

1. Page Data Construction
   ```go
   data := shared.BuildPageData(h.Config, c, "Page Title")
   ```

2. Authentication Check
   ```go
   func (h *Handler) isAuthenticated(c echo.Context) bool {
       return mwcontext.IsAuthenticated(c)
   }
   ```

3. User Context
   ```go
   userID, ok := mwcontext.GetUserID(c)
   if !ok {
       return c.Redirect(StatusFound, "/login")
   }
   ```

## Testing Guidelines

1. Unit Tests
   - Mock dependencies
   - Test error cases
   - Verify behavior
   - Example:
   ```go
   func TestHandler_HandleHome(t *testing.T) {
       mockDeps := &MockHandlerDeps{}
       handler := NewHandler(mockDeps)
       // Test implementation
   }
   ```

2. Integration Tests
   - Test full flow
   - Use test database
   - Clean up resources
   - Example:
   ```go
   func TestHandler_Integration(t *testing.T) {
       deps := setupTestDeps(t)
       handler := NewHandler(deps)
       // Test implementation
   }
   ```
