---
description: 
globs: *.ts
alwaysApply: false
---
# Import Standards

## Overview

This project uses path mapping for all imports to ensure consistency, maintainability, and developer experience. All imports should use the `@/` prefix with appropriate path mapping.

## Path Mapping Configuration

### TypeScript Configuration (`tsconfig.json`)
```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/js/*"],
      "@/core/*": ["src/js/core/*"],
      "@/features/*": ["src/js/features/*"],
      "@/shared/*": ["src/js/shared/*"],
      "@/pages/*": ["src/js/pages/*"]
    }
  }
}
```

### Vite Configuration (`vite.config.ts`)
```typescript
resolve: {
  alias: {
    "@": resolve(__dirname, "src/js"),
    "@/core": resolve(__dirname, "src/js/core"),
    "@/features": resolve(__dirname, "src/js/features"),
    "@/shared": resolve(__dirname, "src/js/shared"),
    "@/pages": resolve(__dirname, "src/js/pages"),
  },
}
```

## Import Patterns

### ✅ Correct Import Patterns

```typescript
// Core functionality
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { HttpClient } from "@/core/http-client";
import { Logger } from "@/core/logger";
import { builderOptions } from "@/core/config/builder-config";

// Feature-specific imports
import { FormService } from "@/features/forms/services/form-service";
import { FormApiService } from "@/features/forms/services/form-api-service";
import { FormUIService } from "@/features/forms/services/form-ui-service";
import { setupBuilderEvents } from "@/features/forms/handlers/builder-events";
import { validation } from "@/features/forms/validation/validation";

// Shared utilities and types
import { dom } from "@/shared/utils/dom-utils";
import { debounce } from "@/shared/utils/debounce";
import { isAuthenticationEndpoint } from "@/shared/utils/endpoint-utils";
import type { FormConfig } from "@/shared/types/form-types";
import type { ServerResponse } from "@/shared/types/form-types";

// Page-level imports
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { dom } from "@/shared/utils/dom-utils";
```

### ❌ Avoid These Patterns

```typescript
// Relative imports (hard to maintain)
import { FormBuilderError } from "../../../core/errors/form-builder-error";
import { FormService } from "../services/form-service";
import { dom } from "../../../../shared/utils/dom-utils";

// Inconsistent path mapping
import { FormService } from "@/forms/services/form-service"; // Missing features/
import { dom } from "@/utils/dom-utils"; // Missing shared/
```

## Directory Structure and Imports

### Core (`@/core/*`)
```typescript
// Configuration
import { builderOptions } from "@/core/config/builder-config";

// Error handling
import { FormBuilderError } from "@/core/errors/form-builder-error";

// HTTP client
import { HttpClient } from "@/core/http-client";

// Logging
import { Logger } from "@/core/logger";
```

### Features (`@/features/*`)
```typescript
// Forms feature
import { FormService } from "@/features/forms/services/form-service";
import { FormApiService } from "@/features/forms/services/form-api-service";
import { FormUIService } from "@/features/forms/services/form-ui-service";
import { setupBuilderEvents } from "@/features/forms/handlers/builder-events";
import { validation } from "@/features/forms/validation/validation";
import { formState } from "@/features/forms/state/form-state";

// Auth feature
import { EnhancedFormHandler } from "@/features/forms/handlers/enhanced-form-handler";
```

### Shared (`@/shared/*`)
```typescript
// Utilities
import { dom } from "@/shared/utils/dom-utils";
import { debounce } from "@/shared/utils/debounce";
import { isAuthenticationEndpoint } from "@/shared/utils/endpoint-utils";

// Types
import type { FormConfig } from "@/shared/types/form-types";
import type { ServerResponse } from "@/shared/types/form-types";
import type { RequestOptions } from "@/shared/types/form-types";
```

### Pages (`@/pages/*`)
```typescript
// Page-level components
import { FormService } from "@/features/forms/services/form-service";
import { setupBuilderEvents } from "@/features/forms/handlers/builder-events";
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { dom } from "@/shared/utils/dom-utils";
```

## Import Organization

### Import Order
Organize imports in the following order:

1. **External libraries** (React, lodash, etc.)
2. **Core imports** (`@/core/*`)
3. **Feature imports** (`@/features/*`)
4. **Shared imports** (`@/shared/*`)
5. **Page imports** (`@/pages/*`)

```typescript
// External libraries
import { Formio } from "@formio/js";
import DOMPurify from "dompurify";

// Core imports
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { HttpClient } from "@/core/http-client";

// Feature imports
import { FormService } from "@/features/forms/services/form-service";
import { setupBuilderEvents } from "@/features/forms/handlers/builder-events";

// Shared imports
import { dom } from "@/shared/utils/dom-utils";
import type { FormConfig } from "@/shared/types/form-types";
```

### Type Imports
Use `import type` for type-only imports:

```typescript
// ✅ Correct - Type imports
import type { FormConfig } from "@/shared/types/form-types";
import type { FormSchema } from "@/features/forms/services/form-service";

// ❌ Avoid - Regular imports for types
import { FormConfig } from "@/shared/types/form-types";
```

## Best Practices

### 1. Use Path Mapping Consistently
- Always use `@/` prefix for internal imports
- Never use relative imports (`../` or `./`) except for same-directory files
- Use the full path mapping (e.g., `@/features/forms/services/form-service`)

### 2. Import Only What You Need
```typescript
// ✅ Correct - Specific imports
import { FormService } from "@/features/forms/services/form-service";
import { dom } from "@/shared/utils/dom-utils";

// ❌ Avoid - Wildcard imports (unless necessary)
import * as Forms from "@/features/forms";
```

### 3. Use Index Files for Clean Imports
Create index files to export commonly used items:

```typescript
// src/js/core/index.ts
export { HttpClient } from "./http-client";
export { Logger } from "./logger";
export { FormBuilderError } from "./errors/form-builder-error";
export { builderOptions } from "./config/builder-config";

// Usage
import { HttpClient, Logger } from "@/core";
```

### 4. Avoid Circular Dependencies
- Be mindful of import cycles
- Use dependency injection where appropriate
- Consider extracting shared interfaces to avoid cycles

### 5. Keep Imports Clean
- Remove unused imports
- Use consistent import formatting
- Group related imports together

## Migration Guide

### From Relative Imports
When migrating from relative imports to path mapping:

```typescript
// Before (relative imports)
import { FormBuilderError } from "../../../core/errors/form-builder-error";
import { FormService } from "../services/form-service";
import { dom } from "../../../../shared/utils/dom-utils";

// After (path mapping)
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { FormService } from "@/features/forms/services/form-service";
import { dom } from "@/shared/utils/dom-utils";
```

### Validation
After updating imports:
1. Run `npm run build` to check for import errors
2. Test the application to ensure functionality works
3. Check that VS Code auto-imports use the new paths

## Troubleshooting

### Common Issues

1. **Import not found**
   - Check that the path mapping is configured correctly
   - Verify the file exists at the expected location
   - Ensure both `tsconfig.json` and `vite.config.ts` have the same aliases

2. **Build errors**
   - Run `npm run build` to see specific error messages
   - Check that all imports use the correct path mapping
   - Verify that exported items exist in the source files

3. **VS Code not recognizing imports**
   - Restart the TypeScript language server
   - Check that the workspace is using the correct TypeScript version
   - Verify that `tsconfig.json` is properly configured

### Tools for Import Management

1. **ESLint**: Use rules to enforce import standards
2. **Prettier**: Configure import sorting
3. **VS Code**: Use auto-import features with path mapping
4. **TypeScript**: Use strict mode to catch import errors early
