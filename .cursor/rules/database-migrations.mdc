---
description:
globs:
alwaysApply: false
---
# Database Migration Patterns

## Overview
GoFormX uses database migrations to manage schema changes across different database types (PostgreSQL and MariaDB). Migrations follow a specific naming convention and structure.

## Migration Structure

### File Naming Convention
```
YYYYMMDDHHMMSS_description.up.sql   # Migration up
YYYYMMDDHHMMSS_description.down.sql # Migration down
```

### Directory Organization
```
migrations/
├── postgresql/          # PostgreSQL-specific migrations
│   ├── 1970010101_create_users_table.up.sql
│   ├── 1970010101_create_users_table.down.sql
│   └── ...
└── mariadb/             # MariaDB-specific migrations
    ├── 1970010101_create_users_table.up.sql
    ├── 1970010101_create_users_table.down.sql
    └── ...
```

## Migration Patterns

### Table Creation
```sql
-- PostgreSQL
CREATE TABLE IF NOT EXISTS forms (
    uuid VARCHAR(36) PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    schema JSON NOT NULL,
    active BOOLEAN NOT NULL DEFAULT true,
    status VARCHAR(20) NOT NULL DEFAULT 'draft',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (user_id) REFERENCES users (uuid) ON DELETE CASCADE
);

-- MariaDB
CREATE TABLE IF NOT EXISTS forms (
    uuid VARCHAR(36) PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    schema JSON NOT NULL,
    active BOOLEAN NOT NULL DEFAULT true,
    status VARCHAR(20) NOT NULL DEFAULT 'draft',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL,
    FOREIGN KEY (user_id) REFERENCES users (uuid) ON DELETE CASCADE
);
```

### Index Creation
```sql
-- Create index on user_id
CREATE INDEX IF NOT EXISTS idx_forms_user_id ON forms (user_id);
```

### Function and Trigger Creation (PostgreSQL)
```sql
-- Create function first
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger in separate migration
CREATE TRIGGER update_forms_updated_at 
    BEFORE UPDATE ON forms 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();
```

## Model-Database Alignment

### GORM Tags
```go
type Form struct {
    ID          string         `json:"id" gorm:"column:uuid;primaryKey;type:uuid;default:gen_random_uuid()"`
    UserID      string         `json:"user_id" gorm:"not null;index;type:uuid"`
    Title       string         `json:"title" gorm:"not null;size:100"`
    Description string         `json:"description" gorm:"size:500"`
    Schema      JSON           `json:"schema" gorm:"type:jsonb;not null"`
    Active      bool           `json:"active" gorm:"not null;default:true"`
    Status      string         `json:"status" gorm:"size:20;not null;default:'draft'"`
    CreatedAt   time.Time      `json:"created_at" gorm:"not null;autoCreateTime"`
    UpdatedAt   time.Time      `json:"updated_at" gorm:"not null;autoUpdateTime"`
    DeletedAt   gorm.DeletedAt `json:"-" gorm:"index"`
}
```

### Default Values
```go
// Always set default values in NewForm constructor
func NewForm(userID, title, description string, schema JSON) *Form {
    now := time.Now()
    return &Form{
        ID:          uuid.New().String(),
        UserID:      userID,
        Title:       title,
        Description: description,
        Schema:      schema,
        Active:      true,
        Status:      "draft", // Explicit default
        CreatedAt:   now,
        UpdatedAt:   now,
    }
}
```

## Best Practices

### 1. Migration Versioning
- Use sequential version numbers
- Avoid gaps in version numbers
- Use descriptive names for migrations

### 2. Database Compatibility
- Test migrations on both PostgreSQL and MariaDB
- Use database-specific syntax when needed
- Handle differences in JSON types (JSONB vs JSON)

### 3. Default Values
- Set defaults in both database and model
- Use explicit defaults in constructors
- Add safety checks in BeforeCreate hooks

### 4. Schema Changes
- Always provide down migrations
- Test both up and down migrations
- Use IF NOT EXISTS for safety

## Common Issues and Solutions

### Missing Columns
```sql
-- Add missing column to existing table
ALTER TABLE forms ADD COLUMN IF NOT EXISTS status VARCHAR(20) NOT NULL DEFAULT 'draft';
```

### Version Conflicts
```bash
# Check current version
task migrate:version

# Reset migrations if needed
docker exec -it container_name psql -U user -d db -c "DELETE FROM schema_migrations;"
task migrate:up
```

### Database-Specific Syntax
```sql
-- PostgreSQL JSON
schema JSONB NOT NULL

-- MariaDB JSON
schema JSON NOT NULL

-- PostgreSQL timestamp
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP

-- MariaDB timestamp
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
```

## Migration Commands

### Taskfile Commands
```bash
# Run migrations
task migrate:up

# Check version
task migrate:version

# Create new migration
task migrate:create -- name

# Force version
task migrate:force -- version
```

### Manual Database Commands
```bash
# PostgreSQL
docker exec -it container_name psql -U user -d db -c "SQL_COMMAND"

# MariaDB
docker exec -it container_name mysql -u user -p db -e "SQL_COMMAND"
```

## Testing Migrations

### Local Testing
1. Start database container
2. Run migrations: `task migrate:up`
3. Verify schema: `task migrate:version`
4. Test application functionality

### Rollback Testing
1. Run down migration: `task migrate:down 1`
2. Verify rollback worked
3. Run up migration again: `task migrate:up`

## Security Considerations

1. **SQL Injection Prevention**
   - Use parameterized queries
   - Validate migration inputs
   - Test with malicious data

2. **Data Integrity**
   - Use foreign key constraints
   - Set appropriate default values
   - Validate data types

3. **Backup Strategy**
   - Backup before major migrations
   - Test migrations on staging
   - Have rollback plan ready
