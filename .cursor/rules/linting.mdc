---
description: 
globs: 
alwaysApply: true
---
# Linting Guidelines

This project uses golangci-lint v2 with strict rules. Follow these guidelines to maintain code quality.

## Core Linters

The following key linters are enabled:

1. **Code Quality**
   - `cyclop`: Max complexity 30, package average 10
   - `funlen`: Max 100 lines, 50 statements per function
   - `gocognit`: Min complexity 20
   - `gocritic`: Style, performance, and diagnostic checks
   - `govet`: All checks enabled except fieldalignment
   - `revive`: Exported symbols, package comments, use-any

2. **Error Handling**
   - `errcheck`: Type assertions checked
   - `errorlint`: Error comparison and wrapping
   - `nilerr`: Nil error returns
   - `noctx`: Context usage in handlers

3. **Style and Formatting**
   - `lll`: Line length limits
   - `sloglint`: Structured logging rules
   - `whitespace`: Whitespace rules
   - `gofmt`: Code formatting

## Error Handling

1. **Error Wrapping**
   ```go
   // ❌ Bad
   if err == ErrNotFound {
       return nil
   }
   
   // ✅ Good
   if errors.Is(err, ErrNotFound) {
       return nil
   }
   ```

2. **Sentinel Errors**
   ```go
   var (
       ErrUserNotFound = errors.New("user not found")
       ErrInvalidCredentials = errors.New("invalid credentials")
   )
   ```

3. **Error Shadowing**
   ```go
   // ❌ Bad
   if err := doSomething(); err != nil {
       if err := cleanup(); err != nil {
           return err
       }
       return err
   }
   
   // ✅ Good
   if err := doSomething(); err != nil {
       if cleanupErr := cleanup(); cleanupErr != nil {
           return fmt.Errorf("cleanup after error: %w", cleanupErr)
       }
       return err
   }
   ```

## Code Complexity

1. **Function Length**
   - Maximum 100 lines
   - Maximum 50 statements
   - Comments ignored in count
   ```go
   // ❌ Bad
   func complexFunction() {
       // Many lines of code...
   }
   
   // ✅ Good
   func processData() {
       validateInput()
       transformData()
       saveResults()
   }
   ```

2. **Cognitive Complexity**
   - Maximum complexity: 30
   - Package average: 10
   - Minimum complexity for gocognit: 20

## Resource Management

1. **Context Usage**
   - Use context in handlers (enforced by `noctx`)
   - Pass context through function calls
   ```go
   // ❌ Bad
   func handler(w http.ResponseWriter, r *http.Request) {
       db.Query("SELECT * FROM users")
   }
   
   // ✅ Good
   func handler(w http.ResponseWriter, r *http.Request) {
       db.QueryContext(r.Context(), "SELECT * FROM users")
   }
   ```

2. **Magic Numbers**
   - Define constants for magic numbers
   - Use meaningful names
   ```go
   // ❌ Bad
   client := &http.Client{
       Timeout: 30 * time.Second,
   }
   
   // ✅ Good
   const defaultClientTimeout = 30 * time.Second
   
   client := &http.Client{
       Timeout: defaultClientTimeout,
   }
   ```

## Testing

1. **Table Tests**
   ```go
   func TestValidation(t *testing.T) {
       tests := []struct{
           name string
           input string
           want error
       }{
           {
               name: "valid input",
               input: "test@example.com",
               want: nil,
           },
       }
       
       for _, tt := range tests {
           t.Run(tt.name, func(t *testing.T) {
               got := validate(tt.input)
               assert.Equal(t, tt.want, got)
           })
       }
   }
   ```

2. **Error Testing**
   ```go
   t.Run("error case", func(t *testing.T) {
       _, err := process("")
       assert.ErrorIs(t, err, ErrInvalidInput)
   })
   ```

## Code Formatting

1. **Line Length**
   - Maximum line length: 120 characters
   - Break long lines logically
   ```go
   // ❌ Bad
   func NewStores(p StoreParams) (contactStore contact.Store, subscriptionStore subscription.Store, userStore user.Store, err error) {
   
   // ✅ Good
   type Stores struct {
       Contact contact.Store
       Subscription subscription.Store
       User user.Store
   }
   
   func NewStores(p StoreParams) (*Stores, error) {
   ```

2. **Struct Field Alignment**
   ```go
   // ❌ Bad
   type User struct {
       ID string `json:"id" validate:"required"`
           Name string `json:"name"`
       CreatedAt time.Time `json:"created_at" validate:"required"`
   }
   
   // ✅ Good
   type User struct {
       ID        string    `json:"id" validate:"required"`
       Name      string    `json:"name"`
       CreatedAt time.Time `json:"created_at" validate:"required"`
   }
   ```

## Common Issues and Solutions

### Variable Shadowing
```go
// ❌ Bad
if err := doSomething(); err != nil {
    return err
}
if err := doSomethingElse(); err != nil { // shadows previous err
    return err
}

// ✅ Good
if err := doSomething(); err != nil {
    return err
}
someErr := doSomethingElse()
if someErr != nil {
    return someErr
}
```

### Unnecessary Defer
```go
// ❌ Bad
func test() {
    // ... code ...
    defer cleanup()
    return
}

// ✅ Good
func test() {
    // ... code ...
    cleanup()
    return
}
```

### Type Modernization
```go
// ❌ Bad
type Data struct {
    Values map[string]any `json:"values"`
}

// ✅ Good
type Data struct {
    Values map[string]any `json:"values"`
}
```

## Enforcement

1. **CI Pipeline**
   - All linting rules are enforced in CI
   - PRs cannot be merged with linting errors
   - Run `task lint` locally before pushing changes

2. **Exclusions**
   - Generated code: Lax enforcement
   - Test files: Some linters disabled
   - Module files: Global variables allowed
   - Third-party code: Excluded from formatting

3. **Configuration**
   - `.golangci.yml`: Main configuration
   - `Taskfile.yml`: Local development tasks

## Reference Files
- [internal/domain/form/model/form_submission.go](mdc:goforms/internal/domain/form/model/form_submission.go)
- [internal/infrastructure/persistence/database/connection_test.go](mdc:goforms/internal/infrastructure/persistence/database/connection_test.go)
- [internal/domain/common/errors/errors.go](mdc:goforms/internal/domain/common/errors/errors.go)
