---
description: 
globs: internal/**/validation/**/*.go,internal/domain/form/**/*.go,internal/**/validation/**/*.go,*.templ
alwaysApply: false
---
# Validation Guidelines

## Core Components

1. **Domain Validation**
   - Use `Validate()` method on domain models
   - Return domain-specific errors
   - Validate business rules and constraints

2. **Input Validation**
   - Use struct tags for request validation
   - Validate at API boundaries
   - Sanitize user input

## Common Patterns

1. **Model Validation**
   ```go
   func (f *Form) Validate() error {
       if f.Title == "" {
           return ErrFormTitleRequired
       }
       if len(f.Title) < MinTitleLength || len(f.Title) > MaxTitleLength {
           return fmt.Errorf("title must be between %d and %d characters", MinTitleLength, MaxTitleLength)
       }
       return f.validateSchema()
   }
   ```

2. **Request Validation**
   ```go
   type CreateFormRequest struct {
       Title       string `json:"title" validate:"required,min=3,max=100"`
       Description string `json:"description" validate:"max=500"`
       Schema      JSON   `json:"schema" validate:"required"`
   }
   ```

3. **Error Handling**
   ```go
   if err := form.Validate(); err != nil {
       var domainErr *domain.Error
       if errors.As(err, &domainErr) {
           return c.JSON(domainErr.Code, domainErr)
       }
       return c.JSON(http.StatusBadRequest, err)
   }
   ```

## Best Practices

1. **Validation Order**
   - Syntax validation first
   - Business rules second
   - Security checks last

2. **Error Messages**
   - Be specific and descriptive
   - Include field names
   - Use consistent format

3. **Security**
   - Sanitize all user input
   - Validate before processing
   - Use type-safe validation

# Input Validation Rule: go-sanitize

All user input (from HTTP requests, forms, API payloads, etc.) **must** be sanitized using the [go-sanitize](mdc:https:/github.com/mrz1836/go-sanitize) library before any processing, storage, or further validation.

## Rationale
- Prevents XSS, script injection, and malformed data from entering the system.
- Ensures consistent normalization and cleaning of user data.
- Reduces risk of security vulnerabilities and data corruption.

## Implementation Guidelines
- Apply go-sanitize functions (e.g., `sanitize.XSS`, `sanitize.Email`, `sanitize.URL`, etc.) to all user-provided fields.
- Sanitize at the boundary (controller/handler level) before passing data to domain or infrastructure layers.
- Do not rely on downstream layers to sanitize input.
- Document which sanitize function is used for each field type.
- See TODO.md: "Use go-sanitize for all user input" for tracking progress.

## Example
```go
import "github.com/mrz1836/go-sanitize"

func (h *UserHandler) CreateUser(c echo.Context) error {
    req := new(CreateUserRequest)
    if err := c.Bind(req); err != nil {
        return err
    }
    req.Email = sanitize.Email(req.Email, false)
    req.Name = sanitize.XSS(req.Name)
    // ...sanitize other fields as needed
    // Proceed with business logic
}
```

globs: internal/**/validation/**/*.go, internal/domain/form/**/*.go, internal/presentation/templates/**/*.templ
