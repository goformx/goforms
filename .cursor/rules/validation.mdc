---
description: 
globs: internal/**/validation/**/*.go,internal/domain/form/**/*.go,internal/**/validation/**/*.go,*.templ
alwaysApply: false
---
# Validation Guidelines

This project uses a comprehensive validation system for ensuring data integrity and business rules.

## Core Validation Components

1. **Validator Interface**
   ```go
   type Validator interface {
       Struct(any) error
       Var(any, string) error
       RegisterValidation(string, func(fl validator.FieldLevel) bool) error
   }
   ```

2. **Domain Errors**
   ```go
   type ErrorCode string

   const (
       ErrCodeValidation    ErrorCode = "VALIDATION_ERROR"
       ErrCodeRequired      ErrorCode = "REQUIRED_FIELD"
       ErrCodeInvalid       ErrorCode = "INVALID_VALUE"
       ErrCodeInvalidFormat ErrorCode = "INVALID_FORMAT"
       ErrCodeInvalidInput  ErrorCode = "INVALID_INPUT"
   )
   ```

## Validation Patterns

1. **Model Validation**
   - Use struct tags for basic validation
   - Implement Validate() method for complex rules
   - Return domain-specific errors
   - Include validation context

2. **Input Validation**
   - Validate at API boundaries
   - Use middleware for common validations
   - Return user-friendly error messages
   - Include field-level errors

3. **Business Rule Validation**
   - Implement in domain services
   - Use value objects for complex rules
   - Maintain validation state
   - Handle cross-entity validation

## Example Usage

### Model Validation
```go
type Form struct {
    ID          string    `json:"id" validate:"required"`
    Title       string    `json:"title" validate:"required,min=3,max=100"`
    Description string    `json:"description" validate:"max=500"`
    Schema      JSON      `json:"schema" validate:"required"`
    Active      bool      `json:"active"`
    CreatedAt   time.Time `json:"created_at"`
    UpdatedAt   time.Time `json:"updated_at"`
}

func (f *Form) Validate() error {
    if f.Title == "" {
        return errors.New(errors.ErrCodeValidation, "form title is required", nil)
    }
    return nil
}
```

### Input Validation
```go
type CreateFormRequest struct {
    Title       string `json:"title" validate:"required,min=3,max=100"`
    Description string `json:"description" validate:"max=500"`
    Schema      JSON   `json:"schema" validate:"required"`
}

func (r *CreateFormRequest) Validate() error {
    validator := validation.New()
    if err := validator.Struct(r); err != nil {
        return errors.Wrap(err, errors.ErrCodeValidation, "invalid form data")
    }
    return nil
}
```

### Business Rule Validation
```go
type FormService struct {
    repo Repository
}

func (s *FormService) CreateForm(ctx context.Context, req *CreateFormRequest) (*Form, error) {
    // Validate input
    if err := req.Validate(); err != nil {
        return nil, err
    }

    // Validate business rules
    if err := s.validateBusinessRules(ctx, req); err != nil {
        return nil, err
    }

    // Create form
    return s.repo.Create(ctx, req)
}
```

## Best Practices

1. **Validation Layers**
   - Input validation at API layer
   - Model validation at domain layer
   - Business rule validation at service layer
   - Database constraints at persistence layer

2. **Error Handling**
   - Use domain-specific error types
   - Include validation context
   - Provide user-friendly messages
   - Maintain error hierarchy

3. **Performance**
   - Validate early
   - Cache validation results
   - Use efficient validators
   - Handle large datasets

4. **Testing**
   - Unit test validation rules
   - Test error cases
   - Test edge cases
   - Test performance

# Input Validation Rule: go-sanitize

All user input (from HTTP requests, forms, API payloads, etc.) **must** be sanitized using the [go-sanitize](mdc:https:/github.com/mrz1836/go-sanitize) library before any processing, storage, or further validation.

## Rationale
- Prevents XSS, script injection, and malformed data from entering the system.
- Ensures consistent normalization and cleaning of user data.
- Reduces risk of security vulnerabilities and data corruption.

## Implementation Guidelines
- Apply go-sanitize functions (e.g., `sanitize.XSS`, `sanitize.Email`, `sanitize.URL`, etc.) to all user-provided fields.
- Sanitize at the boundary (controller/handler level) before passing data to domain or infrastructure layers.
- Do not rely on downstream layers to sanitize input.
- Document which sanitize function is used for each field type.
- See TODO.md: "Use go-sanitize for all user input" for tracking progress.

## Example
```go
import "github.com/mrz1836/go-sanitize"

func (h *UserHandler) CreateUser(c echo.Context) error {
    req := new(CreateUserRequest)
    if err := c.Bind(req); err != nil {
        return err
    }
    req.Email = sanitize.Email(req.Email, false)
    req.Name = sanitize.XSS(req.Name)
    // ...sanitize other fields as needed
    // Proceed with business logic
}
```

globs: internal/**/validation/**/*.go, internal/domain/form/**/*.go, internal/presentation/templates/**/*.templ
