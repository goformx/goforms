---
description:
globs:
alwaysApply: false
---
# Database Testing Guidelines

## Overview
This project uses GORM with PostgreSQL for database operations. See [internal/infrastructure/database/gorm.go](mdc:internal/infrastructure/database/gorm.go) for implementation details.

## Testing Patterns

1. **Mocking Database Connections**
   ```go
   // Use test-specific wrapper for configuration
   type testGormDB struct {
       *GormDB
       tickerDuration time.Duration
   }
   ```

2. **Logger Expectations**
   ```go
   mockLogger.EXPECT().
       Debug(gomock.Any(), gomock.Any()).
       AnyTimes()
   ```

3. **Test Timeouts**
   ```go
   ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
   defer cancel()
   ```

## Best Practices

1. **Test Isolation**
   - Use test-specific wrappers instead of modifying package variables
   - Each test should have its own configuration
   - Clean up resources with `defer`

2. **Mocking Strategy**
   - Use `go.uber.org/mock/gomock` for mocking
   - Mock interfaces, not implementations
   - Set up expectations before running the test

3. **Timing Control**
   - Use short durations for testing (e.g., 10ms)
   - Use context timeouts to prevent hanging tests
   - Wait for expected operations to complete

4. **Error Handling**
   - Test both success and error cases
   - Verify error messages and types
   - Clean up resources in error cases

## Example Test Structure

```go
func TestDatabaseOperation(t *testing.T) {
    // 1. Setup
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    
    // 2. Create mocks
    mockLogger := mocklogging.NewMockLogger(ctrl)
    
    // 3. Set expectations
    mockLogger.EXPECT().
        Debug(gomock.Any(), gomock.Any()).
        AnyTimes()
    
    // 4. Create test instance
    db := &testGormDB{
        GormDB: &GormDB{
            DB:     gormDB,
            logger: mockLogger,
        },
        tickerDuration: testTickerDuration,
    }
    
    // 5. Run test
    ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)
    defer cancel()
    
    // 6. Verify results
    // ... assertions ...
}
```

## Common Pitfalls

1. **Avoid Package Variable Modification**
   - Don't modify package variables in tests
   - Use test-specific configuration instead

2. **Resource Cleanup**
   - Always use `defer` for cleanup
   - Cancel contexts after tests
   - Close database connections

3. **Timing Issues**
   - Don't rely on exact timing
   - Use appropriate timeouts
   - Wait for expected operations

4. **Mock Expectations**
   - Set up all expected calls
   - Use `AnyTimes()` for debug logs
   - Verify important calls with `Times(n)`
