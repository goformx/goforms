---
description: 
globs: internal/**/*_test.go
alwaysApply: false
---
# Testing Guidelines

## Overview
The codebase uses a comprehensive testing strategy covering both backend and frontend components. Tests are organized by type and follow consistent patterns for maintainability and reliability.

## Test Types

1. Unit Tests
   - Backend: Go unit tests
   - Frontend: Component tests
   - Mock dependencies
   - Test edge cases

2. Integration Tests
   - Backend: API integration
   - Frontend: Component integration
   - Database integration
   - External services

3. E2E Tests
   - User flows
   - Critical paths
   - Browser testing
   - Performance testing

## Backend Testing

1. Unit Tests
   ```go
   func TestService_CreateForm(t *testing.T) {
       mockRepo := &MockRepository{}
       mockPublisher := &MockPublisher{}
       mockLogger := &MockLogger{}
       service := NewService(mockRepo, mockPublisher, mockLogger)
       // Test implementation
   }
   ```

2. Integration Tests
   ```go
   func TestService_Integration(t *testing.T) {
       db := setupTestDB(t)
       defer db.Close()
       // Test implementation
   }
   ```

3. API Tests
   ```go
   func TestHandler_CreateForm(t *testing.T) {
       e := echo.New()
       req := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(`{"title":"Test"}`))
       rec := httptest.NewRecorder()
       c := e.NewContext(req, rec)
       // Test implementation
   }
   ```

## Frontend Testing

1. Component Tests
   ```typescript
   describe('FormComponent', () => {
     it('renders form fields correctly', () => {
       const { getByLabelText } = render(<FormComponent />);
       expect(getByLabelText('Title')).toBeInTheDocument();
     });
   });
   ```

2. Hook Tests
   ```typescript
   describe('useForm', () => {
     it('handles form submission', async () => {
       const { result } = renderHook(() => useForm());
       await act(async () => {
         await result.current.submit({ title: 'Test' });
       });
       expect(result.current.isSuccess).toBe(true);
     });
   });
   ```

3. Integration Tests
   ```typescript
   describe('Form Flow', () => {
     it('completes form submission', async () => {
       render(<FormPage />);
       await userEvent.type(screen.getByLabelText('Title'), 'Test');
       await userEvent.click(screen.getByText('Submit'));
       expect(await screen.findByText('Success')).toBeInTheDocument();
     });
   });
   ```

## Test Organization

1. Directory Structure
   ```
   ├── test/                # Backend tests
   │   ├── unit/           # Unit tests
   │   ├── integration/    # Integration tests
   │   └── e2e/           # E2E tests
   └── src/                # Frontend tests
       ├── __tests__/     # Test files
       ├── __mocks__/     # Mock files
       └── test-utils/    # Test utilities
   ```

2. Naming Conventions
   - Backend: `*_test.go`
   - Frontend: `*.test.tsx`
   - Test files: `*.spec.ts`
   - Mock files: `*.mock.ts`

## Test Utilities

1. Backend
   - Test fixtures
   - Mock generators
   - Database helpers
   - HTTP test helpers

2. Frontend
   - Test renderers
   - Mock providers
   - User event helpers
   - API mocks

## Best Practices

1. Test Coverage
   - Aim for high coverage
   - Focus on critical paths
   - Test edge cases
   - Monitor coverage

2. Test Data
   - Use fixtures
   - Generate test data
   - Clean up after tests
   - Isolate test data

3. Performance
   - Run tests in parallel
   - Optimize test setup
   - Use test databases
   - Mock external services

4. Maintenance
   - Keep tests simple
   - Update with changes
   - Remove obsolete tests
   - Document test patterns
