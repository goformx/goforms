---
description: 
globs: 
alwaysApply: false
---
# Testing Guidelines

This project uses testify for testing and mocking. Follow these guidelines for all tests.

## Test Organization
1. **Unit Tests**
   - Test domain logic thoroughly
   - Use table-driven tests
   - Example: [internal/domain/user/service_test.go](mdc:internal/domain/user/service_test.go)

2. **Integration Tests**
   - Test infrastructure components
   - Include database operations
   - Test API endpoints
   - Example: [test/integration/api/user_test.go](mdc:test/integration/api/user_test.go)

## Mocking
1. **Mock Store Example** [test/mocks/store/user/store.go](mdc:test/mocks/store/user/store.go)
   ```go
   type MockStore struct {
       mock.Mock
   }
   
   func (m *MockStore) Create(ctx context.Context, user *User) error {
       args := m.Called(ctx, user)
       return args.Error(0)
   }
   ```

2. **Test Setup**
   ```go
   func TestUserService(t *testing.T) {
       mockStore := NewMockStore()
       mockLogger := mocklogging.NewMockLogger()
       service := user.NewService(mockStore, mockLogger)
   
       t.Run("test case", func(t *testing.T) {
           // Test implementation
       })
   }
   ```

## Best Practices
1. **Table-Driven Tests**
   ```go
   func TestValidation(t *testing.T) {
       tests := []struct {
           name    string
           input   string
           wantErr bool
       }{
           {"valid input", "test@example.com", false},
           {"invalid input", "invalid", true},
       }
   
       for _, tt := range tests {
           t.Run(tt.name, func(t *testing.T) {
               err := validate(tt.input)
               assert.Equal(t, tt.wantErr, err != nil)
           })
       }
   }
   ```

2. **Error Testing**
   ```go
   t.Run("error case", func(t *testing.T) {
       err := someFunction()
       require.Error(t, err)
       assert.ErrorIs(t, err, expectedError)
   })
   ```

3. **Context Usage**
   ```go
   ctx := t.Context()
   // or
   ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
   defer cancel()
   ```

## Performance Testing
1. **Benchmarks**
   ```go
   func BenchmarkOperation(b *testing.B) {
       for i := 0; i < b.N; i++ {
           operation()
       }
   }
   ```

2. **Race Detection**
   - Run tests with -race flag
   - Test concurrent operations
   ```bash
   go test -race ./...
   ```
