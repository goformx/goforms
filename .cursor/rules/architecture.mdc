---
description: 
globs: 
alwaysApply: true
---
# Architecture Guidelines

## Overview

The application follows a clean architecture pattern with four main layers:
- **domain**: Business logic, entities, and domain services
- **application**: HTTP handlers, middleware, and orchestration
- **infrastructure**: External concerns (database, config, web serving)
- **presentation**: Template rendering and view logic

Backend: Go with clean architecture
Frontend: Vanilla TypeScript with templ templates

## Directory Structure

```
├── internal/           # Backend code
│   ├── domain/        # Business logic and entities
│   ├── application/   # HTTP handlers and middleware
│   ├── infrastructure/# External services and config
│   └── presentation/  # Templates and view logic
├── src/               # Frontend code
│   ├── js/           # TypeScript source files
│   │   ├── core/     # Core functionality (config, errors, http-client)
│   │   ├── features/ # Feature-based organization
│   │   ├── pages/    # Page-level components
│   │   └── shared/   # Shared utilities and types
│   └── css/          # Stylesheets
├── migrations/        # Database migrations
└── test/             # Test files
```

## Core Patterns

### Frontend Architecture
- **Feature-based**: Organize by features, not types
- **Service Separation**: API, UI, and orchestration services
- **Path Mapping**: Use `@/core/*`, `@/features/*`, `@/shared/*`
- **State Management**: Avoid global variables, use proper state classes
- **HTTP Client**: Centralized HttpClient for all operations

### Backend Architecture
- **Dependency Injection**: Uber FX for DI
- **Repository Pattern**: Data access abstraction
- **Service Layer**: Business logic orchestration
- **Handler Pattern**: HTTP request handling
- **Middleware**: Cross-cutting concerns

## Import Standards

```typescript
// ✅ Use path mapping
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { HttpClient } from "@/core/http-client";
import { FormService } from "@/features/forms/services/form-service";

// ❌ Avoid relative imports
import { FormBuilderError } from "../../../core/errors/form-builder-error";
```

## Service Architecture

### Frontend Three-Tier Pattern
```typescript
// 1. API Service - HTTP operations only
export class FormApiService {
  async getSchema(formId: string): Promise<FormSchema> { /* ... */ }
}

// 2. UI Service - DOM manipulation only
export class FormUIService {
  updateFormCard(formId: string, updates: any): void { /* ... */ }
}

// 3. Orchestration Service - Coordinates API and UI
export class FormService {
  private apiService: FormApiService;
  private uiService: FormUIService;
  
  async updateFormDetails(formId: string, details: any): Promise<void> {
    await this.apiService.updateFormDetails(formId, details);
    this.uiService.updateFormCard(formId, details);
  }
}
```

### Backend Service Pattern
```go
type Service interface {
    CreateForm(ctx context.Context, userID string, form *model.Form) error
    GetForm(ctx context.Context, id string) (*model.Form, error)
}

type service struct {
    repo   Repository
    logger logging.Logger
}
```

## Dependency Injection

```go
app := fx.New(
    infrastructure.Module, // config, logger, db
    domain.Module,         // domain services
    application.Module,    // handlers, middleware
    presentation.Module,   // templates
    fx.Invoke(setupApplication),
)
```

## Best Practices

1. **Layer Separation**: Maintain clear boundaries between layers
2. **Feature-based Structure**: Organize frontend by features
3. **Service Separation**: Separate API, UI, and business logic
4. **Path Mapping**: Use consistent import paths
5. **Dependency Direction**: Dependencies point inward toward domain
6. **Interface Segregation**: Define interfaces in domain, implement in infrastructure
