---
description: 
globs: 
alwaysApply: true
---
# Architecture Guidelines

## Overview
The application follows a layered architecture with clear separation of concerns. The codebase is organized into backend and frontend components, with the backend following a clean architecture pattern and the frontend using modern web technologies.

## Directory Structure

```
├── internal/           # Backend code
│   ├── domain/        # Domain layer
│   │   ├── common/    # Shared domain code
│   │   ├── form/      # Form domain
│   │   └── user/      # User domain
│   ├── application/   # Application layer
│   │   ├── handlers/  # HTTP handlers
│   │   ├── middleware/# HTTP middleware
│   │   └── response/  # Response handling
│   ├── infrastructure/# Infrastructure layer
│   │   ├── config/    # Configuration
│   │   ├── database/  # Database access
│   │   └── logging/   # Logging
│   └── presentation/  # Presentation layer
│       ├── templates/ # HTML templates
│       └── view/      # View rendering
├── src/               # Frontend code
│   ├── js/           # JavaScript/TypeScript source
│   ├── css/          # Stylesheets
│   └── types/        # TypeScript type definitions
├── public/           # Static assets
├── migrations/       # Database migrations
└── test/            # Test files
```

## Core Components

1. Backend (Go)
   - Domain Layer: Models and business logic
   - Application Layer: HTTP handlers and middleware
   - Infrastructure Layer: External services and persistence
   - Presentation Layer: Template rendering and view logic

2. Frontend (TypeScript/React)
   - Modern component-based architecture
   - Type-safe development with TypeScript
   - CSS modules for styling
   - Vite for build tooling

## Best Practices

1. Backend Development
   - Use dependency injection
   - Define clear interfaces
   - Validate dependencies
   - Follow Go best practices

2. Frontend Development
   - Use TypeScript for type safety
   - Follow React best practices
   - Implement responsive design
   - Use CSS modules for styling

3. Error Handling
   - Use domain errors
   - Log errors with context
   - Return appropriate responses
   - Handle frontend errors gracefully

4. Configuration
   - Use environment variables
   - Validate configuration
   - Provide defaults
   - Separate frontend/backend configs

5. Logging
   - Use structured logging
   - Include context
   - Use appropriate levels
   - Monitor frontend errors

## Development Workflow

1. Backend Development
   - Write tests first
   - Follow Go idioms
   - Use dependency injection
   - Document APIs

2. Frontend Development
   - Use TypeScript
   - Write component tests
   - Follow React patterns
   - Use CSS modules

3. Testing
   - Unit tests for both layers
   - Integration tests
   - E2E tests
   - Performance testing

4. Deployment
   - Docker containers
   - CI/CD pipeline
   - Environment configuration
   - Monitoring setup
