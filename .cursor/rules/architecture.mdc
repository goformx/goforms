---
description: 
globs: 
alwaysApply: true
---
# Architecture Guidelines

## Overview

The application is structured in a layered architecture, dividing the codebase into four main layers:
- **domain**: Business logic, entities, and domain services
- **application**: HTTP handlers, middleware, and orchestration
- **infrastructure**: External concerns like database, configuration, and web serving
- **presentation**: Template rendering and view logic

The backend is implemented in Go, following a clean architecture pattern. The frontend uses vanilla TypeScript with templ templates, not React as previously documented.

## Directory Structure

```
├── internal/           # Backend code
│   ├── domain/        # Domain layer
│   │   ├── common/    # Shared domain code (errors, events, interfaces)
│   │   ├── entities/  # Core business objects
│   │   ├── form/      # Form domain (models, services, repositories)
│   │   └── user/      # User domain (services, repositories, types)
│   ├── application/   # Application layer
│   │   ├── constants/ # Application constants
│   │   ├── handlers/  # HTTP handlers (web, health)
│   │   ├── middleware/# HTTP middleware (auth, access, session, etc.)
│   │   ├── response/  # Response handling
│   │   ├── services/  # Application services
│   │   └── validation/# Request validation
│   ├── infrastructure/# Infrastructure layer
│   │   ├── config/    # Configuration management
│   │   ├── database/  # Database connections
│   │   ├── event/     # Event system
│   │   ├── health/    # Health checks
│   │   ├── logging/   # Logging infrastructure
│   │   ├── metrics/   # Metrics and monitoring
│   │   ├── repository/# Repository implementations
│   │   ├── sanitization/# Input sanitization
│   │   ├── server/    # HTTP server setup
│   │   ├── validation/# Validation infrastructure
│   │   ├── version/   # Version information
│   │   └── web/       # Asset serving and web utilities
│   └── presentation/  # Presentation layer
│       ├── templates/ # HTML templates (templ)
│       └── view/      # View rendering logic
├── src/               # Frontend code
│   ├── js/           # TypeScript source files
│   ├── css/          # Stylesheets
│   └── types/        # TypeScript type definitions
├── public/           # Static assets
├── migrations/       # Database migrations (PostgreSQL/MariaDB)
└── test/            # Test files
    ├── integration/ # Integration tests
    └── mocks/       # Mock implementations
```

## Core Components

### Backend (Go)
- **Domain Layer**: Models, business logic, and domain services
- **Application Layer**: HTTP handlers, middleware, and orchestration
- **Infrastructure Layer**: External services, persistence, and configuration
- **Presentation Layer**: Template rendering using templ

### Frontend (TypeScript)
- **Vanilla TypeScript**: No React framework, uses templ templates
- **Type-safe development**: Strict TypeScript configuration
- **CSS modules**: Component-specific styling
- **Vite**: Build tool and development server

## Dependency Injection

### Main Application Setup
The application uses Uber FX for dependency injection, configured in [main.go](mdc:main.go):

```go
app := fx.New(
    infrastructure.Module,
    domain.Module,
    application.Module,
    presentation.Module,
    fx.Invoke(setupApplication),
    fx.Invoke(setupLifecycle),
)
```

### Module Organization
- **Infrastructure Module**: Core infrastructure providers (config, logger, DB, etc.)
- **Domain Module**: Domain services and repositories
- **Application Module**: Handlers and middleware
- **Presentation Module**: Template renderers

## Entry Point

### Main Application
The application entry point is [main.go](mdc:main.go) in the root directory.

### Key Responsibilities
- Dependency injection setup
- Embedded filesystem configuration
- Application lifecycle management
- Server startup and shutdown

## File Organization Patterns

### Go Files
- **Interfaces**: Defined in domain layer
- **Implementations**: Located in infrastructure layer
- **Services**: Business logic in domain, orchestration in application
- **Handlers**: HTTP handling in application layer

### Frontend Files
- **TypeScript**: Modular TypeScript files in `src/js/`
- **Styles**: CSS files in `src/css/`
- **Types**: TypeScript definitions in `src/types/`
- **Templates**: HTML templates using templ in `internal/presentation/templates/`

## Configuration Management

### Environment Configuration
Configuration is centralized in [internal/infrastructure/config/config.go](mdc:internal/infrastructure/config/config.go) using environment variables with `GOFORMS_` prefix.

### Key Configuration Areas
- **Database**: Connection settings and migrations
- **Server**: Host, port, and server configuration
- **Assets**: Development vs production asset serving
- **Security**: Session, CSRF, and security settings

## Database Architecture

### Migration System
Database migrations are located in [migrations/](mdc:migrations) with support for both PostgreSQL and MariaDB.

### Repository Pattern
- **Interfaces**: Defined in domain layer
- **Implementations**: Located in infrastructure layer
- **Common Patterns**: Pagination, error handling, and transaction management

## Security Architecture

### Authentication & Authorization
- **Session Management**: Secure session handling
- **Middleware**: Authentication and access control middleware
- **CSRF Protection**: Cross-site request forgery protection

### Asset Security
- **Content Security Policy**: Security headers for static assets
- **Secure Headers**: X-Frame-Options, X-Content-Type-Options, etc.

## Development Workflow

### Local Development
1. **Backend**: Hot reload with Air
2. **Frontend**: Vite dev server with HMR
3. **Database**: Local PostgreSQL/MariaDB with migrations

### Production Deployment
1. **Build**: Frontend assets built to `dist/`
2. **Embed**: Assets embedded into Go binary
3. **Deploy**: Single binary deployment

## Best Practices

### Code Organization
1. **Layer Separation**: Maintain clear boundaries between layers
2. **Dependency Direction**: Dependencies point inward toward domain
3. **Interface Segregation**: Define interfaces in domain, implement in infrastructure
4. **Error Handling**: Use domain-specific errors throughout

### Development Practices
1. **Dependency Injection**: Use FX for all dependencies
2. **Configuration**: Centralize configuration management
3. **Logging**: Use structured logging with context
4. **Testing**: Unit tests for each layer

### Asset Management
1. **Development**: Use Vite dev server for hot reload
2. **Production**: Embed assets for single binary deployment
3. **Versioning**: Use asset hashing for cache busting
4. **Security**: Apply security headers to all assets
