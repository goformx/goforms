---
description: 
globs: internal/infrastructure/**/*.go
alwaysApply: false
---
# Infrastructure Module Guide

This guide outlines the best practices for implementing the infrastructure module in the GoFormX application.

## Core Structure

The main infrastructure module is defined in `internal/infrastructure/module.go` and follows a modular design pattern using the `fx` dependency injection framework.

### Module Organization

The module is organized into focused components:

1. Core Infrastructure:
   ```go
   var Module = fx.Options(
       fx.Provide(
           // Core infrastructure
           echo.New,
           server.New,
           NewEventPublisher,
           // Database
           database.New,
       ),
   )
   ```

2. Dependency Groups:
   ```go
   // CoreParams groups core infrastructure dependencies
   type CoreParams struct {
       fx.In
       Config   *config.Config
       Logger   logging.Logger
       Renderer view.Renderer
       Echo     *echo.Echo
   }

   // ServiceParams groups business service dependencies
   type ServiceParams struct {
       fx.In
       UserService user.Service
       FormService form.Service
   }
   ```

## What Belongs in Infrastructure

The infrastructure layer should only contain:

1. Core Infrastructure Components:
   - Database connections
   - Logging
   - Configuration
   - Event system
   - Server setup

2. External Service Adapters:
   - Event publishers
   - Database clients
   - External API clients

3. Technical Concerns:
   - Connection management
   - Resource management
   - Error handling
   - Logging infrastructure

## What Does NOT Belong in Infrastructure

The following should be moved to their respective layers:

1. Application Services:
   - Auth service → application layer
   - User service → application layer
   - Form service → application layer

2. Presentation Components:
   - View renderers → presentation layer
   - Template engines → presentation layer
   - UI components → presentation layer

3. Domain Logic:
   - Business rules → domain layer
   - Domain services → domain layer
   - Domain events → domain layer
   - Repositories and stores → domain layer

## Handler Registration

Handlers should be registered using the `AnnotateHandler` helper function:

```go
func AnnotateHandler(fn any) fx.Option {
    return fx.Provide(
        fx.Annotate(
            fn,
            fx.As(new(web.Handler)),
            fx.ResultTags(`group:"handlers"`),
        ),
    )
}
```

### Parameter Organization

Handler dependencies are organized into focused parameter groups:

1. `CoreParams`: Infrastructure dependencies (config, logging, rendering, echo)
2. `ServiceParams`: Business service dependencies

This separation keeps dependencies organized and maintainable.

## Event System

The event system follows these principles:

1. Use dependency injection for event publishers
2. Validate dependencies
3. Provide clear error messages
4. Use structured logging

Example event publisher setup:
```go
type EventPublisherParams struct {
    fx.In
    Logger logging.Logger
}

func NewEventPublisher(p EventPublisherParams) (formevent.Publisher, error) {
    if p.Logger == nil {
        return nil, errors.New("logger is required for event publisher")
    }
    return event.NewMemoryPublisher(p.Logger), nil
}
```

## Best Practices

1. Use dependency injection for better testability
2. Keep modules focused and single-purpose
3. Provide clear error messages
4. Use structured logging
5. Implement proper error handling
6. Ensure type safety
7. Follow fail-fast principle
8. Use proper logging levels
9. Use interface embedding for logger compatibility
10. Keep configuration validation close to the config package

## Database Operations

### GORM Usage

1. Use GORM for all database operations:
   ```go
   // Example of using GORM for database operations
   func (s *Store) Create(ctx context.Context, u *user.User) error {
       result := s.db.WithContext(ctx).Create(u)
       if result.Error != nil {
           return fmt.Errorf("failed to create user: %w", result.Error)
       }
       return nil
   }
   ```

2. Always use context-aware methods:
   ```go
   // Good
   s.db.WithContext(ctx).Where("email = ?", email).First(&u)
   
   // Bad
   s.db.Where("email = ?", email).First(&u)
   ```

### Connection Management

1. Use the provided database connection:
   ```go
   type Store struct {
       db *database.GormDB
   }
   
   func NewStore(db *database.GormDB) *Store {
       return &Store{db: db}
   }
   ```

2. Configure connection pool settings:
   ```go
   sqlDB, err := db.DB()
   if err != nil {
       return nil, fmt.Errorf("failed to get database instance: %w", err)
   }
   
   sqlDB.SetMaxOpenConns(cfg.Database.Postgres.MaxOpenConns)
   sqlDB.SetMaxIdleConns(cfg.Database.Postgres.MaxIdleConns)
   sqlDB.SetConnMaxLifetime(cfg.Database.Postgres.ConnMaxLifetime)
   ```

### Error Handling

1. Define custom errors:
   ```go
   var (
       ErrUserNotFound = errors.New("user not found")
       ErrInvalidInput = errors.New("invalid input")
   )
   ```

2. Wrap errors with context:
   ```go
   if err := s.db.WithContext(ctx).Create(u).Error; err != nil {
       return fmt.Errorf("failed to create user: %w", err)
   }
   ```

### Logging

1. Use structured logging:
   ```go
   logger.Debug("creating user",
       logging.StringField("email", u.Email),
       logging.StringField("id", u.ID),
   )
   ```

2. Log errors with context:
   ```go
   logger.Error("failed to create user",
       logging.ErrorField("error", err),
       logging.StringField("email", u.Email),
   )
   ```

## Best Practices

1. Keep database operations in the domain layer
2. Use dependency injection for database connections
3. Implement proper error handling and logging
4. Use context for cancellation and timeouts
5. Follow the repository pattern for data access
6. Implement proper connection pooling
7. Use GORM's built-in features for common operations
8. Keep SQL queries maintainable and readable
9. Use proper indexing for performance
10. Validate database configuration
