---
description: 
globs: internal/infrastructure/**/*.go
alwaysApply: false
---
# Infrastructure Module Guide

This guide outlines the best practices and patterns for the infrastructure module in the GoFormX application.

## Core Structure

The main infrastructure module is defined in [internal/infrastructure/module.go](mdc:goforms/goforms/internal/infrastructure/module.go) and follows a modular design pattern using the `fx` dependency injection framework.

### Module Organization

The module is split into focused sub-modules:

1. `InfrastructureModule`: Core infrastructure dependencies
   ```go
   var InfrastructureModule = fx.Options(
       fx.Provide(
           config.New,
           database.NewDB,
           func(db *database.Database) *sqlx.DB {
               return db.DB
           },
           fx.Annotate(
               userstore.NewStore,
               fx.As(new(user.Store)),
           ),
           fx.Annotate(
               formstore.NewStore,
               fx.As(new(form.Store)),
           ),
           func(logger logging.Logger) *appmiddleware.SessionManager {
               return appmiddleware.NewSessionManager(logger)
           },
           func(
               core CoreParams,
               services ServiceParams,
               sessionManager *appmiddleware.SessionManager,
           ) *appmiddleware.Manager {
               return appmiddleware.New(&appmiddleware.ManagerConfig{
                   Logger:         core.Logger,
                   Security:       &core.Config.Security,
                   UserService:    services.UserService,
                   SessionManager: sessionManager,
                   Config:         core.Config,
               })
           },
       ),
   )
   ```

2. `HandlerModule`: HTTP handlers and routing

## Handler Registration

Handlers should be registered using the `AnnotateHandler` helper function:

```go
AnnotateHandler(func(core CoreParams, services ServiceParams) *wh.DemoHandler {
    return wh.NewDemoHandler(core.Logger, core.Renderer, services.SubscriptionService)
})
```

### Parameter Organization

Handler dependencies are organized into focused parameter groups:

1. `CoreParams`: Infrastructure dependencies (logging, rendering, config)
2. `ServiceParams`: Business service dependencies

This separation keeps dependencies organized and maintainable.

## Store Management

Store initialization follows these principles:

1. Early validation of database connection
2. Explicit nil checks for each store
3. Detailed error logging with context
4. Type safety through Go's type system
5. **Form and user stores are both provided and required for the domain layer**

Example store initialization:
```go
userStore := store.NewUserStore(db, logger)
formStore := store.NewFormStore(db, logger)
if userStore == nil || formStore == nil {
    logger.Error("failed to create store",
        logging.String("operation", "store_initialization"),
        logging.String("store_type", "user/form"),
        logging.String("error_type", "nil_store"),
    )
    return Stores{}, fmt.Errorf("failed to create user or form store")
}
```

## Error Handling

The module follows these error handling principles:

1. Fail fast - return errors immediately when detected
2. Provide detailed error context
3. Use structured logging for errors
4. Ensure proper cleanup on failure

## Logging Guidelines

Logging should:

1. Include operation context
2. Use appropriate log levels:
   - Error: For failures
   - Info: For successful operations
   - Debug: For detailed process information
3. Include relevant metadata:
   - Operation name
   - Store/handler types
   - Error types
   - Component status

## Best Practices

1. Use dependency injection for better testability
2. Keep modules focused and single-purpose
3. Provide clear error messages
4. Use structured logging
5. Implement proper error handling
6. Ensure type safety
7. Follow fail-fast principle
8. Use proper logging levels
9. Use interface embedding for logger compatibility
10. Keep configuration validation close to the config package
