---
description: 
globs: 
alwaysApply: true
---
# Error Handling Guidelines

This project implements a comprehensive error handling system for consistent error management across all layers.

## Core Error System

1. **DomainError**
   ```go
   type DomainError struct {
       Code    ErrorCode
       Message string
       Err     error
       Context map[string]any
   }
   ```

2. **Error Codes**
   ```go
   const (
       // Validation errors
       ErrCodeValidation    ErrorCode = "VALIDATION_ERROR"
       ErrCodeRequired      ErrorCode = "REQUIRED_FIELD"
       ErrCodeInvalid       ErrorCode = "INVALID_VALUE"
       ErrCodeInvalidFormat ErrorCode = "INVALID_FORMAT"
       ErrCodeInvalidInput  ErrorCode = "INVALID_INPUT"

       // Authentication errors
       ErrCodeUnauthorized     ErrorCode = "UNAUTHORIZED"
       ErrCodeForbidden        ErrorCode = "FORBIDDEN"
       ErrCodeInvalidToken     ErrorCode = "INVALID_TOKEN"
       ErrCodeAuthentication   ErrorCode = "AUTHENTICATION_ERROR"
       ErrCodeInsufficientRole ErrorCode = "INSUFFICIENT_ROLE"

       // Resource errors
       ErrCodeNotFound      ErrorCode = "NOT_FOUND"
       ErrCodeConflict      ErrorCode = "CONFLICT"
       ErrCodeBadRequest    ErrorCode = "BAD_REQUEST"
       ErrCodeServerError   ErrorCode = "SERVER_ERROR"
       ErrCodeAlreadyExists ErrorCode = "ALREADY_EXISTS"
   )
   ```

## Error Handling Patterns

1. **Domain Layer**
   - Use domain-specific errors
   - Include error context
   - Wrap underlying errors
   - Maintain error hierarchy

2. **Service Layer**
   - Map domain errors to HTTP errors
   - Add service context
   - Handle cross-cutting concerns
   - Log errors appropriately

3. **API Layer**
   - Return consistent error responses
   - Include error details
   - Handle error translation
   - Maintain error status codes

## Example Usage

### Creating Errors
```go
// Simple error
err := errors.New(errors.ErrCodeValidation, "form title is required", nil)

// Error with context
err := errors.New(errors.ErrCodeValidation, "invalid form data", nil).
    WithContext("form_id", formID).
    WithContext("field", "title")

// Wrapping errors
err := errors.Wrap(originalErr, errors.ErrCodeValidation, "form validation failed")
```

### Error Handling
```go
func (s *FormService) CreateForm(ctx context.Context, req *CreateFormRequest) (*Form, error) {
    // Validate input
    if err := req.Validate(); err != nil {
        return nil, errors.Wrap(err, errors.ErrCodeValidation, "invalid form data")
    }

    // Create form
    form, err := s.repo.Create(ctx, req)
    if err != nil {
        return nil, errors.Wrap(err, errors.ErrCodeServerError, "failed to create form")
    }

    return form, nil
}
```

### Error Response
```go
type ErrorResponse struct {
    Code    string            `json:"code"`
    Message string            `json:"message"`
    Details map[string]string `json:"details,omitempty"`
}

func (h *Handler) handleError(w http.ResponseWriter, err error) {
    var domainErr *errors.DomainError
    if errors.As(err, &domainErr) {
        response := ErrorResponse{
            Code:    string(domainErr.Code),
            Message: domainErr.Message,
            Details: make(map[string]string),
        }
        
        for k, v := range domainErr.Context {
            response.Details[k] = fmt.Sprint(v)
        }
        
        w.WriteHeader(getStatusCode(domainErr.Code))
        json.NewEncoder(w).Encode(response)
        return
    }
    
    // Handle unknown errors
    w.WriteHeader(http.StatusInternalServerError)
    json.NewEncoder(w).Encode(ErrorResponse{
        Code:    string(errors.ErrCodeServerError),
        Message: "Internal server error",
    })
}
```

## Best Practices

1. **Error Creation**
   - Use appropriate error codes
   - Include descriptive messages
   - Add relevant context
   - Wrap underlying errors

2. **Error Handling**
   - Handle errors at appropriate level
   - Log errors with context
   - Maintain error chain
   - Clean up resources

3. **Error Response**
   - Use consistent format
   - Include error details
   - Set appropriate status codes
   - Handle all error types

4. **Error Logging**
   - Log at appropriate level
   - Include error context
   - Add request details
   - Maintain error chain
