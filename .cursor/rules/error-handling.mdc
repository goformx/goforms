---
description: 
globs: 
alwaysApply: false
---
# Error Handling Guidelines

This project implements a comprehensive error handling system using domain-specific errors.

## Error Types
The central error package [internal/domain/common/errors/errors.go](mdc:goforms/internal/domain/common/errors/errors.go) defines:

1. **Validation Errors**
   - ErrCodeValidation
   - ErrCodeRequired
   - ErrCodeInvalid
   - ErrCodeInvalidFormat
   - ErrCodeInvalidInput

2. **Authentication Errors**
   - ErrCodeUnauthorized
   - ErrCodeInvalidToken
   - ErrCodeAuthentication
   - ErrCodeInsufficientRole

3. **Resource Errors**
   - ErrCodeNotFound
   - ErrCodeConflict
   - ErrCodeAlreadyExists
   - ErrCodeBadRequest

4. **Application Lifecycle Errors**
   - ErrCodeStartup
   - ErrCodeShutdown
   - ErrCodeConfig
   - ErrCodeDatabase
   - ErrCodeTimeout
   - ErrCodeServerError

## Error Creation

### Creating New Errors
```go
err := errors.New(errors.ErrCodeValidation, "validation failed", nil)
```

### Wrapping Errors
```go
err := errors.Wrap(originalErr, errors.ErrCodeDatabase, "database operation failed")
```

### Adding Context
```go
err := errors.New(errors.ErrCodeValidation, "validation failed", nil).
    WithContext("field", "email").
    WithContext("value", "invalid@email")
```

## Error Handling Best Practices

1. **Use Domain-Specific Errors**
   - Create appropriate error types
   - Use meaningful error codes
   - Add relevant context
   - Include original error when wrapping

2. **Error Wrapping**
   - Wrap errors at boundaries
   - Preserve error context
   - Add meaningful messages
   - Use proper error codes

3. **Error Response**
   - Return appropriate HTTP status codes
   - Include error details in response
   - Log errors appropriately
   - Map domain errors to HTTP status codes

4. **Validation Errors**
   - Use validation package
   - Return descriptive messages
   - Include field context
   - Use proper error codes

5. **System Errors**
   - Log with stack traces
   - Don't expose internals
   - Use appropriate error codes
   - Handle startup/shutdown errors

## Error Mapping

The `mapErrorToStatus` function in the error logger maps domain errors to HTTP status codes:

```go
func mapErrorToStatus(code errors.ErrorCode) int {
    switch code {
    case errors.ErrCodeValidation, errors.ErrCodeRequired, errors.ErrCodeInvalid,
        errors.ErrCodeInvalidFormat, errors.ErrCodeInvalidInput, errors.ErrCodeBadRequest:
        return http.StatusBadRequest
    case errors.ErrCodeUnauthorized, errors.ErrCodeInvalidToken, errors.ErrCodeAuthentication:
        return http.StatusUnauthorized
    case errors.ErrCodeForbidden, errors.ErrCodeInsufficientRole:
        return http.StatusForbidden
    case errors.ErrCodeNotFound:
        return http.StatusNotFound
    case errors.ErrCodeConflict, errors.ErrCodeAlreadyExists:
        return http.StatusConflict
    case errors.ErrCodeServerError, errors.ErrCodeStartup, errors.ErrCodeShutdown,
        errors.ErrCodeConfig, errors.ErrCodeDatabase, errors.ErrCodeTimeout:
        return http.StatusInternalServerError
    default:
        return http.StatusInternalServerError
    }
}
```
