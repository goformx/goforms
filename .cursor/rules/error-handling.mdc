---
description: 
globs: 
alwaysApply: true
---
# Error Handling Guidelines

## Overview
This project implements a comprehensive error handling system for consistent error management across all layers.

## Core Error System

### DomainError Structure
```go
type DomainError struct {
    Code    ErrorCode
    Message string
    Err     error
    Context map[string]any
}
```

### Error Codes
```go
const (
    // Validation errors
    ErrCodeValidation    ErrorCode = "VALIDATION_ERROR"
    ErrCodeRequired      ErrorCode = "REQUIRED_FIELD"
    ErrCodeInvalid       ErrorCode = "INVALID_VALUE"
    
    // Authentication errors
    ErrCodeUnauthorized  ErrorCode = "UNAUTHORIZED"
    ErrCodeForbidden     ErrorCode = "FORBIDDEN"
    
    // Resource errors
    ErrCodeNotFound      ErrorCode = "NOT_FOUND"
    ErrCodeConflict      ErrorCode = "CONFLICT"
    ErrCodeServerError   ErrorCode = "SERVER_ERROR"
)
```

## Error Creation Patterns

### Standard Errors (simple cases)
```go
var (
    ErrFormTitleRequired = errors.New("form title is required")
    ErrFormNotFound = errors.New("form not found")
)

// Inline errors
if f.Title == "" {
    return errors.New("title is required")
}
```

### Domain Errors (complex cases)
```go
// Domain error with context
err := domainerrors.New(domainerrors.ErrCodeValidation, "invalid form data", nil).
    WithContext("form_id", formID).
    WithContext("field", "title")

// Wrapping errors
err := domainerrors.Wrap(originalErr, domainerrors.ErrCodeValidation, "form validation failed")
```

## Error Handling Patterns

### Service Layer
```go
func (s *FormService) CreateForm(ctx context.Context, req *CreateFormRequest) (*Form, error) {
    // Validate input
    if err := req.Validate(); err != nil {
        return nil, domainerrors.Wrap(err, domainerrors.ErrCodeValidation, "invalid form data")
    }

    // Create form
    form, err := s.repo.Create(ctx, req)
    if err != nil {
        return nil, domainerrors.Wrap(err, domainerrors.ErrCodeServerError, "failed to create form")
    }

    return form, nil
}
```

### Handler Error Response
```go
func (h *FormHandler) handleFormCreate(c echo.Context) error {
    if err != nil {
        h.Logger.Error("failed to create form", "error", err)
        
        // Check for specific validation errors
        switch {
        case errors.Is(err, model.ErrFormTitleRequired):
            return response.WebErrorResponse(c, h.Renderer, http.StatusBadRequest, "Form title is required")
        default:
            return response.WebErrorResponse(c, h.Renderer, http.StatusInternalServerError, "Failed to create form")
        }
    }
    
    return c.Redirect(http.StatusSeeOther, fmt.Sprintf("/forms/%s/edit", form.ID))
}
```

## Validation Error Patterns

### Request Validation
```go
type CreateFormRequest struct {
    Title       string `json:"title" validate:"required,min=3,max=100"`
    Description string `json:"description" validate:"max=500"`
    Schema      JSON   `json:"schema" validate:"required"`
}

func (req *CreateFormRequest) Validate() error {
    if req.Title == "" {
        return errors.New("title is required")
    }
    if len(req.Title) < 3 {
        return errors.New("title must be at least 3 characters")
    }
    return nil
}
```

### Model Validation
```go
func (f *Form) Validate() error {
    if f.Title == "" {
        return errors.New("form title is required")
    }
    if len(f.Title) < MinTitleLength {
        return errors.New("title too short")
    }
    return f.validateSchema()
}
```

## Error Response Format

### API Error Response
```go
type ErrorResponse struct {
    Code    string            `json:"code"`
    Message string            `json:"message"`
    Details map[string]string `json:"details,omitempty"`
}

func (h *Handler) handleError(w http.ResponseWriter, err error) {
    var domainErr *errors.DomainError
    if errors.As(err, &domainErr) {
        response := ErrorResponse{
            Code:    string(domainErr.Code),
            Message: domainErr.Message,
            Details: make(map[string]string),
        }
        
        for k, v := range domainErr.Context {
            response.Details[k] = fmt.Sprint(v)
        }
        
        w.WriteHeader(getStatusCode(domainErr.Code))
        json.NewEncoder(w).Encode(response)
        return
    }
    
    // Handle unknown errors
    w.WriteHeader(http.StatusInternalServerError)
    json.NewEncoder(w).Encode(ErrorResponse{
        Code:    string(errors.ErrCodeServerError),
        Message: "Internal server error",
    })
}
```

## Common Patterns

### Error Type Checking
```go
// Check for specific error types
if errors.Is(err, user.ErrUserExists) {
    return c.JSON(http.StatusBadRequest, map[string]string{
        "message": "This email is already registered",
        "field":   "email",
    })
}

// Check for domain errors
var domainErr *errors.DomainError
if errors.As(err, &domainErr) {
    return c.JSON(getStatusCode(domainErr.Code), domainErr)
}
```

## Best Practices

1. **Error Type Selection**
   - Use standard `errors.New()` for simple validation errors
   - Use `domainerrors.New()` for complex errors with context
   - Use `domainerrors.Wrap()` when wrapping existing errors

2. **Error Handling**
   - Handle errors at appropriate level
   - Log errors with context
   - Maintain error chain
   - Clean up resources

3. **Error Response**
   - Use consistent format
   - Include error details
   - Set appropriate status codes
   - Handle all error types

4. **Error Logging**
   - Log at appropriate level
   - Include error context
   - Add request details
   - Maintain error chain
