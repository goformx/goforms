---
description: 
globs: 
alwaysApply: false
---
# Application Structure Guide

## Overview
GoForms follows a clean architecture pattern with clear separation between domain, application, infrastructure, and presentation layers. The application is structured as a Go backend with embedded frontend assets.

## Architecture Layers

### 1. Domain Layer (`internal/domain/`)
Contains business logic, entities, and domain services.

#### Key Components
- **Entities**: Core business objects ([internal/domain/entities/user.go](mdc:internal/domain/entities/user.go))
- **Services**: Business logic services ([internal/domain/form/service.go](mdc:internal/domain/form/service.go))
- **Repositories**: Data access interfaces ([internal/domain/form/repository.go](mdc:internal/domain/form/repository.go))
- **Events**: Domain events and handlers ([internal/domain/form/events/](mdc:internal/domain/form/events))
- **Errors**: Domain-specific errors ([internal/domain/common/errors/](mdc:internal/domain/common/errors))

### 2. Application Layer (`internal/application/`)
Contains application services, handlers, and orchestration logic.

#### Key Components
- **Handlers**: HTTP request handlers ([internal/application/handlers/web/](mdc:internal/application/handlers/web))
- **Middleware**: HTTP middleware ([internal/application/middleware/](mdc:internal/application/middleware))
- **Services**: Application services ([internal/application/services/](mdc:internal/application/services))
- **Validation**: Request validation ([internal/application/validation/](mdc:internal/application/validation))

### 3. Infrastructure Layer (`internal/infrastructure/`)
Contains external concerns like database, configuration, and web serving.

#### Key Components
- **Database**: Database connections and repositories ([internal/infrastructure/database/](mdc:internal/infrastructure/database))
- **Config**: Configuration management ([internal/infrastructure/config/](mdc:internal/infrastructure/config))
- **Logging**: Logging infrastructure ([internal/infrastructure/logging/](mdc:internal/infrastructure/logging))
- **Web**: Asset serving and web utilities ([internal/infrastructure/web/](mdc:internal/infrastructure/web))
- **Server**: HTTP server setup ([internal/infrastructure/server/](mdc:internal/infrastructure/server))

### 4. Presentation Layer (`internal/presentation/`)
Contains template rendering and view logic.

#### Key Components
- **Templates**: HTML templates ([internal/presentation/templates/](mdc:internal/presentation/templates))
- **Views**: View rendering logic ([internal/presentation/view/](mdc:internal/presentation/view))

## Frontend Structure (`src/`)

### Key Directories
- **JavaScript/TypeScript**: [src/js/](mdc:src/js) - Main application logic
- **Stylesheets**: [src/css/](mdc:src/css) - Styling and themes
- **Types**: [src/types/](mdc:src/types) - TypeScript type definitions

### Build Output
- **Dist Directory**: `dist/` - Built assets (embedded in binary)
- **Assets**: JavaScript, CSS, fonts, and other static files

## Dependency Injection

### Main Application Setup
The application uses Uber FX for dependency injection, configured in [main.go](mdc:main.go):

```go
app := fx.New(
    infrastructure.Module,
    domain.Module,
    application.Module,
    presentation.Module,
    fx.Invoke(setupApplication),
    fx.Invoke(setupLifecycle),
)
```

### Module Organization
- **Infrastructure Module**: Core infrastructure providers
- **Domain Module**: Domain services and repositories
- **Application Module**: Handlers and middleware
- **Presentation Module**: Template renderers

## Entry Point

### Main Application
The application entry point is [main.go](mdc:main.go) in the root directory (moved from `cmd/goforms/`).

### Key Responsibilities
- Dependency injection setup
- Embedded filesystem configuration
- Application lifecycle management
- Server startup and shutdown

## File Organization Patterns

### Go Files
- **Interfaces**: Defined in domain layer
- **Implementations**: Located in infrastructure layer
- **Services**: Business logic in domain, orchestration in application
- **Handlers**: HTTP handling in application layer

### Frontend Files
- **Components**: Modular JavaScript/TypeScript files
- **Styles**: CSS modules and component-specific styles
- **Types**: TypeScript definitions for type safety

## Configuration Management

### Environment Configuration
Configuration is centralized in [internal/infrastructure/config/config.go](mdc:internal/infrastructure/config/config.go) using environment variables with `GOFORMS_` prefix.

### Key Configuration Areas
- **Database**: Connection settings and migrations
- **Server**: Host, port, and server configuration
- **Assets**: Development vs production asset serving
- **Security**: Session, CSRF, and security settings

## Database Architecture

### Migration System
Database migrations are located in [migrations/](mdc:migrations) with support for both PostgreSQL and MariaDB.

### Repository Pattern
- **Interfaces**: Defined in domain layer
- **Implementations**: Located in infrastructure layer
- **Common Patterns**: Pagination, error handling, and transaction management

## Security Architecture

### Authentication & Authorization
- **Session Management**: Secure session handling
- **Middleware**: Authentication and access control middleware
- **CSRF Protection**: Cross-site request forgery protection

### Asset Security
- **Content Security Policy**: Security headers for static assets
- **Secure Headers**: X-Frame-Options, X-Content-Type-Options, etc.

## Development Workflow

### Local Development
1. **Backend**: Hot reload with Air
2. **Frontend**: Vite dev server with HMR
3. **Database**: Local PostgreSQL/MariaDB with migrations

### Production Deployment
1. **Build**: Frontend assets built to `dist/`
2. **Embed**: Assets embedded into Go binary
3. **Deploy**: Single binary deployment

## Best Practices

### Code Organization
1. **Layer Separation**: Maintain clear boundaries between layers
2. **Dependency Direction**: Dependencies point inward toward domain
3. **Interface Segregation**: Define interfaces in domain, implement in infrastructure
4. **Error Handling**: Use domain-specific errors throughout

### Development Practices
1. **Dependency Injection**: Use FX for all dependencies
2. **Configuration**: Centralize configuration management
3. **Logging**: Use structured logging with context
4. **Testing**: Unit tests for each layer

### Asset Management
1. **Development**: Use Vite dev server for hot reload
2. **Production**: Embed assets for single binary deployment
3. **Versioning**: Use asset hashing for cache busting
4. **Security**: Apply security headers to all assets
