---
description: 
globs: src/js/**/*.ts
alwaysApply: false
---
# Form Builder Implementation

The form builder is implemented using Form.io with custom templates from goforms-template package.

## Key Files
- [src/js/form-builder.ts](mdc:goforms/goforms/src/js/form-builder.ts): Main form builder implementation
- [src/js/schema/form-schema.ts](mdc:goforms/goforms/src/js/schema/form-schema.ts): Form schema type definitions
- [internal/presentation/templates/pages/edit_form.templ](mdc:goforms/goforms/internal/presentation/templates/pages/edit_form.templ): Form builder page template
- [goforms-template/src/templates/goforms/](mdc:goforms/goforms/goforms-template/src/templates/goforms): Custom form component templates

## Architecture
- Form builder is mounted in a div with `id="form-schema-builder"`
- Uses Form.io builder with custom goforms templates
- Templates are compiled from EJS to JavaScript using Gulp
- Vite handles template loading and bundling
- CSRF protection implemented for all API calls

## API Endpoints
- GET `/dashboard/forms/{id}/schema`: Load form schema
- PUT `/dashboard/forms/{id}/schema`: Save form schema
- PUT `/dashboard/forms/{id}`: Update form details

## Component Configuration
Basic components (enabled by default):
- textfield: Text input field
- textarea: Multi-line text input
- email: Email input with validation
- phoneNumber: Phone number input with formatting
- number: Numeric input
- password: Password input with masking
- checkbox: Single checkbox
- selectboxes: Multiple checkboxes
- select: Dropdown select
- radio: Radio button group
- button: Action button

Advanced components (disabled by default):
- file: File upload
- signature: Digital signature
- container: Field container
- dataGrid: Repeating grid
- datetime: Date and time picker
- day: Day picker
- time: Time picker
- currency: Currency input
- survey: Survey questions
- panel: Collapsible panel

## Template System
- Templates are written in EJS
- Compiled to JavaScript using Gulp
- Vite plugin handles template loading
- Custom styling through CSS modules
- Support for semantic UI components

## Schema Format
Our schema format is defined in [src/js/schema/form-schema.ts](mdc:goforms/goforms/src/js/schema/form-schema.ts) and includes:
- Form metadata (id, name, title)
- Component configuration
- Validation rules
- Custom properties
- Layout settings

## Testing Requirements
1. Form Builder UI initialization
2. Component rendering and configuration
3. Template compilation and loading
4. Schema persistence with CSRF
5. Form validation
6. Custom template integration
