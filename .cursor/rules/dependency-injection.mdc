---
description: 
globs: 
alwaysApply: true
---
# Dependency Injection Guide

This project uses Uber FX for dependency injection. The goal is to keep DI simple, clear, and maintainable while preserving implementation visibility.

## Core Principles

1. **Centralize Core Providers**
   - Core infrastructure (config, logger, DB, etc.) in `infrastructure.Module`
   - Domain services in `domain.Module`
   - Application services in `application.Module`
   - Keep app-specific wiring in `main.go`

2. **Keep Implementation Visible**
   - Don't bury implementation details in modules
   - Keep wiring explicit in `main.go`
   - Use clear, descriptive names for modules and providers

3. **Use fx Features Judiciously**
   - Use `fx.Provide` for all injectable components
   - Use `fx.In` for grouping dependencies only when it improves clarity
   - Use `fx.Out` only when a constructor must provide multiple values
   - Use `fx.Annotate` and `fx.As` only when interface casting or grouping is needed

4. **Error Handling and Lifecycle**
   - Add error handling for all `fx.Provide` functions
   - Add `OnStart/OnStop` hooks only for components that need resource management
   - Document any non-obvious DI patterns

## Module Organization

### main.go
```go
func main() {
    app := fx.New(
        infrastructure.Module, // config, logger, db, repo impls
        domain.Module,         // domain services, interfaces
        application.Module,    // handlers, middleware, app services
        presentation.Module,   // renderers, templates
        fx.Invoke(registerHandlersAndLifecycle),
    )
}
```

### infrastructure.Module
```go
var Module = fx.Options(
    fx.Provide(
        config.New,
        logging.NewFactory,
        validation.New,
        database.NewGormDB,
        // ... other core providers
    ),
)
```

### domain.Module
```go
var Module = fx.Options(
    fx.Provide(
        user.NewService,
        form.NewService,
        // ... other domain services
    ),
)
```

### application.Module
```go
var Module = fx.Options(
    fx.Provide(
        web.NewHandler,
        middleware.NewManager,
        // ... other application services
    ),
)
```

## Example Patterns

### Single Provider
```go
fx.Provide(NewUserService)
```

### Grouped Dependencies (fx.In)
```go
type HandlerDeps struct {
    fx.In
    UserService user.Service
    Logger      logging.Logger
}
```

### Multiple Outputs (fx.Out)
```go
type Stores struct {
    fx.Out
    UserStore user.Repository
    FormStore form.Repository
}

func NewStores(db *database.GormDB, logger logging.Logger) Stores {
    return Stores{
        UserStore: userstore.NewStore(db, logger),
        FormStore: formstore.NewStore(db, logger),
    }
}
```

### Interface Casting (fx.Annotate, fx.As)
```go
fx.Provide(
    fx.Annotate(
        NewUserService,
        fx.As(new(user.Service)),
    ),
)
```

### Lifecycle Hooks
```go
fx.Provide(
    func(lc fx.Lifecycle) (*Resource, error) {
        r := &Resource{}
        lc.Append(fx.Hook{
            OnStart: func(ctx context.Context) error {
                return r.Start()
            },
            OnStop: func(ctx context.Context) error {
                return r.Stop()
            },
        })
        return r, nil
    },
)
```

## Best Practices
- Keep wiring explicit in `main.go`
- Centralize core providers in infrastructure
- Use fx.In/fx.Out for complex constructors
- Document the DI graph with comments
- Test and iterate on wiring
- Avoid global variables and init() for DI
- Prefer explicit, constructor-based injection
- Only use advanced FX features when necessary
- Keep modules and providers as simple as possible
- Document any non-obvious DI patterns
