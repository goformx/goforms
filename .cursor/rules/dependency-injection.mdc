---
description: 
globs: 
alwaysApply: true
---
# Dependency Injection Guidelines

This project uses Uber's fx framework for dependency injection with the following organization:

## Module Structure
Each domain area should have its own module.go file:
```go
fx.Module("domain", 
  fx.Provide(
    NewService,
    NewRepository,
  ),
  fx.Invoke(
    RegisterHandlers,
  ),
)
```

## Component Guidelines

### Service Components
1. Define interfaces in domain layer
2. Implement in infrastructure layer
3. Use fx.Annotate for interface bindings
4. Provide clear lifecycle hooks

### Repository Components
1. Define interfaces in domain layer
2. Implement in infrastructure layer
3. Use proper connection pooling
4. Handle transactions appropriately

### Handler Components
1. Register routes in fx.Invoke
2. Use echo.Context
3. Implement proper validation
4. Return consistent responses

## Best Practices

1. Group related components in modules
2. Use clear, descriptive module names
3. Handle component lifecycle properly
4. Use proper error handling
5. Implement proper logging
6. Use interface embedding for better compatibility
7. Keep configuration validation close to the config package
8. Provide database connections at the infrastructure level
9. Use fx.Annotate for interface implementations
10. Keep middleware configuration in the infrastructure module

## Example Modules

### Infrastructure Module
```go
fx.Module("infrastructure",
  fx.Provide(
    config.New,
    database.NewDB,
    func(db *database.Database) *sqlx.DB {
        return db.DB
    },
    fx.Annotate(
        userstore.NewStore,
        fx.As(new(user.Store)),
    ),
    fx.Annotate(
        formstore.NewStore,
        fx.As(new(form.Store)),
    ),
    func(logger logging.Logger) *appmiddleware.SessionManager {
        return appmiddleware.NewSessionManager(logger)
    },
    func(
        core CoreParams,
        services ServiceParams,
        sessionManager *appmiddleware.SessionManager,
    ) *appmiddleware.Manager {
        return appmiddleware.New(&appmiddleware.ManagerConfig{
            Logger:         core.Logger,
            Security:       &core.Config.Security,
            UserService:    services.UserService,
            SessionManager: sessionManager,
            Config:         core.Config,
        })
    },
  ),
)
```

### Handler Module
```go
fx.Module("handlers",
  fx.Provide(
    AnnotateHandler(func(core CoreParams, services ServiceParams) *wh.DemoHandler {
        return wh.NewDemoHandler(core.Logger, core.Renderer, services.SubscriptionService)
    }),
  ),
)
```
