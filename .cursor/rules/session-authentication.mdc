---
description: 
globs: 
alwaysApply: false
---
# Session Authentication Patterns

## Overview
Session authentication in GoFormX follows a specific pattern where the session middleware always checks for valid sessions and sets user context, even for public paths, allowing handlers to make authentication decisions.

## Core Principles

1. **Always Check Sessions on Public Paths**
   - Session middleware checks for valid sessions on all non-exempt paths
   - User context is set if a valid session exists
   - Handlers can then decide how to handle authenticated users on public paths

2. **Path Exemption vs Public Paths**
   - **Exempt paths**: Skip session processing entirely (static files, API endpoints)
   - **Public paths**: Check sessions but don't require authentication (home page, login, signup)

## Implementation Patterns

### Session Middleware Logic
```go
// Always try to get session cookie and validate it
cookie, err := c.Cookie(sm.cookieName)
if err != nil {
    // For public paths, continue without authentication
    if sm.isPublicPath(path) {
        return next(c)
    }
    return sm.handleAuthError(c, "no session found")
}

// Store session in context (always do this if we have a valid session)
c.Set(string(context.SessionKey), session)
context.SetUserID(c, session.UserID)
context.SetEmail(c, session.Email)
context.SetRole(c, session.Role)
```

### Handler Authentication Check
```go
func (h *WebHandler) handleHome(c echo.Context) error {
    data := shared.BuildPageData(h.Config, c, "Home")
    if h.isAuthenticated(c) {
        return c.Redirect(StatusFound, "/dashboard")
    }
    return h.Renderer.Render(c, pages.Home(data))
}
```

### Authentication Helper
```go
func (h *WebHandler) isAuthenticated(c echo.Context) bool {
    return mwcontext.IsAuthenticated(c)
}
```

## Best Practices

1. **Public Path Handling**
   - Always check authentication on public paths
   - Redirect authenticated users to appropriate pages
   - Allow unauthenticated users to access public content

2. **Context Usage**
   - Use `mwcontext.IsAuthenticated(c)` to check authentication
   - Use `mwcontext.GetUserID(c)` to get user ID
   - Use `shared.GetCurrentUser(c)` to get full user object

3. **Redirect Patterns**
   - Use `http.StatusFound` (302) for temporary redirects
   - Use `http.StatusSeeOther` (303) for form submissions
   - Redirect authenticated users away from public pages

## Common Patterns

### Home Page Redirect
```go
func (h *WebHandler) handleHome(c echo.Context) error {
    if h.isAuthenticated(c) {
        return c.Redirect(StatusFound, "/dashboard")
    }
    return h.Renderer.Render(c, pages.Home(data))
}
```

### Login/Signup Redirect
```go
func (h *AuthHandler) Login(c echo.Context) error {
    if mwcontext.IsAuthenticated(c) {
        return c.Redirect(http.StatusSeeOther, "/dashboard")
    }
    return h.deps.Renderer.Render(c, pages.Login(data))
}
```

### User Context Access
```go
func (h *Handler) handleProtected(c echo.Context) error {
    userID, ok := mwcontext.GetUserID(c)
    if !ok {
        return c.Redirect(http.StatusSeeOther, "/login")
    }
    
    user, err := h.UserService.GetUserByID(c.Request().Context(), userID)
    if err != nil {
        return c.Redirect(http.StatusSeeOther, "/login")
    }
    
    // Use user data...
}
```

## Security Considerations

1. **Session Validation**
   - Always validate session expiration
   - Check session exists in storage
   - Clear invalid sessions

2. **Context Security**
   - Use type-safe context access
   - Validate user data before use
   - Handle missing context gracefully

3. **Redirect Security**
   - Use appropriate status codes
   - Validate redirect destinations
   - Prevent open redirects
