---
description: 
globs: *.ts,*.css,*.js,src/**/*
alwaysApply: false
---
# Frontend Development Guidelines

## Overview
The frontend is built using vanilla TypeScript with templ templates, not React as previously documented. It follows a modular architecture with a focus on type safety, performance, and maintainability.

## Core Technologies

1. **TypeScript**
   - Strict type checking
   - Interface definitions
   - Type guards
   - Utility types

2. **Vanilla TypeScript (No React)**
   - Modular TypeScript files
   - DOM manipulation
   - Event handling
   - Form validation

3. **Templ Templates**
   - Server-side HTML templates
   - Type-safe template rendering
   - Component-based structure
   - Template inheritance

4. **Styling**
   - CSS modules
   - PostCSS processing
   - Responsive design
   - Design system

5. **Build Tools**
   - Vite for development and building
   - ESLint for code quality
   - Prettier for formatting
   - TypeScript compiler

## Project Structure

```
src/
├── js/                    # TypeScript source files
│   ├── constants/        # Application constants
│   ├── handlers/         # Event handlers
│   ├── schema/          # Form schema definitions
│   ├── services/        # API services
│   ├── types/           # TypeScript type definitions
│   ├── utils/           # Utility functions
│   ├── validation/      # Validation logic
│   ├── form-builder.ts  # Form builder functionality
│   ├── form-handler.ts  # Form submission handling
│   ├── login.ts         # Login functionality
│   ├── main.ts          # Main entry point
│   └── validation.ts    # Validation utilities
├── css/                  # Stylesheets
│   ├── base/            # Base styles
│   ├── components/      # Component styles
│   ├── dashboard/       # Dashboard styles
│   ├── layouts/         # Layout styles
│   ├── pages/           # Page-specific styles
│   ├── themes/          # Theme styles
│   └── utils/           # Utility styles
└── types/               # TypeScript type definitions
```

## Build System

### Vite Configuration
- **Development**: Hot Module Replacement (HMR) with WebSocket
- **Production**: Asset optimization and minification
- **TypeScript**: ESNext target for modern browsers
- **CSS**: PostCSS processing with autoprefixer
- **Assets**: Automatic handling of fonts, images, and other static files

### Development Mode
- Assets served from Vite dev server at `http://localhost:3000`
- Hot Module Replacement (HMR) for instant updates
- Source maps for debugging
- Proxy configuration for API requests
- Fast refresh for TypeScript files

### Production Build
- Assets built to `dist/` directory
- CSS files in `dist/assets/css/`
- JavaScript files in `dist/assets/js/`
- Fonts and images in `dist/assets/`
- Manifest file for asset versioning
- Console and debugger statements removed

## Component Patterns

### TypeScript Modules
```typescript
// Modular TypeScript files
export class FormHandler {
    private form: HTMLFormElement;
    
    constructor(formId: string) {
        this.form = document.getElementById(formId) as HTMLFormElement;
        this.setupListeners();
    }
    
    private setupListeners(): void {
        this.form.addEventListener('submit', this.handleSubmit.bind(this));
    }
    
    private async handleSubmit(event: Event): Promise<void> {
        // Form submission logic
    }
}
```

### Event Handling
```typescript
// Event-driven architecture
class EventManager {
    private listeners: Map<string, Function[]> = new Map();
    
    on(event: string, callback: Function): void {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event)!.push(callback);
    }
    
    emit(event: string, data?: any): void {
        const callbacks = this.listeners.get(event) || [];
        callbacks.forEach(callback => callback(data));
    }
}
```

## State Management

### Local State
- Module-level state management
- Event-driven state updates
- DOM state synchronization
- Form state handling

### Server State
- API service modules
- Request/response caching
- Error handling
- Loading states

### Form State
- Real-time validation
- Error display
- Success feedback
- Form reset functionality

## API Integration

### API Client
```typescript
// Type-safe API service
export class FormService {
    private baseURL: string;
    
    constructor() {
        this.baseURL = window.location.origin;
    }
    
    async createForm(data: FormData): Promise<Form> {
        const response = await fetch(`${this.baseURL}/api/v1/forms`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Csrf-Token': this.getCSRFToken(),
            },
            body: JSON.stringify(data),
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return response.json();
    }
}
```

### Authentication
- CSRF token handling
- Session management
- Protected route handling
- Error handling

### Error Handling
- Structured error responses
- User-friendly error messages
- Error logging
- Graceful degradation

## Validation

### Client-Side Validation
```typescript
// Zod-based validation
import { z } from "zod";

const formSchema = z.object({
    title: z.string().min(3).max(100),
    email: z.string().email(),
    message: z.string().max(500),
});

export const validation = {
    validateForm(form: HTMLFormElement, schema: z.ZodType): ValidationResult {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        
        try {
            const validated = schema.parse(data);
            return { success: true, data: validated };
        } catch (error) {
            return { success: false, error };
        }
    }
};
```

### Real-Time Validation
- Field-level validation
- Immediate feedback
- Error display
- Success indicators

## Performance

### Code Organization
- Modular TypeScript files
- Lazy loading where appropriate
- Efficient DOM queries
- Event delegation

### Asset Optimization
- Vite's built-in optimization
- CSS minification
- JavaScript minification
- Asset hashing for cache busting

### Caching
- Browser caching strategies
- API response caching
- Local storage for user preferences
- Service worker for offline support

## Security

### Best Practices
- CSRF protection
- Input sanitization
- XSS prevention
- Secure headers

### Authentication
- CSRF token management
- Session handling
- Secure storage
- Logout handling

## Development Workflow

### Code Quality
- ESLint rules for TypeScript
- Prettier configuration
- TypeScript strict mode
- Git hooks for pre-commit checks

### Build Process
- Development server with HMR
- Production build optimization
- Asset optimization
- Environment configuration

### Testing
- Unit tests for utility functions
- Integration tests for API services
- E2E tests for critical flows
- Performance testing

## Best Practices

### Code Organization
1. **Modular Structure**: Keep files focused and single-purpose
2. **Type Safety**: Use TypeScript interfaces and types
3. **Error Handling**: Implement comprehensive error handling
4. **Performance**: Optimize for performance and user experience

### Development Practices
1. **TypeScript**: Use strict TypeScript configuration
2. **ESLint**: Follow linting rules for code quality
3. **Prettier**: Maintain consistent code formatting
4. **Testing**: Write tests for critical functionality

### Asset Management
1. **Development**: Use Vite dev server for hot reload
2. **Production**: Optimize assets for production deployment
3. **Versioning**: Use asset hashing for cache busting
4. **Security**: Apply security headers to all assets
