---
description: 
globs: *.ts,*.css,*.js,src/**/*
alwaysApply: false
---
# Frontend Development Guidelines

## Overview
The frontend uses vanilla TypeScript with templ templates, following a feature-based architecture with service separation and path mapping.

## Core Technologies
- **TypeScript**: Strict mode with path mapping
- **Vanilla TypeScript**: No React, modular DOM manipulation
- **Templ Templates**: Server-side HTML templates
- **Vite**: Build tool with HMR
- **CSS**: Component-based styling

## Project Structure
```
src/
├── js/                    # TypeScript source files
│   ├── core/             # Core functionality (config, errors, http-client)
│   ├── features/         # Feature-based organization
│   ├── pages/            # Page-level components
│   └── shared/           # Shared utilities and types
└── css/                  # Stylesheets
```

## Import Standards

### Path Mapping
```typescript
// ✅ Use path mapping
import { FormBuilderError } from "@/core/errors/form-builder-error";
import { HttpClient } from "@/core/http-client";
import { FormService } from "@/features/forms/services/form-service";

// ❌ Avoid relative imports
import { FormBuilderError } from "../../../core/errors/form-builder-error";
```

### Path Mapping Configuration
- `@/core/*` - Core application functionality
- `@/features/*` - Feature-specific code
- `@/shared/*` - Shared utilities and types

## Service Architecture

### Three-Tier Service Pattern
```typescript
// 1. API Service - HTTP operations only
export class FormApiService {
  async getSchema(formId: string): Promise<FormSchema> {
    const response = await HttpClient.get(`/api/forms/${formId}/schema`);
    return response.json();
  }
}

// 2. UI Service - DOM manipulation only
export class FormUIService {
  updateFormCard(formId: string, updates: any): void {
    const card = document.querySelector(`[data-form-id="${formId}"]`);
    if (card) {
      // Update card content
    }
  }
}

// 3. Orchestration Service - Coordinates API and UI
export class FormService {
  private apiService: FormApiService;
  private uiService: FormUIService;
  
  async updateFormDetails(formId: string, details: any): Promise<void> {
    await this.apiService.updateFormDetails(formId, details);
    this.uiService.updateFormCard(formId, details);
  }
}
```

## HTTP Client Standards

### Consistent HTTP Operations
```typescript
// ✅ Use HttpClient
const response = await HttpClient.get(url);
const response = await HttpClient.post(url, data);
const response = await HttpClient.put(url, data);
const response = await HttpClient.delete(url);

// ❌ Avoid direct fetch calls
const response = await fetch(url, { /* ... */ });
```

### Standardized Response Format
The HTTP Client automatically handles the standardized API response format:

```typescript
// All API responses follow this structure:
interface ApiResponse<T> {
  success: boolean;
  message?: string;
  data?: T;
  errors?: Record<string, string[]>;
}

// Success response handling
const response = await HttpClient.get('/api/forms/123');
// response.data contains the actual payload
// response.success === true

// Error response handling
try {
  const response = await HttpClient.get('/api/forms/123');
  // HttpClient automatically throws on error responses
} catch (error) {
  // error.message contains the error message from the API
  throw new FormBuilderError("API Error", error.message);
}
```

### Error Handling
```typescript
try {
  const response = await HttpClient.get(url);
  // HttpClient handles standardized responses automatically
  return response; // Already processed and validated
} catch (error) {
  throw new FormBuilderError("Network error", "Check your connection.");
}
```

## State Management

### Proper State Management
```typescript
// ✅ State management class
export class FormState {
  private state = new Map<string, any>();
  
  set(key: string, value: any): void {
    this.state.set(key, value);
  }
  
  get<T>(key: string): T | undefined {
    return this.state.get(key) as T | undefined;
  }
}

// ❌ Avoid global variables
window.formBuilder = builder;
```

## Build System

### Vite Configuration
- **Development**: HMR with WebSocket
- **Production**: Asset optimization and minification
- **TypeScript**: ESNext target
- **CSS**: PostCSS with autoprefixer
- **Path Mapping**: Configured in tsconfig.json and vite.config.ts

## Best Practices

1. **Feature-based Organization**: Organize by features, not types
2. **Service Separation**: Separate API, UI, and business logic
3. **Path Mapping**: Use consistent import paths
4. **State Management**: Avoid global variables
5. **Error Handling**: Use consistent error patterns
6. **Type Safety**: Use strict TypeScript configuration
