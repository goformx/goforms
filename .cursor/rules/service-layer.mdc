---
description: 
globs: internal/**/services/**/*.go
alwaysApply: false
---
# Service Layer Architecture

## Overview
The service layer implements domain-specific business logic with clear separation of concerns. Services are organized by domain (form, user, etc.) and follow a consistent pattern across both backend and frontend.

## Core Components

1. Backend Service Interface
   - Defined in domain package
   - Focused on business operations
   - Clear method signatures
   - Example from form service:
   ```go
   type Service interface {
       CreateForm(ctx context.Context, userID string, form *model.Form) error
       GetForm(ctx context.Context, id string) (*model.Form, error)
       GetUserForms(ctx context.Context, userID string) ([]*model.Form, error)
       UpdateForm(ctx context.Context, userID string, form *model.Form) error
       DeleteForm(ctx context.Context, userID, id string) error
   }
   ```

2. Frontend Service Interface
   - TypeScript interfaces
   - API client methods
   - Error handling
   - Example:
   ```typescript
   interface FormService {
       createForm(userId: string, form: Form): Promise<Form>;
       getForm(id: string): Promise<Form>;
       getUserForms(userId: string): Promise<Form[]>;
       updateForm(userId: string, form: Form): Promise<Form>;
       deleteForm(userId: string, id: string): Promise<void>;
   }
   ```

## Best Practices

1. Error Handling
   - Use domain error codes
   - Provide context in errors
   - Log errors with details
   - Handle frontend errors gracefully

2. Input Validation
   - Sanitize user input
   - Validate domain rules
   - Check permissions
   - Use TypeScript types

3. Event Publishing
   - Publish domain events
   - Handle publish errors
   - Log failures
   - Frontend event handling

4. Context Usage
   - Pass context through
   - Set timeouts
   - Cancel operations
   - Handle loading states

5. Logging
   - Use structured logging
   - Include user context
   - Log at appropriate levels
   - Frontend error tracking

## Common Patterns

1. Repository Pattern
   - Abstract data access
   - Domain-specific operations
   - Error handling
   - Frontend data fetching

2. Event Publishing
   - Domain events
   - Event handlers
   - Error handling
   - Frontend state management

## Testing Guidelines

1. Unit Tests
   - Mock dependencies
   - Test error cases
   - Verify behavior
   - Frontend component tests

2. Integration Tests
   - Use test database
   - Test full flow
   - Clean up resources
   - Frontend integration tests

## Service Dependencies

1. Domain Services
   - Form service
   - User service
   - Submission service
   - Template service

2. Infrastructure
   - Database
   - Cache
   - File storage
   - External services

3. Cross-Cutting Concerns
   - Logging
   - Metrics
   - Error handling
   - Configuration

## Frontend Considerations

1. State Management
   - Use React Query
   - Handle loading states
   - Error boundaries
   - Optimistic updates

2. API Integration
   - Type-safe API clients
   - Error handling
   - Retry logic
   - Caching

3. Performance
   - Code splitting
   - Lazy loading
   - Memoization
   - Bundle optimization

## Security Guidelines

1. Input Validation
   - Validate all input
   - Use domain rules
   - Handle edge cases
   - XSS prevention

2. Error Handling
   - Don't expose internals
   - Use domain errors
   - Log appropriately
   - User-friendly messages

3. Access Control
   - Check permissions
   - Validate access
   - Handle unauthorized
   - Frontend auth checks
