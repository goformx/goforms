---
description: 
globs: internal/**/services/**/*.go
alwaysApply: false
---
# Service Layer Architecture

## Overview
The service layer in GoFormX follows a clean architecture pattern with clear separation of concerns. Services are organized by domain and functionality, with a focus on maintainability and testability.

## Core Principles

1. Interface-Based Design
   - Services are defined by interfaces
   - Dependencies are injected
   - Implementation details are hidden
   - Easy to mock for testing

2. Domain-Driven Organization
   - Services are grouped by domain
   - Clear boundaries between domains
   - Domain-specific error handling
   - Domain-specific validation

3. Clean Architecture
   - Services depend on interfaces
   - Domain models are independent
   - Infrastructure concerns are isolated
   - Business logic is centralized

## Service Structure

### Form Operations Service
Located in [internal/application/services/form_operations/service.go](mdc:goforms/goforms/internal/application/services/form_operations/service.go):

```go
type Service interface {
    ValidateAndBindFormData(c echo.Context, form *model.Form) (*model.FormSubmission, error)
    // ... other methods
}

type service struct {
    formService form.Service
    logger      *zap.Logger
}
```

### Page Data Service
Located in [internal/application/services/page_data/service.go](mdc:goforms/goforms/internal/application/services/page_data/service.go):

```go
type Service interface {
    GetDashboardData(usr *user.User) (*shared.PageData, error)
    GetFormData(usr *user.User, form *model.Form) (*shared.PageData, error)
    // ... other methods
}
```

## Best Practices

1. Interface Design
   - Keep interfaces focused
   - Use meaningful names
   - Document behavior
   - Follow Go conventions

2. Error Handling
   - Use domain errors
   - Provide context
   - Handle edge cases
   - Log appropriately

3. Validation
   - Validate input early
   - Use domain rules
   - Provide clear messages
   - Handle all cases

4. Logging
   - Use structured logging
   - Include context
   - Log at appropriate levels
   - Follow logging guidelines

5. Testing
   - Write unit tests
   - Use mocks
   - Test edge cases
   - Follow testing guidelines

## Service Dependencies

1. Domain Services
   - Form service
   - User service
   - Submission service
   - Template service

2. Infrastructure
   - Database
   - Cache
   - File storage
   - External services

3. Cross-Cutting Concerns
   - Logging
   - Metrics
   - Error handling
   - Configuration

## Service Implementation

1. Constructor Pattern
   - NewService function
   - Dependency injection
   - Configuration validation
   - Error handling

2. Method Implementation
   - Clear responsibility
   - Error handling
   - Input validation
   - Proper logging

3. Error Handling
   - Use domain errors
   - Provide context
   - Handle all cases
   - Log appropriately

4. Logging
   - Structured logging
   - Context inclusion
   - Appropriate levels
   - Clear messages

## Testing Guidelines

1. Unit Tests
   - Test each method
   - Use mocks
   - Test edge cases
   - Follow testing guidelines

2. Integration Tests
   - Test service integration
   - Use test database
   - Clean up resources
   - Follow testing guidelines

3. Test Coverage
   - Aim for high coverage
   - Test error cases
   - Test edge cases
   - Follow testing guidelines

## Performance Considerations

1. Caching
   - Cache expensive operations
   - Use appropriate TTL
   - Handle cache misses
   - Monitor cache usage

2. Database Operations
   - Use transactions
   - Optimize queries
   - Handle timeouts
   - Monitor performance

3. External Services
   - Handle timeouts
   - Implement retries
   - Monitor performance
   - Handle failures

## Security Guidelines

1. Input Validation
   - Validate all input
   - Use domain rules
   - Handle edge cases
   - Follow security guidelines

2. Error Handling
   - Don't expose internals
   - Use domain errors
   - Log appropriately
   - Follow security guidelines

3. Access Control
   - Check permissions
   - Validate access
   - Handle unauthorized
   - Follow security guidelines
