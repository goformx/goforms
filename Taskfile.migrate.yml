# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  MIGRATIONS_DIR: migrations
  # MariaDB/MySQL variables
  DB_USER: '{{.GOFORMS_MARIADB_USER | default "goforms"}}'
  DB_PASSWORD: '{{.GOFORMS_MARIADB_PASSWORD | default "goforms"}}'
  DB_NAME: '{{.GOFORMS_MARIADB_NAME | default "goforms"}}'
  DB_HOST: '{{.GOFORMS_MARIADB_HOST | default "mariadb"}}'
  DB_PORT: '{{.GOFORMS_MARIADB_PORT | default "3306"}}'
  DB_URL: mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}?multiStatements=true

  # PostgreSQL variables
  DB_PG_USER: '{{.GOFORMS_POSTGRES_USER | default "goforms"}}'
  DB_PG_PASSWORD: '{{.GOFORMS_POSTGRES_PASSWORD | default "goforms"}}'
  DB_PG_NAME: '{{.GOFORMS_POSTGRES_DB | default "goforms"}}'
  DB_PG_HOST: '{{.GOFORMS_POSTGRES_HOST | default "postgres"}}'
  DB_PG_PORT: '{{.GOFORMS_POSTGRES_PORT | default "5432"}}'
  DB_PG_SSLMODE: '{{.GOFORMS_POSTGRES_SSLMODE | default "disable"}}'
  DB_PG_URL: postgresql://{{.DB_PG_USER}}:{{.DB_PG_PASSWORD}}@{{.DB_PG_HOST}}:{{.DB_PG_PORT}}/{{.DB_PG_NAME}}?sslmode={{.DB_PG_SSLMODE}}

tasks:
  default:
    desc: Show available migration commands
    cmds:
      - task --list

  create:
    desc: Create a new migration
    requires:
      vars: [name]
    cmds:
      - migrate create -ext sql -dir {{.MIGRATIONS_DIR}} -seq {{.name}}

  mariadb:up:
    desc: Run all pending migrations (MariaDB/MySQL)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" up

  mariadb:down:
    desc: Rollback the last migration (MariaDB/MySQL)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" down

  mariadb:down-all:
    desc: Rollback all migrations (MariaDB/MySQL)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" down -all

  mariadb:version:
    desc: Show current migration version (MariaDB/MySQL)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" version

  mariadb:force:
    desc: Force migration version (MariaDB/MySQL)
    requires:
      vars: [version]
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" force {{.version}}

  mariadb:fix-dirty:
    desc: Fix dirty database state (MariaDB/MySQL)
    cmds:
      - |
        CURRENT_VERSION=$(migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" version | cut -d' ' -f1)
        migrate -path {{.MIGRATIONS_DIR}}/mariadb -database "{{.DB_URL}}" force $CURRENT_VERSION

  pg:up:
    desc: Run all pending migrations (Postgres)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" up

  pg:down:
    desc: Rollback the last migration (Postgres)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" down

  pg:down-all:
    desc: Rollback all migrations (Postgres)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" down -all

  pg:version:
    desc: Show current migration version (Postgres)
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" version

  pg:force:
    desc: Force migration version (Postgres)
    requires:
      vars: [version]
    cmds:
      - migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" force {{.version}}

  pg:fix-dirty:
    desc: Fix dirty database state (Postgres)
    cmds:
      - |
        CURRENT_VERSION=$(migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" version | cut -d' ' -f1)
        migrate -path {{.MIGRATIONS_DIR}}/postgres -database "{{.DB_PG_URL}}" force $CURRENT_VERSION 