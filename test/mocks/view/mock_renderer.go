// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/view/renderer.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/presentation/view/renderer.go -destination=test/mocks/view/mock_renderer.go -package=view
//

// Package view is a generated GoMock package.
package view

import (
	reflect "reflect"

	templ "github.com/a-h/templ"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockRenderer is a mock of Renderer interface.
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
	isgomock struct{}
}

// MockRendererMockRecorder is the mock recorder for MockRenderer.
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance.
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// Render mocks base method.
func (m *MockRenderer) Render(c echo.Context, t templ.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", c, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockRendererMockRecorder) Render(c, t any) *MockRendererRenderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockRenderer)(nil).Render), c, t)
	return &MockRendererRenderCall{Call: call}
}

// MockRendererRenderCall wrap *gomock.Call
type MockRendererRenderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockRendererRenderCall) Return(arg0 error) *MockRendererRenderCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockRendererRenderCall) Do(f func(echo.Context, templ.Component) error) *MockRendererRenderCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockRendererRenderCall) DoAndReturn(f func(echo.Context, templ.Component) error) *MockRendererRenderCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
