// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/form/service.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/domain/form/service.go -destination=test/mocks/form/mock_service.go -package=form
//

// Package form is a generated GoMock package.
package form

import (
	context "context"
	reflect "reflect"

	model "github.com/goformx/goforms/internal/domain/form/model"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateForm mocks base method.
func (m *MockService) CreateForm(ctx context.Context, userID string, form *model.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForm", ctx, userID, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateForm indicates an expected call of CreateForm.
func (mr *MockServiceMockRecorder) CreateForm(ctx, userID, form any) *MockServiceCreateFormCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForm", reflect.TypeOf((*MockService)(nil).CreateForm), ctx, userID, form)
	return &MockServiceCreateFormCall{Call: call}
}

// MockServiceCreateFormCall wrap *gomock.Call
type MockServiceCreateFormCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateFormCall) Return(arg0 error) *MockServiceCreateFormCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateFormCall) Do(f func(context.Context, string, *model.Form) error) *MockServiceCreateFormCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateFormCall) DoAndReturn(f func(context.Context, string, *model.Form) error) *MockServiceCreateFormCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteForm mocks base method.
func (m *MockService) DeleteForm(ctx context.Context, userID, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForm", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForm indicates an expected call of DeleteForm.
func (mr *MockServiceMockRecorder) DeleteForm(ctx, userID, id any) *MockServiceDeleteFormCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForm", reflect.TypeOf((*MockService)(nil).DeleteForm), ctx, userID, id)
	return &MockServiceDeleteFormCall{Call: call}
}

// MockServiceDeleteFormCall wrap *gomock.Call
type MockServiceDeleteFormCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteFormCall) Return(arg0 error) *MockServiceDeleteFormCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteFormCall) Do(f func(context.Context, string, string) error) *MockServiceDeleteFormCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteFormCall) DoAndReturn(f func(context.Context, string, string) error) *MockServiceDeleteFormCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetForm mocks base method.
func (m *MockService) GetForm(ctx context.Context, id string) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForm", ctx, id)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForm indicates an expected call of GetForm.
func (mr *MockServiceMockRecorder) GetForm(ctx, id any) *MockServiceGetFormCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForm", reflect.TypeOf((*MockService)(nil).GetForm), ctx, id)
	return &MockServiceGetFormCall{Call: call}
}

// MockServiceGetFormCall wrap *gomock.Call
type MockServiceGetFormCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetFormCall) Return(arg0 *model.Form, arg1 error) *MockServiceGetFormCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetFormCall) Do(f func(context.Context, string) (*model.Form, error)) *MockServiceGetFormCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetFormCall) DoAndReturn(f func(context.Context, string) (*model.Form, error)) *MockServiceGetFormCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFormSubmissions mocks base method.
func (m *MockService) GetFormSubmissions(ctx context.Context, formID string) ([]*model.FormSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormSubmissions", ctx, formID)
	ret0, _ := ret[0].([]*model.FormSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormSubmissions indicates an expected call of GetFormSubmissions.
func (mr *MockServiceMockRecorder) GetFormSubmissions(ctx, formID any) *MockServiceGetFormSubmissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormSubmissions", reflect.TypeOf((*MockService)(nil).GetFormSubmissions), ctx, formID)
	return &MockServiceGetFormSubmissionsCall{Call: call}
}

// MockServiceGetFormSubmissionsCall wrap *gomock.Call
type MockServiceGetFormSubmissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetFormSubmissionsCall) Return(arg0 []*model.FormSubmission, arg1 error) *MockServiceGetFormSubmissionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetFormSubmissionsCall) Do(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockServiceGetFormSubmissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetFormSubmissionsCall) DoAndReturn(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockServiceGetFormSubmissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserForms mocks base method.
func (m *MockService) GetUserForms(ctx context.Context, userID string) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForms", ctx, userID)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForms indicates an expected call of GetUserForms.
func (mr *MockServiceMockRecorder) GetUserForms(ctx, userID any) *MockServiceGetUserFormsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForms", reflect.TypeOf((*MockService)(nil).GetUserForms), ctx, userID)
	return &MockServiceGetUserFormsCall{Call: call}
}

// MockServiceGetUserFormsCall wrap *gomock.Call
type MockServiceGetUserFormsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetUserFormsCall) Return(arg0 []*model.Form, arg1 error) *MockServiceGetUserFormsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetUserFormsCall) Do(f func(context.Context, string) ([]*model.Form, error)) *MockServiceGetUserFormsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetUserFormsCall) DoAndReturn(f func(context.Context, string) ([]*model.Form, error)) *MockServiceGetUserFormsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateForm mocks base method.
func (m *MockService) UpdateForm(ctx context.Context, userID string, form *model.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForm", ctx, userID, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForm indicates an expected call of UpdateForm.
func (mr *MockServiceMockRecorder) UpdateForm(ctx, userID, form any) *MockServiceUpdateFormCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForm", reflect.TypeOf((*MockService)(nil).UpdateForm), ctx, userID, form)
	return &MockServiceUpdateFormCall{Call: call}
}

// MockServiceUpdateFormCall wrap *gomock.Call
type MockServiceUpdateFormCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateFormCall) Return(arg0 error) *MockServiceUpdateFormCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateFormCall) Do(f func(context.Context, string, *model.Form) error) *MockServiceUpdateFormCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateFormCall) DoAndReturn(f func(context.Context, string, *model.Form) error) *MockServiceUpdateFormCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
