// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/form/repository.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/domain/form/repository.go -destination=test/mocks/form/mock_repository.go -package=form
//

// Package form is a generated GoMock package.
package form

import (
	context "context"
	reflect "reflect"

	model "github.com/goformx/goforms/internal/domain/form/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx any) *MockRepositoryCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx)
	return &MockRepositoryCountCall{Call: call}
}

// MockRepositoryCountCall wrap *gomock.Call
type MockRepositoryCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryCountCall) Return(arg0 int, arg1 error) *MockRepositoryCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryCountCall) Do(f func(context.Context) (int, error)) *MockRepositoryCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryCountCall) DoAndReturn(f func(context.Context) (int, error)) *MockRepositoryCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, form *model.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, form any) *MockRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, form)
	return &MockRepositoryCreateCall{Call: call}
}

// MockRepositoryCreateCall wrap *gomock.Call
type MockRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryCreateCall) Return(arg0 error) *MockRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryCreateCall) Do(f func(context.Context, *model.Form) error) *MockRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryCreateCall) DoAndReturn(f func(context.Context, *model.Form) error) *MockRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *MockRepositoryDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
	return &MockRepositoryDeleteCall{Call: call}
}

// MockRepositoryDeleteCall wrap *gomock.Call
type MockRepositoryDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryDeleteCall) Return(arg0 error) *MockRepositoryDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryDeleteCall) Do(f func(context.Context, string) error) *MockRepositoryDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockRepositoryDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActiveForms mocks base method.
func (m *MockRepository) GetActiveForms(ctx context.Context) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveForms", ctx)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveForms indicates an expected call of GetActiveForms.
func (mr *MockRepositoryMockRecorder) GetActiveForms(ctx any) *MockRepositoryGetActiveFormsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveForms", reflect.TypeOf((*MockRepository)(nil).GetActiveForms), ctx)
	return &MockRepositoryGetActiveFormsCall{Call: call}
}

// MockRepositoryGetActiveFormsCall wrap *gomock.Call
type MockRepositoryGetActiveFormsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetActiveFormsCall) Return(arg0 []*model.Form, arg1 error) *MockRepositoryGetActiveFormsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetActiveFormsCall) Do(f func(context.Context) ([]*model.Form, error)) *MockRepositoryGetActiveFormsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetActiveFormsCall) DoAndReturn(f func(context.Context) ([]*model.Form, error)) *MockRepositoryGetActiveFormsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id string) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *MockRepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
	return &MockRepositoryGetByIDCall{Call: call}
}

// MockRepositoryGetByIDCall wrap *gomock.Call
type MockRepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetByIDCall) Return(arg0 *model.Form, arg1 error) *MockRepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetByIDCall) Do(f func(context.Context, string) (*model.Form, error)) *MockRepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetByIDCall) DoAndReturn(f func(context.Context, string) (*model.Form, error)) *MockRepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByUserID mocks base method.
func (m *MockRepository) GetByUserID(ctx context.Context, userID string) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockRepositoryMockRecorder) GetByUserID(ctx, userID any) *MockRepositoryGetByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockRepository)(nil).GetByUserID), ctx, userID)
	return &MockRepositoryGetByUserIDCall{Call: call}
}

// MockRepositoryGetByUserIDCall wrap *gomock.Call
type MockRepositoryGetByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetByUserIDCall) Return(arg0 []*model.Form, arg1 error) *MockRepositoryGetByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetByUserIDCall) Do(f func(context.Context, string) ([]*model.Form, error)) *MockRepositoryGetByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetByUserIDCall) DoAndReturn(f func(context.Context, string) ([]*model.Form, error)) *MockRepositoryGetByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFormSubmissions mocks base method.
func (m *MockRepository) GetFormSubmissions(ctx context.Context, formID string) ([]*model.FormSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormSubmissions", ctx, formID)
	ret0, _ := ret[0].([]*model.FormSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormSubmissions indicates an expected call of GetFormSubmissions.
func (mr *MockRepositoryMockRecorder) GetFormSubmissions(ctx, formID any) *MockRepositoryGetFormSubmissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormSubmissions", reflect.TypeOf((*MockRepository)(nil).GetFormSubmissions), ctx, formID)
	return &MockRepositoryGetFormSubmissionsCall{Call: call}
}

// MockRepositoryGetFormSubmissionsCall wrap *gomock.Call
type MockRepositoryGetFormSubmissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetFormSubmissionsCall) Return(arg0 []*model.FormSubmission, arg1 error) *MockRepositoryGetFormSubmissionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetFormSubmissionsCall) Do(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockRepositoryGetFormSubmissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetFormSubmissionsCall) DoAndReturn(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockRepositoryGetFormSubmissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFormsByStatus mocks base method.
func (m *MockRepository) GetFormsByStatus(ctx context.Context, active bool) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormsByStatus", ctx, active)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormsByStatus indicates an expected call of GetFormsByStatus.
func (mr *MockRepositoryMockRecorder) GetFormsByStatus(ctx, active any) *MockRepositoryGetFormsByStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormsByStatus", reflect.TypeOf((*MockRepository)(nil).GetFormsByStatus), ctx, active)
	return &MockRepositoryGetFormsByStatusCall{Call: call}
}

// MockRepositoryGetFormsByStatusCall wrap *gomock.Call
type MockRepositoryGetFormsByStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetFormsByStatusCall) Return(arg0 []*model.Form, arg1 error) *MockRepositoryGetFormsByStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetFormsByStatusCall) Do(f func(context.Context, bool) ([]*model.Form, error)) *MockRepositoryGetFormsByStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetFormsByStatusCall) DoAndReturn(f func(context.Context, bool) ([]*model.Form, error)) *MockRepositoryGetFormsByStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, offset, limit int) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, offset, limit any) *MockRepositoryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, offset, limit)
	return &MockRepositoryListCall{Call: call}
}

// MockRepositoryListCall wrap *gomock.Call
type MockRepositoryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryListCall) Return(arg0 []*model.Form, arg1 error) *MockRepositoryListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryListCall) Do(f func(context.Context, int, int) ([]*model.Form, error)) *MockRepositoryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryListCall) DoAndReturn(f func(context.Context, int, int) ([]*model.Form, error)) *MockRepositoryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Search mocks base method.
func (m *MockRepository) Search(ctx context.Context, query string, offset, limit int) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, offset, limit)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMockRecorder) Search(ctx, query, offset, limit any) *MockRepositorySearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), ctx, query, offset, limit)
	return &MockRepositorySearchCall{Call: call}
}

// MockRepositorySearchCall wrap *gomock.Call
type MockRepositorySearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositorySearchCall) Return(arg0 []*model.Form, arg1 error) *MockRepositorySearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositorySearchCall) Do(f func(context.Context, string, int, int) ([]*model.Form, error)) *MockRepositorySearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositorySearchCall) DoAndReturn(f func(context.Context, string, int, int) ([]*model.Form, error)) *MockRepositorySearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, form *model.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, form any) *MockRepositoryUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, form)
	return &MockRepositoryUpdateCall{Call: call}
}

// MockRepositoryUpdateCall wrap *gomock.Call
type MockRepositoryUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryUpdateCall) Return(arg0 error) *MockRepositoryUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryUpdateCall) Do(f func(context.Context, *model.Form) error) *MockRepositoryUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryUpdateCall) DoAndReturn(f func(context.Context, *model.Form) error) *MockRepositoryUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSubmissionStore is a mock of SubmissionStore interface.
type MockSubmissionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionStoreMockRecorder
	isgomock struct{}
}

// MockSubmissionStoreMockRecorder is the mock recorder for MockSubmissionStore.
type MockSubmissionStoreMockRecorder struct {
	mock *MockSubmissionStore
}

// NewMockSubmissionStore creates a new mock instance.
func NewMockSubmissionStore(ctrl *gomock.Controller) *MockSubmissionStore {
	mock := &MockSubmissionStore{ctrl: ctrl}
	mock.recorder = &MockSubmissionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionStore) EXPECT() *MockSubmissionStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionStore) Create(ctx context.Context, submission *model.FormSubmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, submission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionStoreMockRecorder) Create(ctx, submission any) *MockSubmissionStoreCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionStore)(nil).Create), ctx, submission)
	return &MockSubmissionStoreCreateCall{Call: call}
}

// MockSubmissionStoreCreateCall wrap *gomock.Call
type MockSubmissionStoreCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubmissionStoreCreateCall) Return(arg0 error) *MockSubmissionStoreCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubmissionStoreCreateCall) Do(f func(context.Context, *model.FormSubmission) error) *MockSubmissionStoreCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubmissionStoreCreateCall) DoAndReturn(f func(context.Context, *model.FormSubmission) error) *MockSubmissionStoreCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSubmissionStore) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubmissionStoreMockRecorder) Delete(ctx, id any) *MockSubmissionStoreDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubmissionStore)(nil).Delete), ctx, id)
	return &MockSubmissionStoreDeleteCall{Call: call}
}

// MockSubmissionStoreDeleteCall wrap *gomock.Call
type MockSubmissionStoreDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubmissionStoreDeleteCall) Return(arg0 error) *MockSubmissionStoreDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubmissionStoreDeleteCall) Do(f func(context.Context, string) error) *MockSubmissionStoreDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubmissionStoreDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockSubmissionStoreDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByFormID mocks base method.
func (m *MockSubmissionStore) GetByFormID(ctx context.Context, formID string) ([]*model.FormSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFormID", ctx, formID)
	ret0, _ := ret[0].([]*model.FormSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFormID indicates an expected call of GetByFormID.
func (mr *MockSubmissionStoreMockRecorder) GetByFormID(ctx, formID any) *MockSubmissionStoreGetByFormIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFormID", reflect.TypeOf((*MockSubmissionStore)(nil).GetByFormID), ctx, formID)
	return &MockSubmissionStoreGetByFormIDCall{Call: call}
}

// MockSubmissionStoreGetByFormIDCall wrap *gomock.Call
type MockSubmissionStoreGetByFormIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubmissionStoreGetByFormIDCall) Return(arg0 []*model.FormSubmission, arg1 error) *MockSubmissionStoreGetByFormIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubmissionStoreGetByFormIDCall) Do(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockSubmissionStoreGetByFormIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubmissionStoreGetByFormIDCall) DoAndReturn(f func(context.Context, string) ([]*model.FormSubmission, error)) *MockSubmissionStoreGetByFormIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockSubmissionStore) GetByID(ctx context.Context, id string) (*model.FormSubmission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.FormSubmission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubmissionStoreMockRecorder) GetByID(ctx, id any) *MockSubmissionStoreGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubmissionStore)(nil).GetByID), ctx, id)
	return &MockSubmissionStoreGetByIDCall{Call: call}
}

// MockSubmissionStoreGetByIDCall wrap *gomock.Call
type MockSubmissionStoreGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubmissionStoreGetByIDCall) Return(arg0 *model.FormSubmission, arg1 error) *MockSubmissionStoreGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubmissionStoreGetByIDCall) Do(f func(context.Context, string) (*model.FormSubmission, error)) *MockSubmissionStoreGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubmissionStoreGetByIDCall) DoAndReturn(f func(context.Context, string) (*model.FormSubmission, error)) *MockSubmissionStoreGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockSubmissionStore) Update(ctx context.Context, submission *model.FormSubmission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, submission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubmissionStoreMockRecorder) Update(ctx, submission any) *MockSubmissionStoreUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubmissionStore)(nil).Update), ctx, submission)
	return &MockSubmissionStoreUpdateCall{Call: call}
}

// MockSubmissionStoreUpdateCall wrap *gomock.Call
type MockSubmissionStoreUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubmissionStoreUpdateCall) Return(arg0 error) *MockSubmissionStoreUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubmissionStoreUpdateCall) Do(f func(context.Context, *model.FormSubmission) error) *MockSubmissionStoreUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubmissionStoreUpdateCall) DoAndReturn(f func(context.Context, *model.FormSubmission) error) *MockSubmissionStoreUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
