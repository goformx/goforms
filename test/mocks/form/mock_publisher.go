// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/form/event/event.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/domain/form/event/event.go -destination=test/mocks/form/mock_publisher.go -package=form
//

// Package form is a generated GoMock package.
package form

import (
	context "context"
	reflect "reflect"
	time "time"

	event "github.com/goformx/goforms/internal/domain/form/event"
	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockEvent) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEventMockRecorder) Name() *MockEventNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEvent)(nil).Name))
	return &MockEventNameCall{Call: call}
}

// MockEventNameCall wrap *gomock.Call
type MockEventNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventNameCall) Return(arg0 string) *MockEventNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventNameCall) Do(f func() string) *MockEventNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventNameCall) DoAndReturn(f func() string) *MockEventNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Payload mocks base method.
func (m *MockEvent) Payload() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(any)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockEventMockRecorder) Payload() *MockEventPayloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockEvent)(nil).Payload))
	return &MockEventPayloadCall{Call: call}
}

// MockEventPayloadCall wrap *gomock.Call
type MockEventPayloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventPayloadCall) Return(arg0 any) *MockEventPayloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventPayloadCall) Do(f func() any) *MockEventPayloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventPayloadCall) DoAndReturn(f func() any) *MockEventPayloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Timestamp mocks base method.
func (m *MockEvent) Timestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *MockEventMockRecorder) Timestamp() *MockEventTimestampCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockEvent)(nil).Timestamp))
	return &MockEventTimestampCall{Call: call}
}

// MockEventTimestampCall wrap *gomock.Call
type MockEventTimestampCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventTimestampCall) Return(arg0 time.Time) *MockEventTimestampCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventTimestampCall) Do(f func() time.Time) *MockEventTimestampCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventTimestampCall) DoAndReturn(f func() time.Time) *MockEventTimestampCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher) Publish(ctx context.Context, arg1 event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(ctx, arg1 any) *MockPublisherPublishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), ctx, arg1)
	return &MockPublisherPublishCall{Call: call}
}

// MockPublisherPublishCall wrap *gomock.Call
type MockPublisherPublishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPublisherPublishCall) Return(arg0 error) *MockPublisherPublishCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPublisherPublishCall) Do(f func(context.Context, event.Event) error) *MockPublisherPublishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPublisherPublishCall) DoAndReturn(f func(context.Context, event.Event) error) *MockPublisherPublishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
	isgomock struct{}
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockSubscriber) Subscribe(ctx context.Context, eventName string, handler func(context.Context, event.Event) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, eventName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriberMockRecorder) Subscribe(ctx, eventName, handler any) *MockSubscriberSubscribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), ctx, eventName, handler)
	return &MockSubscriberSubscribeCall{Call: call}
}

// MockSubscriberSubscribeCall wrap *gomock.Call
type MockSubscriberSubscribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubscriberSubscribeCall) Return(arg0 error) *MockSubscriberSubscribeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubscriberSubscribeCall) Do(f func(context.Context, string, func(context.Context, event.Event) error) error) *MockSubscriberSubscribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubscriberSubscribeCall) DoAndReturn(f func(context.Context, string, func(context.Context, event.Event) error) error) *MockSubscriberSubscribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
