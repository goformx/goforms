// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/service.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/domain/user/service.go -destination=test/mocks/user/mock_service.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	user "github.com/goformx/goforms/internal/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockService) Authenticate(ctx context.Context, email, password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, email, password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockServiceMockRecorder) Authenticate(ctx, email, password any) *MockServiceAuthenticateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockService)(nil).Authenticate), ctx, email, password)
	return &MockServiceAuthenticateCall{Call: call}
}

// MockServiceAuthenticateCall wrap *gomock.Call
type MockServiceAuthenticateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceAuthenticateCall) Return(arg0 *user.User, arg1 error) *MockServiceAuthenticateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceAuthenticateCall) Do(f func(context.Context, string, string) (*user.User, error)) *MockServiceAuthenticateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceAuthenticateCall) DoAndReturn(f func(context.Context, string, string) (*user.User, error)) *MockServiceAuthenticateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(ctx, id any) *MockServiceDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), ctx, id)
	return &MockServiceDeleteUserCall{Call: call}
}

// MockServiceDeleteUserCall wrap *gomock.Call
type MockServiceDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteUserCall) Return(arg0 error) *MockServiceDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteUserCall) Do(f func(context.Context, string) error) *MockServiceDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteUserCall) DoAndReturn(f func(context.Context, string) error) *MockServiceDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, id any) *MockServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, id)
	return &MockServiceGetByIDCall{Call: call}
}

// MockServiceGetByIDCall wrap *gomock.Call
type MockServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByIDCall) Return(arg0 *user.User, arg1 error) *MockServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByIDCall) Do(f func(context.Context, string) (*user.User, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByIDCall) DoAndReturn(f func(context.Context, string) (*user.User, error)) *MockServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockService) GetUserByEmail(ctx context.Context, email string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockServiceMockRecorder) GetUserByEmail(ctx, email any) *MockServiceGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockService)(nil).GetUserByEmail), ctx, email)
	return &MockServiceGetUserByEmailCall{Call: call}
}

// MockServiceGetUserByEmailCall wrap *gomock.Call
type MockServiceGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetUserByEmailCall) Return(arg0 *user.User, arg1 error) *MockServiceGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetUserByEmailCall) Do(f func(context.Context, string) (*user.User, error)) *MockServiceGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (*user.User, error)) *MockServiceGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(ctx context.Context, id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(ctx, id any) *MockServiceGetUserByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), ctx, id)
	return &MockServiceGetUserByIDCall{Call: call}
}

// MockServiceGetUserByIDCall wrap *gomock.Call
type MockServiceGetUserByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetUserByIDCall) Return(arg0 *user.User, arg1 error) *MockServiceGetUserByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetUserByIDCall) Do(f func(context.Context, string) (*user.User, error)) *MockServiceGetUserByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetUserByIDCall) DoAndReturn(f func(context.Context, string) (*user.User, error)) *MockServiceGetUserByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserIDFromToken mocks base method.
func (m *MockService) GetUserIDFromToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromToken indicates an expected call of GetUserIDFromToken.
func (mr *MockServiceMockRecorder) GetUserIDFromToken(ctx, token any) *MockServiceGetUserIDFromTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromToken", reflect.TypeOf((*MockService)(nil).GetUserIDFromToken), ctx, token)
	return &MockServiceGetUserIDFromTokenCall{Call: call}
}

// MockServiceGetUserIDFromTokenCall wrap *gomock.Call
type MockServiceGetUserIDFromTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetUserIDFromTokenCall) Return(arg0 string, arg1 error) *MockServiceGetUserIDFromTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetUserIDFromTokenCall) Do(f func(context.Context, string) (string, error)) *MockServiceGetUserIDFromTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetUserIDFromTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockServiceGetUserIDFromTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsTokenBlacklisted mocks base method.
func (m *MockService) IsTokenBlacklisted(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockServiceMockRecorder) IsTokenBlacklisted(ctx, token any) *MockServiceIsTokenBlacklistedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockService)(nil).IsTokenBlacklisted), ctx, token)
	return &MockServiceIsTokenBlacklistedCall{Call: call}
}

// MockServiceIsTokenBlacklistedCall wrap *gomock.Call
type MockServiceIsTokenBlacklistedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceIsTokenBlacklistedCall) Return(arg0 bool, arg1 error) *MockServiceIsTokenBlacklistedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceIsTokenBlacklistedCall) Do(f func(context.Context, string) (bool, error)) *MockServiceIsTokenBlacklistedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceIsTokenBlacklistedCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockServiceIsTokenBlacklistedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockService) ListUsers(ctx context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockServiceMockRecorder) ListUsers(ctx any) *MockServiceListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockService)(nil).ListUsers), ctx)
	return &MockServiceListUsersCall{Call: call}
}

// MockServiceListUsersCall wrap *gomock.Call
type MockServiceListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListUsersCall) Return(arg0 []user.User, arg1 error) *MockServiceListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListUsersCall) Do(f func(context.Context) ([]user.User, error)) *MockServiceListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListUsersCall) DoAndReturn(f func(context.Context) ([]user.User, error)) *MockServiceListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, login *user.Login) (*user.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login)
	ret0, _ := ret[0].(*user.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, login any) *MockServiceLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, login)
	return &MockServiceLoginCall{Call: call}
}

// MockServiceLoginCall wrap *gomock.Call
type MockServiceLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceLoginCall) Return(arg0 *user.LoginResponse, arg1 error) *MockServiceLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceLoginCall) Do(f func(context.Context, *user.Login) (*user.LoginResponse, error)) *MockServiceLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceLoginCall) DoAndReturn(f func(context.Context, *user.Login) (*user.LoginResponse, error)) *MockServiceLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Logout mocks base method.
func (m *MockService) Logout(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockServiceMockRecorder) Logout(ctx, refreshToken any) *MockServiceLogoutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockService)(nil).Logout), ctx, refreshToken)
	return &MockServiceLogoutCall{Call: call}
}

// MockServiceLogoutCall wrap *gomock.Call
type MockServiceLogoutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceLogoutCall) Return(arg0 error) *MockServiceLogoutCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceLogoutCall) Do(f func(context.Context, string) error) *MockServiceLogoutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceLogoutCall) DoAndReturn(f func(context.Context, string) error) *MockServiceLogoutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SignUp mocks base method.
func (m *MockService) SignUp(ctx context.Context, signup *user.Signup) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, signup)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceMockRecorder) SignUp(ctx, signup any) *MockServiceSignUpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockService)(nil).SignUp), ctx, signup)
	return &MockServiceSignUpCall{Call: call}
}

// MockServiceSignUpCall wrap *gomock.Call
type MockServiceSignUpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSignUpCall) Return(arg0 *user.User, arg1 error) *MockServiceSignUpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSignUpCall) Do(f func(context.Context, *user.Signup) (*user.User, error)) *MockServiceSignUpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSignUpCall) DoAndReturn(f func(context.Context, *user.Signup) (*user.User, error)) *MockServiceSignUpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(ctx context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(ctx, arg1 any) *MockServiceUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), ctx, arg1)
	return &MockServiceUpdateUserCall{Call: call}
}

// MockServiceUpdateUserCall wrap *gomock.Call
type MockServiceUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateUserCall) Return(arg0 error) *MockServiceUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateUserCall) Do(f func(context.Context, *user.User) error) *MockServiceUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateUserCall) DoAndReturn(f func(context.Context, *user.User) error) *MockServiceUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateToken mocks base method.
func (m *MockService) ValidateToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockServiceMockRecorder) ValidateToken(ctx, token any) *MockServiceValidateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockService)(nil).ValidateToken), ctx, token)
	return &MockServiceValidateTokenCall{Call: call}
}

// MockServiceValidateTokenCall wrap *gomock.Call
type MockServiceValidateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceValidateTokenCall) Return(arg0 error) *MockServiceValidateTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceValidateTokenCall) Do(f func(context.Context, string) error) *MockServiceValidateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceValidateTokenCall) DoAndReturn(f func(context.Context, string) error) *MockServiceValidateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
