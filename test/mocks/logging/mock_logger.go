// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/logging/types.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/infrastructure/logging/types.go -destination=test/mocks/logging/mock_logger.go -package=logging
//

// Package logging is a generated GoMock package.
package logging

import (
	reflect "reflect"

	logging "github.com/goformx/goforms/internal/infrastructure/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, fields ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, fields ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg any, fields ...any) *MockLoggerFatalCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
	return &MockLoggerFatalCall{Call: call}
}

// MockLoggerFatalCall wrap *gomock.Call
type MockLoggerFatalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerFatalCall) Return() *MockLoggerFatalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerFatalCall) Do(f func(string, ...any)) *MockLoggerFatalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerFatalCall) DoAndReturn(f func(string, ...any)) *MockLoggerFatalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, fields ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SanitizeField mocks base method.
func (m *MockLogger) SanitizeField(key string, value any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SanitizeField", key, value)
	ret0, _ := ret[0].(any)
	return ret0
}

// SanitizeField indicates an expected call of SanitizeField.
func (mr *MockLoggerMockRecorder) SanitizeField(key, value any) *MockLoggerSanitizeFieldCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SanitizeField", reflect.TypeOf((*MockLogger)(nil).SanitizeField), key, value)
	return &MockLoggerSanitizeFieldCall{Call: call}
}

// MockLoggerSanitizeFieldCall wrap *gomock.Call
type MockLoggerSanitizeFieldCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerSanitizeFieldCall) Return(arg0 any) *MockLoggerSanitizeFieldCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerSanitizeFieldCall) Do(f func(string, any) any) *MockLoggerSanitizeFieldCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerSanitizeFieldCall) DoAndReturn(f func(string, any) any) *MockLoggerSanitizeFieldCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, fields ...any) *MockLoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
	return &MockLoggerWarnCall{Call: call}
}

// MockLoggerWarnCall wrap *gomock.Call
type MockLoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnCall) Return() *MockLoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnCall) Do(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *MockLogger) With(fields ...any) logging.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(fields ...any) *MockLoggerWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), fields...)
	return &MockLoggerWithCall{Call: call}
}

// MockLoggerWithCall wrap *gomock.Call
type MockLoggerWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithCall) Return(arg0 logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithCall) Do(f func(...any) logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithCall) DoAndReturn(f func(...any) logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithComponent mocks base method.
func (m *MockLogger) WithComponent(component string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithComponent", component)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithComponent indicates an expected call of WithComponent.
func (mr *MockLoggerMockRecorder) WithComponent(component any) *MockLoggerWithComponentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithComponent", reflect.TypeOf((*MockLogger)(nil).WithComponent), component)
	return &MockLoggerWithComponentCall{Call: call}
}

// MockLoggerWithComponentCall wrap *gomock.Call
type MockLoggerWithComponentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithComponentCall) Return(arg0 logging.Logger) *MockLoggerWithComponentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithComponentCall) Do(f func(string) logging.Logger) *MockLoggerWithComponentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithComponentCall) DoAndReturn(f func(string) logging.Logger) *MockLoggerWithComponentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithError mocks base method.
func (m *MockLogger) WithError(err error) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", err)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithError indicates an expected call of WithError.
func (mr *MockLoggerMockRecorder) WithError(err any) *MockLoggerWithErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockLogger)(nil).WithError), err)
	return &MockLoggerWithErrorCall{Call: call}
}

// MockLoggerWithErrorCall wrap *gomock.Call
type MockLoggerWithErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithErrorCall) Return(arg0 logging.Logger) *MockLoggerWithErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithErrorCall) Do(f func(error) logging.Logger) *MockLoggerWithErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithErrorCall) DoAndReturn(f func(error) logging.Logger) *MockLoggerWithErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithFields mocks base method.
func (m *MockLogger) WithFields(fields map[string]any) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockLoggerMockRecorder) WithFields(fields any) *MockLoggerWithFieldsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), fields)
	return &MockLoggerWithFieldsCall{Call: call}
}

// MockLoggerWithFieldsCall wrap *gomock.Call
type MockLoggerWithFieldsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithFieldsCall) Return(arg0 logging.Logger) *MockLoggerWithFieldsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithFieldsCall) Do(f func(map[string]any) logging.Logger) *MockLoggerWithFieldsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithFieldsCall) DoAndReturn(f func(map[string]any) logging.Logger) *MockLoggerWithFieldsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithOperation mocks base method.
func (m *MockLogger) WithOperation(operation string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOperation", operation)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithOperation indicates an expected call of WithOperation.
func (mr *MockLoggerMockRecorder) WithOperation(operation any) *MockLoggerWithOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOperation", reflect.TypeOf((*MockLogger)(nil).WithOperation), operation)
	return &MockLoggerWithOperationCall{Call: call}
}

// MockLoggerWithOperationCall wrap *gomock.Call
type MockLoggerWithOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithOperationCall) Return(arg0 logging.Logger) *MockLoggerWithOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithOperationCall) Do(f func(string) logging.Logger) *MockLoggerWithOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithOperationCall) DoAndReturn(f func(string) logging.Logger) *MockLoggerWithOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithRequestID mocks base method.
func (m *MockLogger) WithRequestID(requestID string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRequestID", requestID)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithRequestID indicates an expected call of WithRequestID.
func (mr *MockLoggerMockRecorder) WithRequestID(requestID any) *MockLoggerWithRequestIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRequestID", reflect.TypeOf((*MockLogger)(nil).WithRequestID), requestID)
	return &MockLoggerWithRequestIDCall{Call: call}
}

// MockLoggerWithRequestIDCall wrap *gomock.Call
type MockLoggerWithRequestIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithRequestIDCall) Return(arg0 logging.Logger) *MockLoggerWithRequestIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithRequestIDCall) Do(f func(string) logging.Logger) *MockLoggerWithRequestIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithRequestIDCall) DoAndReturn(f func(string) logging.Logger) *MockLoggerWithRequestIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithUserID mocks base method.
func (m *MockLogger) WithUserID(userID string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUserID", userID)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithUserID indicates an expected call of WithUserID.
func (mr *MockLoggerMockRecorder) WithUserID(userID any) *MockLoggerWithUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUserID", reflect.TypeOf((*MockLogger)(nil).WithUserID), userID)
	return &MockLoggerWithUserIDCall{Call: call}
}

// MockLoggerWithUserIDCall wrap *gomock.Call
type MockLoggerWithUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithUserIDCall) Return(arg0 logging.Logger) *MockLoggerWithUserIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithUserIDCall) Do(f func(string) logging.Logger) *MockLoggerWithUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithUserIDCall) DoAndReturn(f func(string) logging.Logger) *MockLoggerWithUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
