// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/logging/types.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/infrastructure/logging/types.go -destination=test/mocks/logging/mock_logger.go -package=logging
//

// Package logging is a generated GoMock package.
package logging

import (
	reflect "reflect"

	logging "github.com/goformx/goforms/internal/infrastructure/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, fields ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, fields ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg any, fields ...any) *MockLoggerFatalCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
	return &MockLoggerFatalCall{Call: call}
}

// MockLoggerFatalCall wrap *gomock.Call
type MockLoggerFatalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerFatalCall) Return() *MockLoggerFatalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerFatalCall) Do(f func(string, ...any)) *MockLoggerFatalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerFatalCall) DoAndReturn(f func(string, ...any)) *MockLoggerFatalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, fields ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, fields ...any) *MockLoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
	return &MockLoggerWarnCall{Call: call}
}

// MockLoggerWarnCall wrap *gomock.Call
type MockLoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnCall) Return() *MockLoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnCall) Do(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *MockLogger) With(fields ...any) logging.Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(fields ...any) *MockLoggerWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), fields...)
	return &MockLoggerWithCall{Call: call}
}

// MockLoggerWithCall wrap *gomock.Call
type MockLoggerWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithCall) Return(arg0 logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithCall) Do(f func(...any) logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithCall) DoAndReturn(f func(...any) logging.Logger) *MockLoggerWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
