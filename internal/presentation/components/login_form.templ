package components

templ LoginForm() {
    <section class="auth-section">
        <form class="auth-form" id="loginForm" onsubmit="handleLogin(event)">
            <div class="form-group">
                <label for="email" class="form-label">
                    Email address
                </label>
                <input id="email" name="email" type="email" autocomplete="email" required class="form-input"/>
                <span class="error-message" id="email_error"></span>
            </div>

            <div class="form-group">
                <label for="password" class="form-label">
                    Password
                </label>
                <input id="password" name="password" type="password" required class="form-input"/>
                <span class="error-message" id="password_error"></span>
            </div>

            <button type="submit" class="btn btn-primary">
                Sign in
            </button>

            <div class="auth-alt-action">
                <p>Don't have an account? <a href="/signup">Sign up</a></p>
                <p><a href="/forgot-password">Forgot password?</a></p>
            </div>
        </form>

        <script>
            // Setup real-time validation
            validation.setupRealTimeValidation('loginForm', validationSchemas.login);

            async function handleLogin(event) {
                event.preventDefault();
                validation.clearAllErrors();
                
                const formData = {
                    email: document.getElementById('email').value,
                    password: document.getElementById('password').value
                };

                // Validate form data
                if (!validation.validateForm(formData, validationSchemas.login)) {
                    return;
                }

                try {
                    const response = await validation.fetchWithCSRF('/api/v1/auth/login', {
                        method: 'POST',
                        body: JSON.stringify(formData)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        if (errorData.message) {
                            // Handle server-side validation errors
                            const validationErrors = errorData.message.split('\n');
                            validationErrors.forEach(error => {
                                const match = error.match(/Key: '(\w+)'/);
                                if (match) {
                                    const field = match[1].toLowerCase();
                                    validation.showError(field, error.split('Error:')[1].trim());
                                }
                            });
                        } else {
                            throw new Error('Login failed');
                        }
                        return;
                    }

                    // Successful login
                    const data = await response.json();
                    window.location.href = '/dashboard';
                } catch (error) {
                    console.error('Login error:', error);
                    alert('An error occurred during login. Please try again.');
                }
            }
        </script>
    </section>
} 