package pages

import (
	"encoding/json"
	"github.com/goformx/goforms/internal/domain/form/model"
	"github.com/goformx/goforms/internal/presentation/templates/layouts"
	"github.com/goformx/goforms/internal/presentation/templates/components"
	"github.com/goformx/goforms/internal/infrastructure/view"
)

templ FormPreview(data view.PageData, form *model.Form) {
	@layouts.Layout(data, FormPreviewWrapper(data, form))
}

templ FormPreviewWrapper(data view.PageData, form *model.Form) {
	@FormPreviewHeader(data, form)
	@formPreviewContent(data, form)
}

templ FormPreviewHeader(data view.PageData, form *model.Form) {
	@components.DashboardHeader(components.DashboardHeaderProps{
		Title:    "Form Preview",
		Subtitle: form.Title,
		Actions: []components.DashboardHeaderAction{
			{
				Href:  "/forms/" + form.ID + "/edit",
				Label: "Edit Form",
				Icon:  "bi bi-pencil",
				Class: "btn btn-secondary btn-icon",
				Title: "Edit Form",
			},
			{
				Href:  "/dashboard",
				Label: "Dashboard",
				Icon:  "bi bi-arrow-left",
				Class: "btn btn-outline btn-icon",
				Title: "Back to Dashboard",
			},
		},
	})
}

templ formPreviewContent(data view.PageData, form *model.Form) {
	<div class="dashboard-page">
		<div class="dashboard-container">
			<div class="dashboard-content">
				<div class="form-preview-grid">
					<div class="form-preview-main">
						<div class="form-panel">
							<div class="form-panel-header">
								<h3>Form Preview</h3>
								<div class="form-preview-notice">
									<i class="bi bi-eye"></i>
									<span>This is how users will see your form</span>
								</div>
							</div>
							<div class="form-panel-body">
								if form.Description != "" {
									<p class="form-description">{ form.Description }</p>
								}

								if form.Schema != nil && len(form.Schema) > 0 {
									<div class="form-renderer" id="form-renderer" data-form-schema={ formatJSONForJS(form.Schema) } data-form-id={ form.ID }>
										<!-- Form will be rendered here by JavaScript -->
										<div class="form-loading">
											<i class="bi bi-hourglass-split"></i>
											<span>Loading form...</span>
										</div>
									</div>
								} else {
									<div class="form-empty-state">
										<i class="bi bi-file-earmark-text"></i>
										<h3>No Form Schema</h3>
										<p>This form doesn't have any fields defined yet.</p>
										<a href={ templ.SafeURL("/forms/" + form.ID + "/edit") } class="btn btn-primary">Add Fields</a>
									</div>
								}
							</div>
						</div>
					</div>

					<div class="form-preview-sidebar">
						<div class="form-panel">
							<div class="form-panel-header">
								<h3>Form Information</h3>
							</div>
							<div class="form-panel-body">
								<div class="form-info-item">
									<span class="form-info-label">Status:</span>
									<span class="form-info-value">
										switch form.Status {
											case "active":
												<span class="status-badge status-active">Active</span>
											case "draft":
												<span class="status-badge status-draft">Draft</span>
											default:
												<span class="status-badge status-inactive">Inactive</span>
										}
									</span>
								</div>
								<div class="form-info-item">
									<span class="form-info-label">Created:</span>
									<span class="form-info-value">{ form.CreatedAt.Format("Jan 2, 2006 at 3:04 PM") }</span>
								</div>
								<div class="form-info-item">
									<span class="form-info-label">Last Updated:</span>
									<span class="form-info-value">{ form.UpdatedAt.Format("Jan 2, 2006 at 3:04 PM") }</span>
								</div>
							</div>
							<div class="form-panel-footer">
								<a href={ templ.SafeURL("/forms/" + form.ID + "/submissions") } class="btn btn-primary">View Submissions</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	if form.Schema != nil && len(form.Schema) > 0 {
		@templ.JSONScript("form-preview-data", data.FormPreviewAssetPath)

		if data.IsDevelopment {
			<script type="module" id="form-preview-script" data-form-preview-path={ data.AssetPath("src/js/pages/form-preview.ts") }>
				if (document.getElementById('form-renderer')) {
					const script = document.getElementById('form-preview-script');
					const path = script.getAttribute('data-form-preview-path');
					await import(path);
				}
			</script>
		} else {
			<script type="module">
				const path = JSON.parse(document.getElementById('form-preview-data').textContent);
				if (document.getElementById('form-renderer')) {
					await import(path);
				}
			</script>
		}
	}
}

// formatJSONForJS formats JSON data for JavaScript
func formatJSONForJS(data model.JSON) string {
	if data == nil {
		return "{}"
	}

	formatted, err := json.Marshal(data)
	if err != nil {
		return "{}"
	}

	return string(formatted)
}
