package pages

import (
"github.com/goformx/goforms/internal/domain/form/model"
"github.com/goformx/goforms/internal/presentation/templates/layouts"
"github.com/goformx/goforms/internal/presentation/view"
"strings"
)

// Reusable card section for forms using a slot (content func())
templ FormBuilderSection(title string, subtitle string, content templ.Component) {
<div class="gf-section">
	<h2>{ title }</h2>
	if subtitle != "" {
	<p class="section-subtitle">{ subtitle }</p>
	}
	@content
</div>
}

// Reusable form field group
templ FormFieldGroup(label string, id string, input templ.Component, errorId string) {
<div class="gf-form-group">
	<label for={ id } class="gf-label">{ label }</label>
	@input
	<div id={ errorId } class="error-message"></div>
</div>
}

templ FormTitleInput(data view.PageData) {
<input type="text" id="title" name="title" required class="gf-input" value={ data.Form.Title }
	placeholder="Enter form title" />
}

templ FormDescriptionInput(data view.PageData) {
<textarea id="description" name="description" rows="3" class="gf-input"
	placeholder="Enter form description">{ data.Form.Description }</textarea>
}

templ FormDetailsContent(data view.PageData) {
<form id="edit-form" class="auth-form" method="POST" data-validate="editForm">
	<input type="hidden" name="_csrf" value={ data.CSRFToken } />
	<div id="form_error" class="form-error"></div>
	@FormFieldGroup("Form Title", "title", FormTitleInput(data), "title_error")
	@FormFieldGroup("Description", "description", FormDescriptionInput(data), "description_error")
	<div class="form-actions" style="display: none;">
		<a href="/dashboard" class="gf-button gf-button--outline">Cancel</a>
		<button type="submit" class="gf-button gf-button--primary">Update Details</button>
	</div>
</form>
}

templ FormFieldsContent(data view.PageData) {
<div class="formio-form-builder">
	<div class="form-fields-toolbar">
		<!-- Removed search input -->
		<!-- Add filter/sort options here if needed -->
	</div>
	<div id="form-schema-builder" class="form-schema-builder" data-form-id={ data.Form.ID }></div>
	<div class="form-actions">
		<button id="view-schema-btn" class="gf-button gf-button--outline" type="button">
			<i class="bi bi-code-square"></i>
			<span>View Schema</span>
		</button>
		<button id="save-fields-btn" class="gf-button gf-button--primary gf-button--lg" type="button">
			<span class="spinner" style="display:none;"></span>
			<span>Save Fields</span>
		</button>
		<span id="schema-save-feedback" style="margin-left:1em;"></span>
	</div>
</div>
}

templ EditForm(data view.PageData, form *model.Form) {
@layouts.Layout(data, editFormContent(data, form))
}

templ editFormContent(data view.PageData, form *model.Form) {
<div class="dashboard-page">
	<meta name="csrf-token" content={ data.CSRFToken } />
	<div class="dashboard-container">
		<div class="dashboard-header">
			<div class="dashboard-header-left">
				<h1 class="dashboard-title">Edit Form</h1>
				<p class="dashboard-subtitle">Configure your form settings and fields</p>
			</div>
			<div class="dashboard-header-right">
				<a href={ templ.SafeURL("/forms/" + data.Form.ID + "/submissions") } class="gf-button gf-button--outline">
					<i class="bi bi-list-check"></i>
					<span>View Submissions</span>
				</a>
			</div>
		</div>

		<div class="dashboard-content form-builder-content">
			<div class="form-builder-grid">
				<div class="form-builder-sidebar">
					<div class="form-card">
						<form id="edit-form" method="POST" action={ templ.SafeURL("/forms/" + form.ID + "/edit") } class="form">
							<input type="hidden" name="id" value={ form.ID } />
							<input type="hidden" name="_csrf" value={ data.CSRFToken } />
							<div id="form_error" class="form-error"></div>

							<div class="form-group">
								<label for="title">Form Title</label>
								<input type="text" id="title" name="title" value={ form.Title } required
									class="gf-input" placeholder="Enter form title" />
							</div>

							<div class="form-group">
								<label for="description">Description</label>
								<textarea id="description" name="description" rows="3" class="gf-input"
									placeholder="Enter form description">{ form.Description }</textarea>
							</div>

							<div class="form-group">
								<label for="status">Status</label>
								<select id="status" name="status" class="gf-input">
									if form.Status == "draft" {
										<option value="draft" selected>Draft</option>
									} else {
										<option value="draft">Draft</option>
									}
									if form.Status == "published" {
										<option value="published" selected>Published</option>
									} else {
										<option value="published">Published</option>
									}
									if form.Status == "archived" {
										<option value="archived" selected>Archived</option>
									} else {
										<option value="archived">Archived</option>
									}
								</select>
							</div>

							<div class="form-group">
								<label for="cors_origins">Allowed Origins (comma-separated)</label>
								<input type="text" id="cors_origins" name="cors_origins" class="gf-input" placeholder="e.g. *,https://example.com" value={ strings.Join([]string(form.CorsOrigins), ",") } />
							</div>

							<div class="form-actions">
								<a href="/dashboard" class="gf-button gf-button--outline">Cancel</a>
								<button type="submit" class="gf-button gf-button--primary">Save Changes</button>
							</div>
						</form>
					</div>
				</div>

				<div class="form-builder-main">
					<div class="form-builder-card">
						<div class="form-builder-header">
							<h2>Form Builder</h2>
							<p>Design your form by adding and configuring fields</p>
						</div>
						<div class="form-builder-container">
							<div id="form-schema-builder" class="form-builder" data-form-id={ form.ID }></div>
						</div>
						<div class="form-builder-actions">
							<button id="view-schema-btn" class="gf-button gf-button--outline" type="button">
								<i class="bi bi-code-square"></i>
								<span>View Schema</span>
							</button>
							<button id="save-fields-btn" class="gf-button gf-button--primary" type="button">
								<span class="spinner" style="display:none;"></span>
								<span>Save Fields</span>
							</button>
							<span id="schema-save-feedback" style="margin-left:1em;"></span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.form-builder-grid {
		display: grid;
		grid-template-columns: 300px 1fr;
		gap: var(--spacing-6);
		align-items: start;
	}

	@media (max-width: 1024px) {
		.form-builder-grid {
			grid-template-columns: 1fr;
		}
	}

	.form-builder-sidebar {
		position: sticky;
		top: var(--spacing-6);
	}

	.form-builder-main {
		min-width: 0;
		/* Prevent grid item from overflowing */
	}

	.dashboard-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: var(--spacing-6);
	}

	.dashboard-header-right {
		display: flex;
		gap: var(--spacing-4);
	}

	.form-builder-container {
		min-height: 500px;
		border: 1px solid var(--border-color);
		border-radius: var(--border-radius);
		background: var(--background-color);
		padding: var(--spacing-4);
	}

	.form-builder {
		width: 100%;
		height: 100%;
	}

	.form-builder-actions {
		display: flex;
		gap: var(--spacing-4);
		margin-top: var(--spacing-4);
		align-items: center;
	}
</style>

@templ.JSONScript("form-builder-data", data.FormBuilderAssetPath)
if data.IsDevelopment {
<script type="module" id="form-builder-script" data-form-builder-path={ data.AssetPath("src/js/form-builder.ts") }>
	if (document.getElementById('form-schema-builder')) {
		const script = document.getElementById('form-builder-script');
		const path = script.getAttribute('data-form-builder-path');
		await import(path);
	}
</script>
} else {
<script type="module">
	const path = JSON.parse(document.getElementById('form-builder-data').textContent);
	if (document.getElementById('form-schema-builder')) {
		await import(path);
	}
</script>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
	const form = document.getElementById('edit-form');
	if (form) {
		form.addEventListener('submit', async function(e) {
			e.preventDefault();
			
			const submitBtn = form.querySelector('button[type="submit"]');
			const originalText = submitBtn.innerHTML;
			submitBtn.innerHTML = 'Saving...';
			submitBtn.disabled = true;
			
			try {
				const formData = new FormData(form);
				const response = await fetch(form.action, {
					method: 'POST',
					body: formData,
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					}
				});
				
				const result = await response.json();
				
				if (result.success) {
					// Show success message
					const successDiv = document.createElement('div');
					successDiv.className = 'alert alert-success';
					successDiv.textContent = result.message;
					successDiv.style.cssText = 'background: #d4edda; color: #155724; padding: 10px; border-radius: 4px; margin-bottom: 15px;';
					
					// Insert before the form
					form.parentNode.insertBefore(successDiv, form);
					
					// Remove success message after 3 seconds
					setTimeout(() => {
						successDiv.remove();
					}, 3000);
				} else {
					// Show error message
					const errorDiv = document.createElement('div');
					errorDiv.className = 'alert alert-error';
					errorDiv.textContent = result.message || 'An error occurred';
					errorDiv.style.cssText = 'background: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; margin-bottom: 15px;';
					
					// Insert before the form
					form.parentNode.insertBefore(errorDiv, form);
					
					// Remove error message after 5 seconds
					setTimeout(() => {
						errorDiv.remove();
					}, 5000);
				}
			} catch (error) {
				console.error('Form submission error:', error);
				const errorDiv = document.createElement('div');
				errorDiv.className = 'alert alert-error';
				errorDiv.textContent = 'An error occurred while saving the form';
				errorDiv.style.cssText = 'background: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; margin-bottom: 15px;';
				
				// Insert before the form
				form.parentNode.insertBefore(errorDiv, form);
				
				// Remove error message after 5 seconds
				setTimeout(() => {
					errorDiv.remove();
				}, 5000);
			} finally {
				submitBtn.innerHTML = originalText;
				submitBtn.disabled = false;
			}
		});
	}
});
</script>
}