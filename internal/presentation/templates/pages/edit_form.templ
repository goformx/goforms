package pages

import (
	"github.com/goformx/goforms/internal/infrastructure/view/shared"
	"github.com/goformx/goforms/internal/domain/form/model"
	"github.com/goformx/goforms/internal/presentation/templates/layouts"
	"github.com/goformx/goforms/internal/presentation/templates/components"
	"github.com/goformx/goforms/internal/infrastructure/view"
)

// Reusable card section for forms using a slot (content func())
templ FormBuilderSection(title string, subtitle string, content templ.Component) {
<div class="gf-section">
	<h2>{ title }</h2>
	if subtitle != "" {
	<p class="section-subtitle">{ subtitle }</p>
	}
	@content
</div>
}

// Reusable form field group
templ FormFieldGroup(label string, id string, input templ.Component, errorId string) {
<div class="gf-form-group">
	<label for={ id } class="gf-label">{ label }</label>
	@input
	<div id={ errorId } class="error-message"></div>
</div>
}

templ FormTitleInput(data view.PageData) {
<input type="text" id="title" name="title" required class="gf-input" value={ data.Form.Title }
	placeholder="Enter form title" />
}

templ FormDescriptionInput(data view.PageData) {
<textarea id="description" name="description" rows="3" class="gf-input"
	placeholder="Enter form description">{ data.Form.Description }</textarea>
}

templ FormDetailsContent(data view.PageData) {
<form id="edit-form" class="auth-form" method="POST" data-validate="editForm">
	<div id="form_error" class="form-error"></div>
	@FormFieldGroup("Form Title", "title", FormTitleInput(data), "title_error")
	@FormFieldGroup("Description", "description", FormDescriptionInput(data), "description_error")
	<div class="form-actions hidden">
		<a href="/dashboard" class="gf-button gf-button--outline">Cancel</a>
		<button type="submit" class="gf-button gf-button--primary">Update Details</button>
	</div>
</form>
}

templ FormFieldsContent(data view.PageData) {
<div class="formio-form-builder">
	<div class="form-fields-toolbar">
		<!-- Removed search input -->
		<!-- Add filter/sort options here if needed -->
	</div>
	<div id="form-schema-builder" class="form-schema-builder" data-form-id={ data.Form.ID }></div>
	<div class="form-actions">
		<button id="view-schema-btn" class="gf-button gf-button--outline" type="button">
			<i class="bi bi-code-square"></i>
			<span>View Schema</span>
		</button>
		<button id="save-fields-btn" class="gf-button gf-button--primary gf-button--lg" type="button">
			<span class="spinner"></span>
			<span>Save Fields</span>
		</button>
		<span id="schema-save-feedback"></span>
	</div>
</div>
}

templ EditForm(data view.PageData, form *model.Form) {
	@layouts.Layout(data, EditFormWrapper(data, form))
}

templ EditFormWrapper(data view.PageData, form *model.Form) {
	@EditFormHeader(data, form)
	@editFormContent(data, form)
}

templ EditFormHeader(data view.PageData, form *model.Form) {
	@components.DashboardHeader(components.DashboardHeaderProps{
		Title:    "Edit Form",
		Subtitle: "Configure your form settings and fields",
		Actions: []components.DashboardHeaderAction{
			{
				Href:  "/forms/" + data.Form.ID + "/preview",
				Label: "Preview",
				Icon:  "bi bi-eye",
				Class: "gf-button gf-button--outline",
				Title: "Preview Form",
			},
			{
				Href:  "/forms/" + data.Form.ID + "/submissions",
				Label: "View Submissions",
				Icon:  "bi bi-list-check",
				Class: "gf-button gf-button--outline",
				Title: "View Form Submissions",
			},
		},
	})
}

templ editFormContent(data view.PageData, form *model.Form) {
	<div class="dashboard-page">
		<div class="dashboard-container">
			<div class="dashboard-content form-builder-content">
			<div class="form-builder-grid">
				<div class="form-builder-sidebar">
					<div class="form-panel">
						<form id="edit-form" method="POST" action={ templ.SafeURL("/forms/" + form.ID + "/edit") } class="form">
							<input type="hidden" name="id" value={ form.ID } />
							<div id="form_error" class="form-error"></div>

							<div class="form-group">
								<label for="title">Form Title</label>
								<input type="text" id="title" name="title" value={ form.Title } required
									class="gf-input" placeholder="Enter form title" />
							</div>

							<div class="form-group">
								<label for="description">Description</label>
								<textarea id="description" name="description" rows="3" class="gf-input"
									placeholder="Enter form description">{ form.Description }</textarea>
							</div>

							<div class="form-group">
								<label for="status">Status</label>
								<select id="status" name="status" class="gf-input">
									switch form.Status {
										case "draft":
											<option value="draft" selected>Draft</option>
										default:
											<option value="draft">Draft</option>
									}
									switch form.Status {
										case "published":
											<option value="published" selected>Published</option>
										default:
											<option value="published">Published</option>
									}
									switch form.Status {
										case "archived":
											<option value="archived" selected>Archived</option>
										default:
											<option value="archived">Archived</option>
									}
								</select>
							</div>

							<div class="form-group">
								<label for="cors_origins">Allowed Origins (comma-separated)</label>
								<input type="text" id="cors_origins" name="cors_origins" class="gf-input" placeholder="e.g. *,https://example.com" value={ shared.GetCorsOriginsString(form.CorsOrigins) } />
								<small class="form-help">Required when publishing. Use * to allow all origins, or specify domains like https://example.com</small>
							</div>

							<div class="form-actions">
								<a href="/dashboard" class="gf-button gf-button--outline">Cancel</a>
								<button type="submit" class="gf-button gf-button--primary">Save Changes</button>
							</div>
						</form>
					</div>
				</div>

				<div class="form-builder-main">
					<div class="form-builder-panel">
						<div class="form-builder-header">
							<h2>Form Builder</h2>
							<p>Design your form by adding and configuring fields</p>
						</div>
						<div class="form-builder-container">
							<div id="form-schema-builder" class="form-builder" data-form-id={ form.ID }></div>
						</div>
						<div class="form-builder-actions">
							<button id="view-schema-btn" class="gf-button gf-button--outline" type="button">
								<i class="bi bi-code-square"></i>
								<span>View Schema</span>
							</button>
							<button id="save-fields-btn" class="gf-button gf-button--primary" type="button">
								<span class="spinner"></span>
								<span>Save Fields</span>
							</button>
							<span id="schema-save-feedback"></span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>



@templ.JSONScript("form-builder-data", data.FormBuilderAssetPath)
if data.IsDevelopment {
<script type="module" id="form-builder-script" data-form-builder-path={ data.AssetPath("src/js/pages/form-builder.ts") }>
	if (document.getElementById('form-schema-builder')) {
		const script = document.getElementById('form-builder-script');
		const path = script.getAttribute('data-form-builder-path');
		console.log('Loading form builder in development mode:', path);
		try {
		await import(path);
			console.log('Form builder loaded successfully');
		} catch (error) {
			console.error('Failed to load form builder:', error);
		}
	}
</script>
} else {
<script type="module">
	const path = JSON.parse(document.getElementById('form-builder-data').textContent);
	console.log('Loading form builder in production mode:', path);
	if (document.getElementById('form-schema-builder')) {
		try {
		await import(path);
			console.log('Form builder loaded successfully');
		} catch (error) {
			console.error('Failed to load form builder:', error);
		}
	} else {
		console.error('Form schema builder element not found');
	}
</script>
}

<script>
document.addEventListener('DOMContentLoaded', function() {
	const form = document.getElementById('edit-form');
	const statusSelect = document.getElementById('status');
	const corsOriginsInput = document.getElementById('cors_origins');

	if (form) {
		form.addEventListener('submit', async function(e) {
			e.preventDefault();

			// Validate CORS origins if status is published
			if (statusSelect.value === 'published') {
				const corsOrigins = corsOriginsInput.value.trim();
				if (!corsOrigins) {
					alert('CORS origins are required when publishing a form.');
					corsOriginsInput.focus();
					return;
				}
			}

			const submitBtn = form.querySelector('button[type="submit"]');
			const originalText = submitBtn.innerHTML;
			submitBtn.innerHTML = 'Saving...';
			submitBtn.disabled = true;

			try {
				const formData = new FormData(form);
				const response = await fetch(form.action, {
					method: 'POST',
					body: formData,
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					}
				});

				const result = await response.json();

				if (result.success) {
					// Show success message
					const successDiv = document.createElement('div');
					successDiv.className = 'alert alert-success';
					successDiv.textContent = result.message;

					// Insert before the form
					form.parentNode.insertBefore(successDiv, form);

					// Remove success message after 3 seconds
					setTimeout(() => {
						successDiv.remove();
					}, 3000);
				} else {
					// Show error message
					const errorDiv = document.createElement('div');
					errorDiv.className = 'alert alert-error';
					errorDiv.textContent = result.message || 'An error occurred';

					// Insert before the form
					form.parentNode.insertBefore(errorDiv, form);

					// Remove error message after 5 seconds
					setTimeout(() => {
						errorDiv.remove();
					}, 5000);
				}
			} catch (error) {
				console.error('Form submission error:', error);
				const errorDiv = document.createElement('div');
				errorDiv.className = 'alert alert-error';
				errorDiv.textContent = 'An error occurred while saving the form';

				// Insert before the form
				form.parentNode.insertBefore(errorDiv, form);

				// Remove error message after 5 seconds
				setTimeout(() => {
					errorDiv.remove();
				}, 5000);
			} finally {
				submitBtn.innerHTML = originalText;
				submitBtn.disabled = false;
			}
		});
	}
});
</script>
}
