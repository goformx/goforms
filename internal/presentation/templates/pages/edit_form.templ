package pages

import (
	"github.com/goformx/goforms/internal/presentation/templates/layouts"
	"github.com/goformx/goforms/internal/presentation/templates/shared"
)

// Reusable card section for forms using a slot (content func())
templ FormBuilderSection(title string, subtitle string, content templ.Component) {
	<div class="gf-section">
		<h2>{ title }</h2>
		if subtitle != "" {
			<p class="section-subtitle">{ subtitle }</p>
		}
		@content
	</div>
}

// Reusable form field group
templ FormFieldGroup(label string, id string, input templ.Component, errorId string) {
	<div class="gf-form-group">
		<label for={ id } class="gf-label">{ label }</label>
		@input
		<div id={ errorId } class="error-message"></div>
	</div>
}

templ FormTitleInput(data shared.PageData) {
	<input type="text" id="title" name="title" required class="gf-input" value={ data.Form.Title } placeholder="Enter form title" />
}

templ FormDescriptionInput(data shared.PageData) {
	<textarea id="description" name="description" rows="3" class="gf-input" placeholder="Enter form description">{ data.Form.Description }</textarea>
}

templ FormDetailsContent(data shared.PageData) {
	<form id="edit-form" class="auth-form" method="POST" data-validate="editForm">
		<input type="hidden" name="csrf_token" value={ data.CSRFToken } />
		<div id="form_error" class="form-error"></div>
		@FormFieldGroup("Form Title", "title", FormTitleInput(data), "title_error")
		@FormFieldGroup("Description", "description", FormDescriptionInput(data), "description_error")
		<div class="form-actions" style="display: none;">
			<a href="/dashboard" class="gf-button gf-button--outline">Cancel</a>
			<button type="submit" class="gf-button gf-button--primary">Update Details</button>
		</div>
	</form>
}

templ FormFieldsContent(data shared.PageData) {
	<div class="formio-form-builder">
		<div class="form-fields-toolbar">
			<!-- Removed search input -->
			<!-- Add filter/sort options here if needed -->
		</div>
		<div id="form-schema-builder" class="form-schema-builder" data-form-id={ data.Form.ID }></div>
		<div class="form-actions">
			<button id="view-schema-btn" class="gf-button gf-button--outline" type="button">
				<i class="bi bi-code-square"></i>
				<span>View Schema</span>
			</button>
			<button id="save-fields-btn" class="gf-button gf-button--primary gf-button--lg" type="button">
				<span class="spinner" style="display:none;"></span>
				<span>Save Fields</span>
			</button>
			<span id="schema-save-feedback" style="margin-left:1em;"></span>
		</div>
	</div>
}

templ EditForm(data shared.PageData) {
	@layouts.Dashboard(shared.PageData{
		Title: data.Title,
		User: data.User,
		Forms: data.Forms,
		Form: data.Form,
		Submissions: data.Submissions,
		CSRFToken: data.CSRFToken,
		IsDevelopment: data.IsDevelopment,
		AssetPath: data.AssetPath,
		Content: EditFormContent(data),
	})
}

templ EditFormContent(data shared.PageData) {
	<div class="dashboard-page">
		<div class="dashboard-container">
			<div class="dashboard-header">
				<div class="dashboard-header-left">
					<h1 class="dashboard-title">Edit Form</h1>
					<p class="dashboard-subtitle">Configure your form settings and fields</p>
				</div>
			</div>

			<div class="dashboard-content form-builder-content">
				<div class="form-builder-grid">
					<div class="form-builder-sidebar">
						@FormBuilderSection("Form Details", "Update the basic information about your form", FormDetailsContent(data))
					</div>
					<div class="form-builder-main">
						@FormBuilderSection("Form Fields", "Design your form by adding and configuring fields. Click \"Save Fields\" to save your changes.", FormFieldsContent(data))
					</div>
				</div>
			</div>
		</div>
	</div>

	<style>
		.form-builder-grid {
			display: grid;
			grid-template-columns: 300px 1fr;
			gap: var(--spacing-6);
			align-items: start;
		}

		@media (max-width: 1024px) {
			.form-builder-grid {
				grid-template-columns: 1fr;
			}
		}

		.form-builder-sidebar {
			position: sticky;
			top: var(--spacing-6);
		}

		.form-builder-main {
			min-width: 0; /* Prevent grid item from overflowing */
		}
	</style>

	@templ.JSONScript("form-builder-data", data.FormBuilderAssetPath)
	if data.IsDevelopment {
		<script type="module" id="form-builder-script" data-form-builder-path={ data.AssetPath("js/form-builder.ts") }>
			if (document.getElementById('form-schema-builder')) {
				const script = document.getElementById('form-builder-script');
				const path = script.getAttribute('data-form-builder-path');
				await import(path);
			}
		</script>
	} else {
		<script type="module">
			const path = JSON.parse(document.getElementById('form-builder-data').textContent);
			if (document.getElementById('form-schema-builder')) {
				await import(path);
			}
		</script>
	}
	<script type="module" id="form-service-script" data-service-path={ data.AssetPath("js/services/form-service.js") }>
		const script = document.getElementById('form-service-script');
		const path = script.getAttribute('data-service-path');
		const { FormService } = await import(path);

		// Handle form submission
		const form = document.getElementById('edit-form');
		const formService = FormService.getInstance();
		const formId = document.getElementById('form-schema-builder').getAttribute('data-form-id');

		form.addEventListener('submit', async (e) => {
			e.preventDefault();
			const formData = new FormData(form);

			try {
				await formService.updateFormDetails(formId, {
					title: formData.get('title'),
					description: formData.get('description')
				});
				window.location.href = '/dashboard';
			} catch (error) {
				console.error('Failed to update form:', error);
				const errorDiv = document.getElementById('form_error');
				errorDiv.textContent = error.message || 'Failed to update form. Please try again.';
				errorDiv.style.display = 'block';
			}
		});

		// Save Fields button logic
		const saveBtn = document.getElementById('save-fields-btn');
		const feedback = document.getElementById('schema-save-feedback');
		if (saveBtn) {
			saveBtn.addEventListener('click', async () => {
				feedback.textContent = 'Saving...';
				saveBtn.disabled = true;
				saveBtn.querySelector('.spinner').style.display = 'inline-block';
				try {
					const ok = await window.formBuilderInstance.saveSchema();
					feedback.textContent = ok ? 'Schema saved successfully.' : 'Failed to save schema.';
				} catch (e) {
					feedback.textContent = 'Error saving schema.';
				} finally {
					saveBtn.disabled = false;
					saveBtn.querySelector('.spinner').style.display = 'none';
					setTimeout(() => (feedback.textContent = ''), 3000);
				}
			});
		}
	</script>

	<script>
		const form = document.getElementById('edit-form');
		const formActions = document.querySelector('.form-actions');
		const titleInput = document.getElementById('title');
		const descriptionInput = document.getElementById('description');
		
		function checkForChanges() {
			const hasChanges = titleInput.value !== titleInput.defaultValue || 
							  descriptionInput.value !== descriptionInput.defaultValue;
			formActions.style.display = hasChanges ? 'flex' : 'none';
		}

		titleInput.addEventListener('input', checkForChanges);
		descriptionInput.addEventListener('input', checkForChanges);
	</script>
} 