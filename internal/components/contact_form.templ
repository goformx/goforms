package components

templ ContactForm() {
    <section class="form-section">
        <h1>Contact Form Demo</h1>
        <p>This form demonstrates Goforms' capabilities.</p>
        
        <form id="contact-form" action="/api/v1/contacts" method="POST">
            <div class="form-group">
                <label for="name">Name</label>
                <input type="text" id="name" name="name" required/>
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required/>
            </div>

            <div class="form-group">
                <label for="message">Message</label>
                <textarea id="message" name="message" required></textarea>
            </div>

            <button type="submit" class="button primary">Send Message</button>
        </form>

        <div id="form-result" class="hidden">
            <h3>API Response:</h3>
            <pre><code id="response"></code></pre>
        </div>
    </section>

    <section class="submissions">
        <h2>Recent Messages</h2>
        <div id="submissions-list">
            <!-- Submissions will be loaded here -->
        </div>
    </section>

    <script>
        // Format date to a readable string
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            return date.toLocaleString();
        }

        // Load and display submissions
        async function loadSubmissions() {
            try {
                const response = await fetch('/api/v1/contacts');
                console.log('Response status:', response.status);
                console.log('Response headers:', Object.fromEntries(response.headers.entries()));
                
                const responseText = await response.text();
                console.log('Raw response:', responseText);
                
                let data;
                try {
                    const parsed = JSON.parse(responseText);
                    console.log('Parsed response:', parsed);
                    data = parsed.data || []; // Use empty array if data is null
                } catch (parseErr) {
                    console.error('JSON parse error:', parseErr);
                    throw new Error('Failed to parse response as JSON');
                }
                
                if (!Array.isArray(data)) {
                    console.error('Data is not an array:', data);
                    throw new Error('Invalid response format: data is not an array');
                }

                const submissionsList = document.getElementById('submissions-list');
                if (data.length === 0) {
                    submissionsList.innerHTML = '<div class="no-submissions">No messages yet. Be the first to send one!</div>';
                    return;
                }

                submissionsList.innerHTML = data
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .map(sub => `
                        <div class="submission">
                            <div class="submission-header">
                                <strong>${sub.name}</strong>
                                <span>${formatDate(sub.created_at)}</span>
                            </div>
                            <div class="submission-message">${sub.message}</div>
                        </div>
                    `)
                    .join('');
            } catch (err) {
                console.error('Failed to load submissions:', err);
                const submissionsList = document.getElementById('submissions-list');
                submissionsList.innerHTML = `<div class="error">Error loading submissions: ${err.message}</div>`;
            }
        }

        // Load submissions on page load
        loadSubmissions();

        // Handle form submission
        document.getElementById('contact-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const form = e.target;
            const result = document.getElementById('form-result');
            const responseEl = document.getElementById('response');

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: form.name.value,
                        email: form.email.value,
                        message: form.message.value,
                    }),
                });

                const data = await response.json();
                result.classList.remove('hidden');
                responseEl.textContent = JSON.stringify(data, null, 2);
                
                if (response.ok) {
                    form.reset();
                    // Reload submissions after successful post
                    loadSubmissions();
                }
            } catch (err) {
                result.classList.remove('hidden');
                responseEl.textContent = `Error: ${err.message}`;
            }
        });
    </script>
}
